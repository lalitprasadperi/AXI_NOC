$date
    Apr 25, 2024  22:14:19
$end
$version
    TOOL:	ncsim(64)	15.20-s073
$end
$timescale
    1 ns
$end

$scope module testbench $end
$var reg       1 !    clk  $end
$var reg       1 "    clk_div2  $end
$var reg       1 #    clk_div4  $end
$var reg       1 $    clk_div8  $end

$scope module axicb_crossbar_top $end
$var parameter 32 %    AXI_ADDR_W  $end
$var parameter 32 &    AXI_ID_W  $end
$var parameter 32 '    AXI_DATA_W  $end
$var parameter 32 (    MST_NB  $end
$var parameter 32 )    SLV_NB  $end
$var parameter 32 *    MST_PIPELINE  $end
$var parameter 32 +    SLV_PIPELINE  $end
$var parameter 32 ,    STRB_MODE  $end
$var parameter 32 -    USER_SUPPORT  $end
$var parameter 32 .    AXI_AUSER_W  $end
$var parameter 32 /    AXI_WUSER_W  $end
$var parameter 32 0    AXI_BUSER_W  $end
$var parameter 32 1    AXI_RUSER_W  $end
$var parameter 32 2    TIMEOUT_VALUE  $end
$var parameter 32 3    TIMEOUT_ENABLE  $end
$var parameter 32 4    MST0_CDC  $end
$var parameter 32 5    MST0_OSTDREQ_NUM  $end
$var parameter 32 6    MST0_PRIORITY  $end
$var parameter  4 7    MST0_ROUTES [3:0] $end
$var parameter  8 8    MST0_ID_MASK [7:0] $end
$var parameter 32 9    MST0_RW  $end
$var parameter 32 :    MST1_CDC  $end
$var parameter 32 ;    MST1_OSTDREQ_NUM  $end
$var parameter 32 <    MST1_PRIORITY  $end
$var parameter  4 =    MST1_ROUTES [3:0] $end
$var parameter  8 >    MST1_ID_MASK [7:0] $end
$var parameter 32 ?    MST1_RW  $end
$var parameter 32 @    MST2_CDC  $end
$var parameter 32 A    MST2_OSTDREQ_NUM  $end
$var parameter 32 B    MST2_PRIORITY  $end
$var parameter  4 C    MST2_ROUTES [3:0] $end
$var parameter  8 D    MST2_ID_MASK [7:0] $end
$var parameter 32 E    MST2_RW  $end
$var parameter 32 F    MST3_CDC  $end
$var parameter 32 G    MST3_OSTDREQ_NUM  $end
$var parameter 32 H    MST3_PRIORITY  $end
$var parameter  4 I    MST3_ROUTES [3:0] $end
$var parameter  8 J    MST3_ID_MASK [7:0] $end
$var parameter 32 K    MST3_RW  $end
$var parameter 32 L    SLV0_CDC  $end
$var parameter 32 M    SLV0_START_ADDR  $end
$var parameter 32 N    SLV0_END_ADDR  $end
$var parameter 32 O    SLV0_OSTDREQ_NUM  $end
$var parameter 32 P    SLV0_KEEP_BASE_ADDR  $end
$var parameter 32 Q    SLV1_CDC  $end
$var parameter 32 R    SLV1_START_ADDR  $end
$var parameter 32 S    SLV1_END_ADDR  $end
$var parameter 32 T    SLV1_OSTDREQ_NUM  $end
$var parameter 32 U    SLV1_KEEP_BASE_ADDR  $end
$var parameter 32 V    SLV2_CDC  $end
$var parameter 32 W    SLV2_START_ADDR  $end
$var parameter 32 X    SLV2_END_ADDR  $end
$var parameter 32 Y    SLV2_OSTDREQ_NUM  $end
$var parameter 32 Z    SLV2_KEEP_BASE_ADDR  $end
$var parameter 32 [    SLV3_CDC  $end
$var parameter 32 \    SLV3_START_ADDR  $end
$var parameter 32 ]    SLV3_END_ADDR  $end
$var parameter 32 ^    SLV3_OSTDREQ_NUM  $end
$var parameter 32 _    SLV3_KEEP_BASE_ADDR  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c    slv0_aclk  $end
$var wire      1 d    slv0_aresetn  $end
$var wire      1 e    slv0_srst  $end
$var wire      1 e    slv0_awvalid  $end
$var reg       1 f    slv0_awready  $end
$var wire     16 g    slv0_awaddr [15:0] $end
$var wire      3 h    slv0_awprot [2:0] $end
$var wire      8 i    slv0_awid [7:0] $end
$var wire      1 e    slv0_awuser [0] $end
$var wire      1 e    slv0_wvalid  $end
$var reg       1 j    slv0_wready  $end
$var wire     40 k    slv0_wdata [39:0] $end
$var wire      5 l    slv0_wstrb [4:0] $end
$var wire      1 e    slv0_wuser [0] $end
$var reg       1 m    slv0_bvalid  $end
$var wire      1 e    slv0_bready  $end
$var reg       8 n    slv0_bid [7:0] $end
$var reg       2 o    slv0_bresp [1:0] $end
$var reg       1 p    slv0_buser [0:0] $end
$var wire      1 e    slv0_arvalid  $end
$var reg       1 q    slv0_arready  $end
$var wire     16 g    slv0_araddr [15:0] $end
$var wire      3 h    slv0_arprot [2:0] $end
$var wire      8 i    slv0_arid [7:0] $end
$var wire      1 e    slv0_aruser [0] $end
$var reg       1 r    slv0_rvalid  $end
$var wire      1 e    slv0_rready  $end
$var reg       8 s    slv0_rid [7:0] $end
$var reg       2 t    slv0_rresp [1:0] $end
$var reg      40 u    slv0_rdata [39:0] $end
$var reg       1 v    slv0_ruser [0:0] $end
$var wire      1 c    slv1_aclk  $end
$var wire      1 d    slv1_aresetn  $end
$var wire      1 e    slv1_srst  $end
$var wire      1 e    slv1_awvalid  $end
$var reg       1 w    slv1_awready  $end
$var wire     16 g    slv1_awaddr [15:0] $end
$var wire      3 h    slv1_awprot [2:0] $end
$var wire      8 i    slv1_awid [7:0] $end
$var wire      1 e    slv1_awuser [0] $end
$var wire      1 e    slv1_wvalid  $end
$var reg       1 x    slv1_wready  $end
$var wire     40 k    slv1_wdata [39:0] $end
$var wire      5 l    slv1_wstrb [4:0] $end
$var wire      1 e    slv1_wuser [0] $end
$var reg       1 y    slv1_bvalid  $end
$var wire      1 e    slv1_bready  $end
$var reg       8 z    slv1_bid [7:0] $end
$var reg       2 {    slv1_bresp [1:0] $end
$var reg       1 |    slv1_buser [0:0] $end
$var wire      1 e    slv1_arvalid  $end
$var reg       1 }    slv1_arready  $end
$var wire     16 g    slv1_araddr [15:0] $end
$var wire      3 h    slv1_arprot [2:0] $end
$var wire      8 i    slv1_arid [7:0] $end
$var wire      1 e    slv1_aruser [0] $end
$var reg       1 ~    slv1_rvalid  $end
$var wire      1 e    slv1_rready  $end
$var reg       8 !!   slv1_rid [7:0] $end
$var reg       2 "!   slv1_rresp [1:0] $end
$var reg      40 #!   slv1_rdata [39:0] $end
$var reg       1 $!   slv1_ruser [0:0] $end
$var wire      1 c    slv2_aclk  $end
$var wire      1 d    slv2_aresetn  $end
$var wire      1 e    slv2_srst  $end
$var wire      1 e    slv2_awvalid  $end
$var reg       1 %!   slv2_awready  $end
$var wire     16 g    slv2_awaddr [15:0] $end
$var wire      3 h    slv2_awprot [2:0] $end
$var wire      8 i    slv2_awid [7:0] $end
$var wire      1 e    slv2_awuser [0] $end
$var wire      1 e    slv2_wvalid  $end
$var reg       1 &!   slv2_wready  $end
$var wire     40 k    slv2_wdata [39:0] $end
$var wire      5 l    slv2_wstrb [4:0] $end
$var wire      1 e    slv2_wuser [0] $end
$var reg       1 '!   slv2_bvalid  $end
$var wire      1 e    slv2_bready  $end
$var reg       8 (!   slv2_bid [7:0] $end
$var reg       2 )!   slv2_bresp [1:0] $end
$var reg       1 *!   slv2_buser [0:0] $end
$var wire      1 e    slv2_arvalid  $end
$var reg       1 +!   slv2_arready  $end
$var wire     16 g    slv2_araddr [15:0] $end
$var wire      3 h    slv2_arprot [2:0] $end
$var wire      8 i    slv2_arid [7:0] $end
$var wire      1 e    slv2_aruser [0] $end
$var reg       1 ,!   slv2_rvalid  $end
$var wire      1 e    slv2_rready  $end
$var reg       8 -!   slv2_rid [7:0] $end
$var reg       2 .!   slv2_rresp [1:0] $end
$var reg      40 /!   slv2_rdata [39:0] $end
$var reg       1 0!   slv2_ruser [0:0] $end
$var wire      1 c    slv3_aclk  $end
$var wire      1 d    slv3_aresetn  $end
$var wire      1 e    slv3_srst  $end
$var wire      1 e    slv3_awvalid  $end
$var reg       1 1!   slv3_awready  $end
$var wire     16 g    slv3_awaddr [15:0] $end
$var wire      3 h    slv3_awprot [2:0] $end
$var wire      8 i    slv3_awid [7:0] $end
$var wire      1 e    slv3_awuser [0] $end
$var wire      1 e    slv3_wvalid  $end
$var reg       1 2!   slv3_wready  $end
$var wire     40 k    slv3_wdata [39:0] $end
$var wire      5 l    slv3_wstrb [4:0] $end
$var wire      1 e    slv3_wuser [0] $end
$var reg       1 3!   slv3_bvalid  $end
$var wire      1 e    slv3_bready  $end
$var reg       8 4!   slv3_bid [7:0] $end
$var reg       2 5!   slv3_bresp [1:0] $end
$var reg       1 6!   slv3_buser [0:0] $end
$var wire      1 e    slv3_arvalid  $end
$var reg       1 7!   slv3_arready  $end
$var wire     16 g    slv3_araddr [15:0] $end
$var wire      3 h    slv3_arprot [2:0] $end
$var wire      8 i    slv3_arid [7:0] $end
$var wire      1 e    slv3_aruser [0] $end
$var reg       1 8!   slv3_rvalid  $end
$var wire      1 e    slv3_rready  $end
$var reg       8 9!   slv3_rid [7:0] $end
$var reg       2 :!   slv3_rresp [1:0] $end
$var reg      40 ;!   slv3_rdata [39:0] $end
$var reg       1 <!   slv3_ruser [0:0] $end
$var wire      1 =!   mst0_aclk  $end
$var wire      1 d    mst0_aresetn  $end
$var wire      1 e    mst0_srst  $end
$var reg       1 >!   mst0_awvalid  $end
$var wire      1 e    mst0_awready  $end
$var reg      16 ?!   mst0_awaddr [15:0] $end
$var reg       3 @!   mst0_awprot [2:0] $end
$var reg       8 A!   mst0_awid [7:0] $end
$var reg       1 B!   mst0_awuser [0:0] $end
$var reg       1 C!   mst0_wvalid  $end
$var wire      1 e    mst0_wready  $end
$var reg      40 D!   mst0_wdata [39:0] $end
$var reg       5 E!   mst0_wstrb [4:0] $end
$var reg       1 F!   mst0_wuser [0:0] $end
$var wire      1 e    mst0_bvalid  $end
$var reg       1 G!   mst0_bready  $end
$var wire      8 i    mst0_bid [7:0] $end
$var wire      2 H!   mst0_bresp [1:0] $end
$var wire      1 e    mst0_buser [0] $end
$var reg       1 I!   mst0_arvalid  $end
$var wire      1 e    mst0_arready  $end
$var reg      16 J!   mst0_araddr [15:0] $end
$var reg       3 K!   mst0_arprot [2:0] $end
$var reg       8 L!   mst0_arid [7:0] $end
$var reg       1 M!   mst0_aruser [0:0] $end
$var wire      1 e    mst0_rvalid  $end
$var reg       1 N!   mst0_rready  $end
$var wire      8 i    mst0_rid [7:0] $end
$var wire      2 H!   mst0_rresp [1:0] $end
$var wire     40 k    mst0_rdata [39:0] $end
$var wire      1 e    mst0_ruser [0] $end
$var wire      1 =!   mst1_aclk  $end
$var wire      1 d    mst1_aresetn  $end
$var wire      1 e    mst1_srst  $end
$var reg       1 O!   mst1_awvalid  $end
$var wire      1 e    mst1_awready  $end
$var reg      16 P!   mst1_awaddr [15:0] $end
$var reg       3 Q!   mst1_awprot [2:0] $end
$var reg       8 R!   mst1_awid [7:0] $end
$var reg       1 S!   mst1_awuser [0:0] $end
$var reg       1 T!   mst1_wvalid  $end
$var wire      1 e    mst1_wready  $end
$var reg      40 U!   mst1_wdata [39:0] $end
$var reg       5 V!   mst1_wstrb [4:0] $end
$var reg       1 W!   mst1_wuser [0:0] $end
$var wire      1 e    mst1_bvalid  $end
$var reg       1 X!   mst1_bready  $end
$var wire      8 i    mst1_bid [7:0] $end
$var wire      2 H!   mst1_bresp [1:0] $end
$var wire      1 e    mst1_buser [0] $end
$var reg       1 Y!   mst1_arvalid  $end
$var wire      1 e    mst1_arready  $end
$var reg      16 Z!   mst1_araddr [15:0] $end
$var reg       3 [!   mst1_arprot [2:0] $end
$var reg       8 \!   mst1_arid [7:0] $end
$var reg       1 ]!   mst1_aruser [0:0] $end
$var wire      1 e    mst1_rvalid  $end
$var reg       1 ^!   mst1_rready  $end
$var wire      8 i    mst1_rid [7:0] $end
$var wire      2 H!   mst1_rresp [1:0] $end
$var wire     40 k    mst1_rdata [39:0] $end
$var wire      1 e    mst1_ruser [0] $end
$var wire      1 =!   mst2_aclk  $end
$var wire      1 d    mst2_aresetn  $end
$var wire      1 e    mst2_srst  $end
$var reg       1 _!   mst2_awvalid  $end
$var wire      1 e    mst2_awready  $end
$var reg      16 `!   mst2_awaddr [15:0] $end
$var reg       3 a!   mst2_awprot [2:0] $end
$var reg       8 b!   mst2_awid [7:0] $end
$var reg       1 c!   mst2_awuser [0:0] $end
$var reg       1 d!   mst2_wvalid  $end
$var wire      1 e    mst2_wready  $end
$var reg      40 e!   mst2_wdata [39:0] $end
$var reg       5 f!   mst2_wstrb [4:0] $end
$var reg       1 g!   mst2_wuser [0:0] $end
$var wire      1 e    mst2_bvalid  $end
$var reg       1 h!   mst2_bready  $end
$var wire      8 i    mst2_bid [7:0] $end
$var wire      2 H!   mst2_bresp [1:0] $end
$var wire      1 e    mst2_buser [0] $end
$var reg       1 i!   mst2_arvalid  $end
$var wire      1 e    mst2_arready  $end
$var reg      16 j!   mst2_araddr [15:0] $end
$var reg       3 k!   mst2_arprot [2:0] $end
$var reg       8 l!   mst2_arid [7:0] $end
$var reg       1 m!   mst2_aruser [0:0] $end
$var wire      1 e    mst2_rvalid  $end
$var reg       1 n!   mst2_rready  $end
$var wire      8 i    mst2_rid [7:0] $end
$var wire      2 H!   mst2_rresp [1:0] $end
$var wire     40 k    mst2_rdata [39:0] $end
$var wire      1 e    mst2_ruser [0] $end
$var wire      1 =!   mst3_aclk  $end
$var wire      1 d    mst3_aresetn  $end
$var wire      1 e    mst3_srst  $end
$var reg       1 o!   mst3_awvalid  $end
$var wire      1 e    mst3_awready  $end
$var reg      16 p!   mst3_awaddr [15:0] $end
$var reg       3 q!   mst3_awprot [2:0] $end
$var reg       8 r!   mst3_awid [7:0] $end
$var reg       1 s!   mst3_awuser [0:0] $end
$var reg       1 t!   mst3_wvalid  $end
$var wire      1 e    mst3_wready  $end
$var reg      40 u!   mst3_wdata [39:0] $end
$var reg       5 v!   mst3_wstrb [4:0] $end
$var reg       1 w!   mst3_wuser [0:0] $end
$var wire      1 e    mst3_bvalid  $end
$var reg       1 x!   mst3_bready  $end
$var wire      8 i    mst3_bid [7:0] $end
$var wire      2 H!   mst3_bresp [1:0] $end
$var wire      1 e    mst3_buser [0] $end
$var reg       1 y!   mst3_arvalid  $end
$var wire      1 e    mst3_arready  $end
$var reg      16 z!   mst3_araddr [15:0] $end
$var reg       3 {!   mst3_arprot [2:0] $end
$var reg       8 |!   mst3_arid [7:0] $end
$var reg       1 }!   mst3_aruser [0:0] $end
$var wire      1 e    mst3_rvalid  $end
$var reg       1 ~!   mst3_rready  $end
$var wire      8 i    mst3_rid [7:0] $end
$var wire      2 H!   mst3_rresp [1:0] $end
$var wire     40 k    mst3_rdata [39:0] $end
$var wire      1 e    mst3_ruser [0] $end

$scope module axi4lite_crossbar_inst $end
$var parameter 32 !"   AXI_ADDR_W  $end
$var parameter 32 ""   AXI_ID_W  $end
$var parameter 32 #"   AXI_DATA_W  $end
$var parameter 32 $"   MST_NB  $end
$var parameter 32 %"   SLV_NB  $end
$var parameter 32 &"   MST_PIPELINE  $end
$var parameter 32 '"   SLV_PIPELINE  $end
$var parameter 32 ("   STRB_MODE  $end
$var parameter 32 )"   AXI_SIGNALING  $end
$var parameter 32 *"   USER_SUPPORT  $end
$var parameter 32 +"   AXI_AUSER_W  $end
$var parameter 32 ,"   AXI_WUSER_W  $end
$var parameter 32 -"   AXI_BUSER_W  $end
$var parameter 32 ."   AXI_RUSER_W  $end
$var parameter 32 /"   TIMEOUT_VALUE  $end
$var parameter 32 0"   TIMEOUT_ENABLE  $end
$var parameter 32 1"   MST0_CDC  $end
$var parameter 32 2"   MST0_OSTDREQ_NUM  $end
$var parameter 32 3"   MST0_OSTDREQ_SIZE  $end
$var parameter 32 4"   MST0_PRIORITY  $end
$var parameter  4 5"   MST0_ROUTES [3:0] $end
$var parameter  8 6"   MST0_ID_MASK [7:0] $end
$var parameter 32 7"   MST0_RW  $end
$var parameter 32 8"   MST1_CDC  $end
$var parameter 32 9"   MST1_OSTDREQ_NUM  $end
$var parameter 32 :"   MST1_OSTDREQ_SIZE  $end
$var parameter 32 ;"   MST1_PRIORITY  $end
$var parameter  4 <"   MST1_ROUTES [3:0] $end
$var parameter  8 ="   MST1_ID_MASK [7:0] $end
$var parameter 32 >"   MST1_RW  $end
$var parameter 32 ?"   MST2_CDC  $end
$var parameter 32 @"   MST2_OSTDREQ_NUM  $end
$var parameter 32 A"   MST2_OSTDREQ_SIZE  $end
$var parameter 32 B"   MST2_PRIORITY  $end
$var parameter  4 C"   MST2_ROUTES [3:0] $end
$var parameter  8 D"   MST2_ID_MASK [7:0] $end
$var parameter 32 E"   MST2_RW  $end
$var parameter 32 F"   MST3_CDC  $end
$var parameter 32 G"   MST3_OSTDREQ_NUM  $end
$var parameter 32 H"   MST3_OSTDREQ_SIZE  $end
$var parameter 32 I"   MST3_PRIORITY  $end
$var parameter  4 J"   MST3_ROUTES [3:0] $end
$var parameter  8 K"   MST3_ID_MASK [7:0] $end
$var parameter 32 L"   MST3_RW  $end
$var parameter 32 M"   SLV0_CDC  $end
$var parameter 32 N"   SLV0_START_ADDR  $end
$var parameter 32 O"   SLV0_END_ADDR  $end
$var parameter 32 P"   SLV0_OSTDREQ_NUM  $end
$var parameter 32 Q"   SLV0_OSTDREQ_SIZE  $end
$var parameter 32 R"   SLV0_KEEP_BASE_ADDR  $end
$var parameter 32 S"   SLV1_CDC  $end
$var parameter 32 T"   SLV1_START_ADDR  $end
$var parameter 32 U"   SLV1_END_ADDR  $end
$var parameter 32 V"   SLV1_OSTDREQ_NUM  $end
$var parameter 32 W"   SLV1_OSTDREQ_SIZE  $end
$var parameter 32 X"   SLV1_KEEP_BASE_ADDR  $end
$var parameter 32 Y"   SLV2_CDC  $end
$var parameter 32 Z"   SLV2_START_ADDR  $end
$var parameter 32 ["   SLV2_END_ADDR  $end
$var parameter 32 \"   SLV2_OSTDREQ_NUM  $end
$var parameter 32 ]"   SLV2_OSTDREQ_SIZE  $end
$var parameter 32 ^"   SLV2_KEEP_BASE_ADDR  $end
$var parameter 32 _"   SLV3_CDC  $end
$var parameter 32 `"   SLV3_START_ADDR  $end
$var parameter 32 a"   SLV3_END_ADDR  $end
$var parameter 32 b"   SLV3_OSTDREQ_NUM  $end
$var parameter 32 c"   SLV3_OSTDREQ_SIZE  $end
$var parameter 32 d"   SLV3_KEEP_BASE_ADDR  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c    slv0_aclk  $end
$var wire      1 d    slv0_aresetn  $end
$var wire      1 e    slv0_srst  $end
$var wire      1 e    slv0_awvalid  $end
$var reg       1 e"   slv0_awready  $end
$var wire     16 g    slv0_awaddr [15:0] $end
$var wire      8 f"   slv0_awlen [7:0] $end
$var wire      3 g"   slv0_awsize [2:0] $end
$var wire      2 h"   slv0_awburst [1:0] $end
$var wire      2 h"   slv0_awlock [1:0] $end
$var wire      4 i"   slv0_awcache [3:0] $end
$var wire      3 h    slv0_awprot [2:0] $end
$var wire      4 i"   slv0_awqos [3:0] $end
$var wire      4 i"   slv0_awregion [3:0] $end
$var wire      8 i    slv0_awid [7:0] $end
$var wire      1 e    slv0_awuser [0] $end
$var wire      1 e    slv0_wvalid  $end
$var reg       1 j"   slv0_wready  $end
$var wire      1 d    slv0_wlast  $end
$var wire     40 k    slv0_wdata [39:0] $end
$var wire      5 l    slv0_wstrb [4:0] $end
$var wire      1 e    slv0_wuser [0] $end
$var reg       1 k"   slv0_bvalid  $end
$var wire      1 e    slv0_bready  $end
$var reg       8 l"   slv0_bid [7:0] $end
$var reg       2 m"   slv0_bresp [1:0] $end
$var reg       1 n"   slv0_buser [0:0] $end
$var wire      1 e    slv0_arvalid  $end
$var reg       1 o"   slv0_arready  $end
$var wire     16 g    slv0_araddr [15:0] $end
$var wire      8 f"   slv0_arlen [7:0] $end
$var wire      3 g"   slv0_arsize [2:0] $end
$var wire      2 h"   slv0_arburst [1:0] $end
$var wire      2 h"   slv0_arlock [1:0] $end
$var wire      4 i"   slv0_arcache [3:0] $end
$var wire      3 h    slv0_arprot [2:0] $end
$var wire      4 i"   slv0_arqos [3:0] $end
$var wire      4 i"   slv0_arregion [3:0] $end
$var wire      8 i    slv0_arid [7:0] $end
$var wire      1 e    slv0_aruser [0] $end
$var reg       1 p"   slv0_rvalid  $end
$var wire      1 e    slv0_rready  $end
$var reg       8 q"   slv0_rid [7:0] $end
$var reg       2 r"   slv0_rresp [1:0] $end
$var reg      40 s"   slv0_rdata [39:0] $end
$var reg       1 t"   slv0_rlast  $end
$var reg       1 u"   slv0_ruser [0:0] $end
$var wire      1 c    slv1_aclk  $end
$var wire      1 d    slv1_aresetn  $end
$var wire      1 e    slv1_srst  $end
$var wire      1 e    slv1_awvalid  $end
$var reg       1 v"   slv1_awready  $end
$var wire     16 g    slv1_awaddr [15:0] $end
$var wire      8 f"   slv1_awlen [7:0] $end
$var wire      3 g"   slv1_awsize [2:0] $end
$var wire      2 h"   slv1_awburst [1:0] $end
$var wire      2 h"   slv1_awlock [1:0] $end
$var wire      4 i"   slv1_awcache [3:0] $end
$var wire      3 h    slv1_awprot [2:0] $end
$var wire      4 i"   slv1_awqos [3:0] $end
$var wire      4 i"   slv1_awregion [3:0] $end
$var wire      8 i    slv1_awid [7:0] $end
$var wire      1 e    slv1_awuser [0] $end
$var wire      1 e    slv1_wvalid  $end
$var reg       1 w"   slv1_wready  $end
$var wire      1 d    slv1_wlast  $end
$var wire     40 k    slv1_wdata [39:0] $end
$var wire      5 l    slv1_wstrb [4:0] $end
$var wire      1 e    slv1_wuser [0] $end
$var reg       1 x"   slv1_bvalid  $end
$var wire      1 e    slv1_bready  $end
$var reg       8 y"   slv1_bid [7:0] $end
$var reg       2 z"   slv1_bresp [1:0] $end
$var reg       1 {"   slv1_buser [0:0] $end
$var wire      1 e    slv1_arvalid  $end
$var reg       1 |"   slv1_arready  $end
$var wire     16 g    slv1_araddr [15:0] $end
$var wire      8 f"   slv1_arlen [7:0] $end
$var wire      3 g"   slv1_arsize [2:0] $end
$var wire      2 h"   slv1_arburst [1:0] $end
$var wire      2 h"   slv1_arlock [1:0] $end
$var wire      4 i"   slv1_arcache [3:0] $end
$var wire      3 h    slv1_arprot [2:0] $end
$var wire      4 i"   slv1_arqos [3:0] $end
$var wire      4 i"   slv1_arregion [3:0] $end
$var wire      8 i    slv1_arid [7:0] $end
$var wire      1 e    slv1_aruser [0] $end
$var reg       1 }"   slv1_rvalid  $end
$var wire      1 e    slv1_rready  $end
$var reg       8 ~"   slv1_rid [7:0] $end
$var reg       2 !#   slv1_rresp [1:0] $end
$var reg      40 "#   slv1_rdata [39:0] $end
$var reg       1 ##   slv1_rlast  $end
$var reg       1 $#   slv1_ruser [0:0] $end
$var wire      1 c    slv2_aclk  $end
$var wire      1 d    slv2_aresetn  $end
$var wire      1 e    slv2_srst  $end
$var wire      1 e    slv2_awvalid  $end
$var reg       1 %#   slv2_awready  $end
$var wire     16 g    slv2_awaddr [15:0] $end
$var wire      8 f"   slv2_awlen [7:0] $end
$var wire      3 g"   slv2_awsize [2:0] $end
$var wire      2 h"   slv2_awburst [1:0] $end
$var wire      2 h"   slv2_awlock [1:0] $end
$var wire      4 i"   slv2_awcache [3:0] $end
$var wire      3 h    slv2_awprot [2:0] $end
$var wire      4 i"   slv2_awqos [3:0] $end
$var wire      4 i"   slv2_awregion [3:0] $end
$var wire      8 i    slv2_awid [7:0] $end
$var wire      1 e    slv2_awuser [0] $end
$var wire      1 e    slv2_wvalid  $end
$var reg       1 &#   slv2_wready  $end
$var wire      1 d    slv2_wlast  $end
$var wire     40 k    slv2_wdata [39:0] $end
$var wire      5 l    slv2_wstrb [4:0] $end
$var wire      1 e    slv2_wuser [0] $end
$var reg       1 '#   slv2_bvalid  $end
$var wire      1 e    slv2_bready  $end
$var reg       8 (#   slv2_bid [7:0] $end
$var reg       2 )#   slv2_bresp [1:0] $end
$var reg       1 *#   slv2_buser [0:0] $end
$var wire      1 e    slv2_arvalid  $end
$var reg       1 +#   slv2_arready  $end
$var wire     16 g    slv2_araddr [15:0] $end
$var wire      8 f"   slv2_arlen [7:0] $end
$var wire      3 g"   slv2_arsize [2:0] $end
$var wire      2 h"   slv2_arburst [1:0] $end
$var wire      2 h"   slv2_arlock [1:0] $end
$var wire      4 i"   slv2_arcache [3:0] $end
$var wire      3 h    slv2_arprot [2:0] $end
$var wire      4 i"   slv2_arqos [3:0] $end
$var wire      4 i"   slv2_arregion [3:0] $end
$var wire      8 i    slv2_arid [7:0] $end
$var wire      1 e    slv2_aruser [0] $end
$var reg       1 ,#   slv2_rvalid  $end
$var wire      1 e    slv2_rready  $end
$var reg       8 -#   slv2_rid [7:0] $end
$var reg       2 .#   slv2_rresp [1:0] $end
$var reg      40 /#   slv2_rdata [39:0] $end
$var reg       1 0#   slv2_rlast  $end
$var reg       1 1#   slv2_ruser [0:0] $end
$var wire      1 c    slv3_aclk  $end
$var wire      1 d    slv3_aresetn  $end
$var wire      1 e    slv3_srst  $end
$var wire      1 e    slv3_awvalid  $end
$var reg       1 2#   slv3_awready  $end
$var wire     16 g    slv3_awaddr [15:0] $end
$var wire      8 f"   slv3_awlen [7:0] $end
$var wire      3 g"   slv3_awsize [2:0] $end
$var wire      2 h"   slv3_awburst [1:0] $end
$var wire      2 h"   slv3_awlock [1:0] $end
$var wire      4 i"   slv3_awcache [3:0] $end
$var wire      3 h    slv3_awprot [2:0] $end
$var wire      4 i"   slv3_awqos [3:0] $end
$var wire      4 i"   slv3_awregion [3:0] $end
$var wire      8 i    slv3_awid [7:0] $end
$var wire      1 e    slv3_awuser [0] $end
$var wire      1 e    slv3_wvalid  $end
$var reg       1 3#   slv3_wready  $end
$var wire      1 d    slv3_wlast  $end
$var wire     40 k    slv3_wdata [39:0] $end
$var wire      5 l    slv3_wstrb [4:0] $end
$var wire      1 e    slv3_wuser [0] $end
$var reg       1 4#   slv3_bvalid  $end
$var wire      1 e    slv3_bready  $end
$var reg       8 5#   slv3_bid [7:0] $end
$var reg       2 6#   slv3_bresp [1:0] $end
$var reg       1 7#   slv3_buser [0:0] $end
$var wire      1 e    slv3_arvalid  $end
$var reg       1 8#   slv3_arready  $end
$var wire     16 g    slv3_araddr [15:0] $end
$var wire      8 f"   slv3_arlen [7:0] $end
$var wire      3 g"   slv3_arsize [2:0] $end
$var wire      2 h"   slv3_arburst [1:0] $end
$var wire      2 h"   slv3_arlock [1:0] $end
$var wire      4 i"   slv3_arcache [3:0] $end
$var wire      3 h    slv3_arprot [2:0] $end
$var wire      4 i"   slv3_arqos [3:0] $end
$var wire      4 i"   slv3_arregion [3:0] $end
$var wire      8 i    slv3_arid [7:0] $end
$var wire      1 e    slv3_aruser [0] $end
$var reg       1 9#   slv3_rvalid  $end
$var wire      1 e    slv3_rready  $end
$var reg       8 :#   slv3_rid [7:0] $end
$var reg       2 ;#   slv3_rresp [1:0] $end
$var reg      40 <#   slv3_rdata [39:0] $end
$var reg       1 =#   slv3_rlast  $end
$var reg       1 >#   slv3_ruser [0:0] $end
$var wire      1 =!   mst0_aclk  $end
$var wire      1 d    mst0_aresetn  $end
$var wire      1 e    mst0_srst  $end
$var reg       1 ?#   mst0_awvalid  $end
$var wire      1 e    mst0_awready  $end
$var reg      16 @#   mst0_awaddr [15:0] $end
$var reg       8 A#   mst0_awlen [7:0] $end
$var reg       3 B#   mst0_awsize [2:0] $end
$var reg       2 C#   mst0_awburst [1:0] $end
$var reg       2 D#   mst0_awlock [1:0] $end
$var reg       4 E#   mst0_awcache [3:0] $end
$var reg       3 F#   mst0_awprot [2:0] $end
$var reg       4 G#   mst0_awqos [3:0] $end
$var reg       4 H#   mst0_awregion [3:0] $end
$var reg       8 I#   mst0_awid [7:0] $end
$var reg       1 J#   mst0_awuser [0:0] $end
$var reg       1 K#   mst0_wvalid  $end
$var wire      1 e    mst0_wready  $end
$var reg       1 L#   mst0_wlast  $end
$var reg      40 M#   mst0_wdata [39:0] $end
$var reg       5 N#   mst0_wstrb [4:0] $end
$var reg       1 O#   mst0_wuser [0:0] $end
$var wire      1 e    mst0_bvalid  $end
$var reg       1 P#   mst0_bready  $end
$var wire      8 i    mst0_bid [7:0] $end
$var wire      2 H!   mst0_bresp [1:0] $end
$var wire      1 e    mst0_buser [0] $end
$var reg       1 Q#   mst0_arvalid  $end
$var wire      1 e    mst0_arready  $end
$var reg      16 R#   mst0_araddr [15:0] $end
$var reg       8 S#   mst0_arlen [7:0] $end
$var reg       3 T#   mst0_arsize [2:0] $end
$var reg       2 U#   mst0_arburst [1:0] $end
$var reg       2 V#   mst0_arlock [1:0] $end
$var reg       4 W#   mst0_arcache [3:0] $end
$var reg       3 X#   mst0_arprot [2:0] $end
$var reg       4 Y#   mst0_arqos [3:0] $end
$var reg       4 Z#   mst0_arregion [3:0] $end
$var reg       8 [#   mst0_arid [7:0] $end
$var reg       1 \#   mst0_aruser [0:0] $end
$var wire      1 e    mst0_rvalid  $end
$var reg       1 ]#   mst0_rready  $end
$var wire      8 i    mst0_rid [7:0] $end
$var wire      2 H!   mst0_rresp [1:0] $end
$var wire     40 k    mst0_rdata [39:0] $end
$var wire      1 d    mst0_rlast  $end
$var wire      1 e    mst0_ruser [0] $end
$var wire      1 =!   mst1_aclk  $end
$var wire      1 d    mst1_aresetn  $end
$var wire      1 e    mst1_srst  $end
$var reg       1 ^#   mst1_awvalid  $end
$var wire      1 e    mst1_awready  $end
$var reg      16 _#   mst1_awaddr [15:0] $end
$var reg       8 `#   mst1_awlen [7:0] $end
$var reg       3 a#   mst1_awsize [2:0] $end
$var reg       2 b#   mst1_awburst [1:0] $end
$var reg       2 c#   mst1_awlock [1:0] $end
$var reg       4 d#   mst1_awcache [3:0] $end
$var reg       3 e#   mst1_awprot [2:0] $end
$var reg       4 f#   mst1_awqos [3:0] $end
$var reg       4 g#   mst1_awregion [3:0] $end
$var reg       8 h#   mst1_awid [7:0] $end
$var reg       1 i#   mst1_awuser [0:0] $end
$var reg       1 j#   mst1_wvalid  $end
$var wire      1 e    mst1_wready  $end
$var reg       1 k#   mst1_wlast  $end
$var reg      40 l#   mst1_wdata [39:0] $end
$var reg       5 m#   mst1_wstrb [4:0] $end
$var reg       1 n#   mst1_wuser [0:0] $end
$var wire      1 e    mst1_bvalid  $end
$var reg       1 o#   mst1_bready  $end
$var wire      8 i    mst1_bid [7:0] $end
$var wire      2 H!   mst1_bresp [1:0] $end
$var wire      1 e    mst1_buser [0] $end
$var reg       1 p#   mst1_arvalid  $end
$var wire      1 e    mst1_arready  $end
$var reg      16 q#   mst1_araddr [15:0] $end
$var reg       8 r#   mst1_arlen [7:0] $end
$var reg       3 s#   mst1_arsize [2:0] $end
$var reg       2 t#   mst1_arburst [1:0] $end
$var reg       2 u#   mst1_arlock [1:0] $end
$var reg       4 v#   mst1_arcache [3:0] $end
$var reg       3 w#   mst1_arprot [2:0] $end
$var reg       4 x#   mst1_arqos [3:0] $end
$var reg       4 y#   mst1_arregion [3:0] $end
$var reg       8 z#   mst1_arid [7:0] $end
$var reg       1 {#   mst1_aruser [0:0] $end
$var wire      1 e    mst1_rvalid  $end
$var reg       1 |#   mst1_rready  $end
$var wire      8 i    mst1_rid [7:0] $end
$var wire      2 H!   mst1_rresp [1:0] $end
$var wire     40 k    mst1_rdata [39:0] $end
$var wire      1 d    mst1_rlast  $end
$var wire      1 e    mst1_ruser [0] $end
$var wire      1 =!   mst2_aclk  $end
$var wire      1 d    mst2_aresetn  $end
$var wire      1 e    mst2_srst  $end
$var reg       1 }#   mst2_awvalid  $end
$var wire      1 e    mst2_awready  $end
$var reg      16 ~#   mst2_awaddr [15:0] $end
$var reg       8 !$   mst2_awlen [7:0] $end
$var reg       3 "$   mst2_awsize [2:0] $end
$var reg       2 #$   mst2_awburst [1:0] $end
$var reg       2 $$   mst2_awlock [1:0] $end
$var reg       4 %$   mst2_awcache [3:0] $end
$var reg       3 &$   mst2_awprot [2:0] $end
$var reg       4 '$   mst2_awqos [3:0] $end
$var reg       4 ($   mst2_awregion [3:0] $end
$var reg       8 )$   mst2_awid [7:0] $end
$var reg       1 *$   mst2_awuser [0:0] $end
$var reg       1 +$   mst2_wvalid  $end
$var wire      1 e    mst2_wready  $end
$var reg       1 ,$   mst2_wlast  $end
$var reg      40 -$   mst2_wdata [39:0] $end
$var reg       5 .$   mst2_wstrb [4:0] $end
$var reg       1 /$   mst2_wuser [0:0] $end
$var wire      1 e    mst2_bvalid  $end
$var reg       1 0$   mst2_bready  $end
$var wire      8 i    mst2_bid [7:0] $end
$var wire      2 H!   mst2_bresp [1:0] $end
$var wire      1 e    mst2_buser [0] $end
$var reg       1 1$   mst2_arvalid  $end
$var wire      1 e    mst2_arready  $end
$var reg      16 2$   mst2_araddr [15:0] $end
$var reg       8 3$   mst2_arlen [7:0] $end
$var reg       3 4$   mst2_arsize [2:0] $end
$var reg       2 5$   mst2_arburst [1:0] $end
$var reg       2 6$   mst2_arlock [1:0] $end
$var reg       4 7$   mst2_arcache [3:0] $end
$var reg       3 8$   mst2_arprot [2:0] $end
$var reg       4 9$   mst2_arqos [3:0] $end
$var reg       4 :$   mst2_arregion [3:0] $end
$var reg       8 ;$   mst2_arid [7:0] $end
$var reg       1 <$   mst2_aruser [0:0] $end
$var wire      1 e    mst2_rvalid  $end
$var reg       1 =$   mst2_rready  $end
$var wire      8 i    mst2_rid [7:0] $end
$var wire      2 H!   mst2_rresp [1:0] $end
$var wire     40 k    mst2_rdata [39:0] $end
$var wire      1 d    mst2_rlast  $end
$var wire      1 e    mst2_ruser [0] $end
$var wire      1 =!   mst3_aclk  $end
$var wire      1 d    mst3_aresetn  $end
$var wire      1 e    mst3_srst  $end
$var reg       1 >$   mst3_awvalid  $end
$var wire      1 e    mst3_awready  $end
$var reg      16 ?$   mst3_awaddr [15:0] $end
$var reg       8 @$   mst3_awlen [7:0] $end
$var reg       3 A$   mst3_awsize [2:0] $end
$var reg       2 B$   mst3_awburst [1:0] $end
$var reg       2 C$   mst3_awlock [1:0] $end
$var reg       4 D$   mst3_awcache [3:0] $end
$var reg       3 E$   mst3_awprot [2:0] $end
$var reg       4 F$   mst3_awqos [3:0] $end
$var reg       4 G$   mst3_awregion [3:0] $end
$var reg       8 H$   mst3_awid [7:0] $end
$var reg       1 I$   mst3_awuser [0:0] $end
$var reg       1 J$   mst3_wvalid  $end
$var wire      1 e    mst3_wready  $end
$var reg       1 K$   mst3_wlast  $end
$var reg      40 L$   mst3_wdata [39:0] $end
$var reg       5 M$   mst3_wstrb [4:0] $end
$var reg       1 N$   mst3_wuser [0:0] $end
$var wire      1 e    mst3_bvalid  $end
$var reg       1 O$   mst3_bready  $end
$var wire      8 i    mst3_bid [7:0] $end
$var wire      2 H!   mst3_bresp [1:0] $end
$var wire      1 e    mst3_buser [0] $end
$var reg       1 P$   mst3_arvalid  $end
$var wire      1 e    mst3_arready  $end
$var reg      16 Q$   mst3_araddr [15:0] $end
$var reg       8 R$   mst3_arlen [7:0] $end
$var reg       3 S$   mst3_arsize [2:0] $end
$var reg       2 T$   mst3_arburst [1:0] $end
$var reg       2 U$   mst3_arlock [1:0] $end
$var reg       4 V$   mst3_arcache [3:0] $end
$var reg       3 W$   mst3_arprot [2:0] $end
$var reg       4 X$   mst3_arqos [3:0] $end
$var reg       4 Y$   mst3_arregion [3:0] $end
$var reg       8 Z$   mst3_arid [7:0] $end
$var reg       1 [$   mst3_aruser [0:0] $end
$var wire      1 e    mst3_rvalid  $end
$var reg       1 \$   mst3_rready  $end
$var wire      8 i    mst3_rid [7:0] $end
$var wire      2 H!   mst3_rresp [1:0] $end
$var wire     40 k    mst3_rdata [39:0] $end
$var wire      1 d    mst3_rlast  $end
$var wire      1 e    mst3_ruser [0] $end
$var parameter 32 ]$   AUSER_W  $end
$var parameter 32 ^$   WUSER_W  $end
$var parameter 32 _$   BUSER_W  $end
$var parameter 32 `$   RUSER_W  $end
$var parameter 32 a$   AWCH_W  $end
$var parameter 32 b$   WCH_W  $end
$var parameter 32 c$   BCH_W  $end
$var parameter 32 d$   ARCH_W  $end
$var parameter 32 e$   RCH_W  $end
$var parameter 16 f$   MST_ROUTES  $end
$var reg       4 g$   i_awvalid [3:0] $end
$var reg       4 h$   i_awready [3:0] $end
$var reg      108 i$   i_awch [107:0] $end
$var reg       4 j$   i_wvalid [3:0] $end
$var reg       4 k$   i_wready [3:0] $end
$var reg       4 l$   i_wlast [3:0] $end
$var reg      180 m$   i_wch [179:0] $end
$var reg       4 n$   i_bvalid [3:0] $end
$var reg       4 o$   i_bready [3:0] $end
$var reg      40 p$   i_bch [39:0] $end
$var reg       4 q$   i_arvalid [3:0] $end
$var reg       4 r$   i_arready [3:0] $end
$var reg      108 s$   i_arch [107:0] $end
$var reg       4 t$   i_rvalid [3:0] $end
$var reg       4 u$   i_rready [3:0] $end
$var reg       4 v$   i_rlast [3:0] $end
$var reg      200 w$   i_rch [199:0] $end
$var reg       4 x$   o_awvalid [3:0] $end
$var reg       4 y$   o_awready [3:0] $end
$var reg      108 z$   o_awch [107:0] $end
$var reg       4 {$   o_wvalid [3:0] $end
$var reg       4 |$   o_wready [3:0] $end
$var reg       4 }$   o_wlast [3:0] $end
$var reg      180 ~$   o_wch [179:0] $end
$var reg       4 !%   o_bvalid [3:0] $end
$var reg       4 "%   o_bready [3:0] $end
$var reg      40 #%   o_bch [39:0] $end
$var reg       4 $%   o_arvalid [3:0] $end
$var reg       4 %%   o_arready [3:0] $end
$var reg      108 &%   o_arch [107:0] $end
$var reg       4 '%   o_rvalid [3:0] $end
$var reg       4 (%   o_rready [3:0] $end
$var reg       4 )%   o_rlast [3:0] $end
$var reg      200 *%   o_rch [199:0] $end

$scope module slv0_if $end
$var parameter 32 +%   AXI_ADDR_W  $end
$var parameter 32 ,%   AXI_ID_W  $end
$var parameter 32 -%   AXI_DATA_W  $end
$var parameter 32 .%   SLV_NB  $end
$var parameter 32 /%   STRB_MODE  $end
$var parameter 32 0%   AXI_SIGNALING  $end
$var parameter 32 1%   MST_CDC  $end
$var parameter 32 2%   MST_OSTDREQ_NUM  $end
$var parameter 32 3%   MST_OSTDREQ_SIZE  $end
$var parameter 32 4%   USER_SUPPORT  $end
$var parameter 32 5%   AXI_AUSER_W  $end
$var parameter 32 6%   AXI_WUSER_W  $end
$var parameter 32 7%   AXI_BUSER_W  $end
$var parameter 32 8%   AXI_RUSER_W  $end
$var parameter 32 9%   AWCH_W  $end
$var parameter 32 :%   WCH_W  $end
$var parameter 32 ;%   BCH_W  $end
$var parameter 32 <%   ARCH_W  $end
$var parameter 32 =%   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 >%   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 ?%   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 @%   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 A%   i_bid [7:0] $end
$var reg       2 B%   i_bresp [1:0] $end
$var reg       1 C%   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 D%   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 E%   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 F%   i_rid [7:0] $end
$var reg       2 G%   i_rresp [1:0] $end
$var reg      40 H%   i_rdata [39:0] $end
$var reg       1 I%   i_rlast  $end
$var reg       1 J%   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 K%   o_awvalid  $end
$var wire      1 L%   o_awready  $end
$var reg      27 M%   o_awch [26:0] $end
$var reg       1 N%   o_wvalid  $end
$var wire      1 O%   o_wready  $end
$var reg       1 P%   o_wlast  $end
$var reg      45 Q%   o_wch [44:0] $end
$var wire      1 R%   o_bvalid  $end
$var reg       1 S%   o_bready  $end
$var wire     10 T%   o_bch [9:0] $end
$var reg       1 U%   o_arvalid  $end
$var wire      1 V%   o_arready  $end
$var reg      27 W%   o_arch [26:0] $end
$var wire      1 X%   o_rvalid  $end
$var reg       1 Y%   o_rready  $end
$var wire      1 Z%   o_rlast  $end
$var wire     50 [%   o_rch [49:0] $end
$var reg      27 \%   awch [26:0] $end
$var reg      45 ]%   wch [44:0] $end
$var reg      10 ^%   bch [9:0] $end
$var reg      27 _%   arch [26:0] $end
$var reg      50 `%   rch [49:0] $end
$var reg       1 a%   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 b%   PASS_THRU  $end
$var parameter 32 c%   AW_ASIZE  $end
$var parameter 32 d%   W_ASIZE  $end
$var parameter 32 e%   B_ASIZE  $end
$var parameter 32 f%   AR_ASIZE  $end
$var parameter 32 g%   R_ASIZE  $end
$var reg       1 h%   aw_full  $end
$var reg       1 i%   aw_empty  $end
$var reg       1 j%   w_full  $end
$var reg       1 k%   w_empty  $end
$var reg       1 l%   ar_full  $end
$var reg       1 m%   ar_empty  $end
$var reg       1 n%   r_full  $end
$var reg       1 o%   r_empty  $end
$var reg       1 p%   b_full  $end
$var reg       1 q%   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 r%   PASS_THRU  $end
$var parameter 32 s%   ADDR_WIDTH  $end
$var parameter 32 t%   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 v%   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 w%   full  $end
$var reg      27 x%   data_out [26:0] $end
$var wire      1 L%   pull  $end
$var reg       1 y%   empty  $end
$var reg       1 z%   wr_en  $end
$var reg       3 {%   wrptr [2:0] $end
$var reg       3 |%   rdptr [2:0] $end
$var reg       1 }%   empty_flag  $end
$var reg       1 ~%   full_flag  $end
$var reg       1 !&   pass_thru  $end
$var reg      27 "&   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 #&   ADDR_WIDTH  $end
$var parameter 32 $&   DATA_WIDTH  $end
$var parameter 32 %&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 &&   wr_en  $end
$var wire      2 '&   addr_in [1:0] $end
$var wire     27 v%   data_in [26:0] $end
$var wire      2 (&   addr_out [1:0] $end
$var reg      27 )&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 *&   PASS_THRU  $end
$var parameter 32 +&   ADDR_WIDTH  $end
$var parameter 32 ,&   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 -&   data_in [45:0] $end
$var wire      1 e    push  $end
$var reg       1 .&   full  $end
$var reg      46 /&   data_out [45:0] $end
$var wire      1 O%   pull  $end
$var reg       1 0&   empty  $end
$var reg       1 1&   wr_en  $end
$var reg       3 2&   wrptr [2:0] $end
$var reg       3 3&   rdptr [2:0] $end
$var reg       1 4&   empty_flag  $end
$var reg       1 5&   full_flag  $end
$var reg       1 6&   pass_thru  $end
$var reg      46 7&   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 8&   ADDR_WIDTH  $end
$var parameter 32 9&   DATA_WIDTH  $end
$var parameter 32 :&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ;&   wr_en  $end
$var wire      2 <&   addr_in [1:0] $end
$var wire     46 -&   data_in [45:0] $end
$var wire      2 =&   addr_out [1:0] $end
$var reg      46 >&   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 ?&   PASS_THRU  $end
$var parameter 32 @&   ADDR_WIDTH  $end
$var parameter 32 A&   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 T%   data_in [9:0] $end
$var wire      1 R%   push  $end
$var reg       1 B&   full  $end
$var reg      10 C&   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 D&   empty  $end
$var reg       1 E&   wr_en  $end
$var reg       3 F&   wrptr [2:0] $end
$var reg       3 G&   rdptr [2:0] $end
$var reg       1 H&   empty_flag  $end
$var reg       1 I&   full_flag  $end
$var reg       1 J&   pass_thru  $end
$var reg      10 K&   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 L&   ADDR_WIDTH  $end
$var parameter 32 M&   DATA_WIDTH  $end
$var parameter 32 N&   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 O&   wr_en  $end
$var wire      2 P&   addr_in [1:0] $end
$var wire     10 T%   data_in [9:0] $end
$var wire      2 Q&   addr_out [1:0] $end
$var reg      10 R&   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 S&   PASS_THRU  $end
$var parameter 32 T&   ADDR_WIDTH  $end
$var parameter 32 U&   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 V&   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 W&   full  $end
$var reg      27 X&   data_out [26:0] $end
$var wire      1 V%   pull  $end
$var reg       1 Y&   empty  $end
$var reg       1 Z&   wr_en  $end
$var reg       3 [&   wrptr [2:0] $end
$var reg       3 \&   rdptr [2:0] $end
$var reg       1 ]&   empty_flag  $end
$var reg       1 ^&   full_flag  $end
$var reg       1 _&   pass_thru  $end
$var reg      27 `&   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 a&   ADDR_WIDTH  $end
$var parameter 32 b&   DATA_WIDTH  $end
$var parameter 32 c&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 d&   wr_en  $end
$var wire      2 e&   addr_in [1:0] $end
$var wire     27 V&   data_in [26:0] $end
$var wire      2 f&   addr_out [1:0] $end
$var reg      27 g&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 h&   PASS_THRU  $end
$var parameter 32 i&   ADDR_WIDTH  $end
$var parameter 32 j&   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 k&   data_in [50:0] $end
$var wire      1 X%   push  $end
$var reg       1 l&   full  $end
$var reg      51 m&   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 n&   empty  $end
$var reg       1 o&   wr_en  $end
$var reg       3 p&   wrptr [2:0] $end
$var reg       3 q&   rdptr [2:0] $end
$var reg       1 r&   empty_flag  $end
$var reg       1 s&   full_flag  $end
$var reg       1 t&   pass_thru  $end
$var reg      51 u&   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 v&   ADDR_WIDTH  $end
$var parameter 32 w&   DATA_WIDTH  $end
$var parameter 32 x&   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 y&   wr_en  $end
$var wire      2 z&   addr_in [1:0] $end
$var wire     51 k&   data_in [50:0] $end
$var wire      2 {&   addr_out [1:0] $end
$var reg      51 |&   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv1_if $end
$var parameter 32 }&   AXI_ADDR_W  $end
$var parameter 32 ~&   AXI_ID_W  $end
$var parameter 32 !'   AXI_DATA_W  $end
$var parameter 32 "'   SLV_NB  $end
$var parameter 32 #'   STRB_MODE  $end
$var parameter 32 $'   AXI_SIGNALING  $end
$var parameter 32 %'   MST_CDC  $end
$var parameter 32 &'   MST_OSTDREQ_NUM  $end
$var parameter 32 ''   MST_OSTDREQ_SIZE  $end
$var parameter 32 ('   USER_SUPPORT  $end
$var parameter 32 )'   AXI_AUSER_W  $end
$var parameter 32 *'   AXI_WUSER_W  $end
$var parameter 32 +'   AXI_BUSER_W  $end
$var parameter 32 ,'   AXI_RUSER_W  $end
$var parameter 32 -'   AWCH_W  $end
$var parameter 32 .'   WCH_W  $end
$var parameter 32 /'   BCH_W  $end
$var parameter 32 0'   ARCH_W  $end
$var parameter 32 1'   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 2'   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 3'   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 4'   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 5'   i_bid [7:0] $end
$var reg       2 6'   i_bresp [1:0] $end
$var reg       1 7'   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 8'   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 9'   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 :'   i_rid [7:0] $end
$var reg       2 ;'   i_rresp [1:0] $end
$var reg      40 <'   i_rdata [39:0] $end
$var reg       1 ='   i_rlast  $end
$var reg       1 >'   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 ?'   o_awvalid  $end
$var wire      1 @'   o_awready  $end
$var reg      27 A'   o_awch [26:0] $end
$var reg       1 B'   o_wvalid  $end
$var wire      1 C'   o_wready  $end
$var reg       1 D'   o_wlast  $end
$var reg      45 E'   o_wch [44:0] $end
$var wire      1 F'   o_bvalid  $end
$var reg       1 G'   o_bready  $end
$var wire     10 H'   o_bch [9:0] $end
$var reg       1 I'   o_arvalid  $end
$var wire      1 J'   o_arready  $end
$var reg      27 K'   o_arch [26:0] $end
$var wire      1 L'   o_rvalid  $end
$var reg       1 M'   o_rready  $end
$var wire      1 N'   o_rlast  $end
$var wire     50 O'   o_rch [49:0] $end
$var reg      27 P'   awch [26:0] $end
$var reg      45 Q'   wch [44:0] $end
$var reg      10 R'   bch [9:0] $end
$var reg      27 S'   arch [26:0] $end
$var reg      50 T'   rch [49:0] $end
$var reg       1 U'   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 V'   PASS_THRU  $end
$var parameter 32 W'   AW_ASIZE  $end
$var parameter 32 X'   W_ASIZE  $end
$var parameter 32 Y'   B_ASIZE  $end
$var parameter 32 Z'   AR_ASIZE  $end
$var parameter 32 ['   R_ASIZE  $end
$var reg       1 \'   aw_full  $end
$var reg       1 ]'   aw_empty  $end
$var reg       1 ^'   w_full  $end
$var reg       1 _'   w_empty  $end
$var reg       1 `'   ar_full  $end
$var reg       1 a'   ar_empty  $end
$var reg       1 b'   r_full  $end
$var reg       1 c'   r_empty  $end
$var reg       1 d'   b_full  $end
$var reg       1 e'   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 f'   PASS_THRU  $end
$var parameter 32 g'   ADDR_WIDTH  $end
$var parameter 32 h'   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 i'   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 j'   full  $end
$var reg      27 k'   data_out [26:0] $end
$var wire      1 @'   pull  $end
$var reg       1 l'   empty  $end
$var reg       1 m'   wr_en  $end
$var reg       3 n'   wrptr [2:0] $end
$var reg       3 o'   rdptr [2:0] $end
$var reg       1 p'   empty_flag  $end
$var reg       1 q'   full_flag  $end
$var reg       1 r'   pass_thru  $end
$var reg      27 s'   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 t'   ADDR_WIDTH  $end
$var parameter 32 u'   DATA_WIDTH  $end
$var parameter 32 v'   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 w'   wr_en  $end
$var wire      2 x'   addr_in [1:0] $end
$var wire     27 i'   data_in [26:0] $end
$var wire      2 y'   addr_out [1:0] $end
$var reg      27 z'   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 {'   PASS_THRU  $end
$var parameter 32 |'   ADDR_WIDTH  $end
$var parameter 32 }'   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 ~'   data_in [45:0] $end
$var wire      1 e    push  $end
$var reg       1 !(   full  $end
$var reg      46 "(   data_out [45:0] $end
$var wire      1 C'   pull  $end
$var reg       1 #(   empty  $end
$var reg       1 $(   wr_en  $end
$var reg       3 %(   wrptr [2:0] $end
$var reg       3 &(   rdptr [2:0] $end
$var reg       1 '(   empty_flag  $end
$var reg       1 ((   full_flag  $end
$var reg       1 )(   pass_thru  $end
$var reg      46 *(   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 +(   ADDR_WIDTH  $end
$var parameter 32 ,(   DATA_WIDTH  $end
$var parameter 32 -(   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 .(   wr_en  $end
$var wire      2 /(   addr_in [1:0] $end
$var wire     46 ~'   data_in [45:0] $end
$var wire      2 0(   addr_out [1:0] $end
$var reg      46 1(   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 2(   PASS_THRU  $end
$var parameter 32 3(   ADDR_WIDTH  $end
$var parameter 32 4(   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 H'   data_in [9:0] $end
$var wire      1 F'   push  $end
$var reg       1 5(   full  $end
$var reg      10 6(   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 7(   empty  $end
$var reg       1 8(   wr_en  $end
$var reg       3 9(   wrptr [2:0] $end
$var reg       3 :(   rdptr [2:0] $end
$var reg       1 ;(   empty_flag  $end
$var reg       1 <(   full_flag  $end
$var reg       1 =(   pass_thru  $end
$var reg      10 >(   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 ?(   ADDR_WIDTH  $end
$var parameter 32 @(   DATA_WIDTH  $end
$var parameter 32 A(   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 B(   wr_en  $end
$var wire      2 C(   addr_in [1:0] $end
$var wire     10 H'   data_in [9:0] $end
$var wire      2 D(   addr_out [1:0] $end
$var reg      10 E(   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 F(   PASS_THRU  $end
$var parameter 32 G(   ADDR_WIDTH  $end
$var parameter 32 H(   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 I(   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 J(   full  $end
$var reg      27 K(   data_out [26:0] $end
$var wire      1 J'   pull  $end
$var reg       1 L(   empty  $end
$var reg       1 M(   wr_en  $end
$var reg       3 N(   wrptr [2:0] $end
$var reg       3 O(   rdptr [2:0] $end
$var reg       1 P(   empty_flag  $end
$var reg       1 Q(   full_flag  $end
$var reg       1 R(   pass_thru  $end
$var reg      27 S(   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 T(   ADDR_WIDTH  $end
$var parameter 32 U(   DATA_WIDTH  $end
$var parameter 32 V(   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 W(   wr_en  $end
$var wire      2 X(   addr_in [1:0] $end
$var wire     27 I(   data_in [26:0] $end
$var wire      2 Y(   addr_out [1:0] $end
$var reg      27 Z(   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 [(   PASS_THRU  $end
$var parameter 32 \(   ADDR_WIDTH  $end
$var parameter 32 ](   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 ^(   data_in [50:0] $end
$var wire      1 L'   push  $end
$var reg       1 _(   full  $end
$var reg      51 `(   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 a(   empty  $end
$var reg       1 b(   wr_en  $end
$var reg       3 c(   wrptr [2:0] $end
$var reg       3 d(   rdptr [2:0] $end
$var reg       1 e(   empty_flag  $end
$var reg       1 f(   full_flag  $end
$var reg       1 g(   pass_thru  $end
$var reg      51 h(   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 i(   ADDR_WIDTH  $end
$var parameter 32 j(   DATA_WIDTH  $end
$var parameter 32 k(   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 l(   wr_en  $end
$var wire      2 m(   addr_in [1:0] $end
$var wire     51 ^(   data_in [50:0] $end
$var wire      2 n(   addr_out [1:0] $end
$var reg      51 o(   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv2_if $end
$var parameter 32 p(   AXI_ADDR_W  $end
$var parameter 32 q(   AXI_ID_W  $end
$var parameter 32 r(   AXI_DATA_W  $end
$var parameter 32 s(   SLV_NB  $end
$var parameter 32 t(   STRB_MODE  $end
$var parameter 32 u(   AXI_SIGNALING  $end
$var parameter 32 v(   MST_CDC  $end
$var parameter 32 w(   MST_OSTDREQ_NUM  $end
$var parameter 32 x(   MST_OSTDREQ_SIZE  $end
$var parameter 32 y(   USER_SUPPORT  $end
$var parameter 32 z(   AXI_AUSER_W  $end
$var parameter 32 {(   AXI_WUSER_W  $end
$var parameter 32 |(   AXI_BUSER_W  $end
$var parameter 32 }(   AXI_RUSER_W  $end
$var parameter 32 ~(   AWCH_W  $end
$var parameter 32 !)   WCH_W  $end
$var parameter 32 ")   BCH_W  $end
$var parameter 32 #)   ARCH_W  $end
$var parameter 32 $)   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 %)   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 &)   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 ')   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 ()   i_bid [7:0] $end
$var reg       2 ))   i_bresp [1:0] $end
$var reg       1 *)   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 +)   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 ,)   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 -)   i_rid [7:0] $end
$var reg       2 .)   i_rresp [1:0] $end
$var reg      40 /)   i_rdata [39:0] $end
$var reg       1 0)   i_rlast  $end
$var reg       1 1)   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 2)   o_awvalid  $end
$var wire      1 3)   o_awready  $end
$var reg      27 4)   o_awch [26:0] $end
$var reg       1 5)   o_wvalid  $end
$var wire      1 6)   o_wready  $end
$var reg       1 7)   o_wlast  $end
$var reg      45 8)   o_wch [44:0] $end
$var wire      1 9)   o_bvalid  $end
$var reg       1 :)   o_bready  $end
$var wire     10 ;)   o_bch [9:0] $end
$var reg       1 <)   o_arvalid  $end
$var wire      1 =)   o_arready  $end
$var reg      27 >)   o_arch [26:0] $end
$var wire      1 ?)   o_rvalid  $end
$var reg       1 @)   o_rready  $end
$var wire      1 A)   o_rlast  $end
$var wire     50 B)   o_rch [49:0] $end
$var reg      27 C)   awch [26:0] $end
$var reg      45 D)   wch [44:0] $end
$var reg      10 E)   bch [9:0] $end
$var reg      27 F)   arch [26:0] $end
$var reg      50 G)   rch [49:0] $end
$var reg       1 H)   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 I)   PASS_THRU  $end
$var parameter 32 J)   AW_ASIZE  $end
$var parameter 32 K)   W_ASIZE  $end
$var parameter 32 L)   B_ASIZE  $end
$var parameter 32 M)   AR_ASIZE  $end
$var parameter 32 N)   R_ASIZE  $end
$var reg       1 O)   aw_full  $end
$var reg       1 P)   aw_empty  $end
$var reg       1 Q)   w_full  $end
$var reg       1 R)   w_empty  $end
$var reg       1 S)   ar_full  $end
$var reg       1 T)   ar_empty  $end
$var reg       1 U)   r_full  $end
$var reg       1 V)   r_empty  $end
$var reg       1 W)   b_full  $end
$var reg       1 X)   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 Y)   PASS_THRU  $end
$var parameter 32 Z)   ADDR_WIDTH  $end
$var parameter 32 [)   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 \)   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 ])   full  $end
$var reg      27 ^)   data_out [26:0] $end
$var wire      1 3)   pull  $end
$var reg       1 _)   empty  $end
$var reg       1 `)   wr_en  $end
$var reg       3 a)   wrptr [2:0] $end
$var reg       3 b)   rdptr [2:0] $end
$var reg       1 c)   empty_flag  $end
$var reg       1 d)   full_flag  $end
$var reg       1 e)   pass_thru  $end
$var reg      27 f)   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 g)   ADDR_WIDTH  $end
$var parameter 32 h)   DATA_WIDTH  $end
$var parameter 32 i)   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 j)   wr_en  $end
$var wire      2 k)   addr_in [1:0] $end
$var wire     27 \)   data_in [26:0] $end
$var wire      2 l)   addr_out [1:0] $end
$var reg      27 m)   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 n)   PASS_THRU  $end
$var parameter 32 o)   ADDR_WIDTH  $end
$var parameter 32 p)   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 q)   data_in [45:0] $end
$var wire      1 e    push  $end
$var reg       1 r)   full  $end
$var reg      46 s)   data_out [45:0] $end
$var wire      1 6)   pull  $end
$var reg       1 t)   empty  $end
$var reg       1 u)   wr_en  $end
$var reg       3 v)   wrptr [2:0] $end
$var reg       3 w)   rdptr [2:0] $end
$var reg       1 x)   empty_flag  $end
$var reg       1 y)   full_flag  $end
$var reg       1 z)   pass_thru  $end
$var reg      46 {)   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 |)   ADDR_WIDTH  $end
$var parameter 32 })   DATA_WIDTH  $end
$var parameter 32 ~)   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 !*   wr_en  $end
$var wire      2 "*   addr_in [1:0] $end
$var wire     46 q)   data_in [45:0] $end
$var wire      2 #*   addr_out [1:0] $end
$var reg      46 $*   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 %*   PASS_THRU  $end
$var parameter 32 &*   ADDR_WIDTH  $end
$var parameter 32 '*   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 ;)   data_in [9:0] $end
$var wire      1 9)   push  $end
$var reg       1 (*   full  $end
$var reg      10 )*   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 **   empty  $end
$var reg       1 +*   wr_en  $end
$var reg       3 ,*   wrptr [2:0] $end
$var reg       3 -*   rdptr [2:0] $end
$var reg       1 .*   empty_flag  $end
$var reg       1 /*   full_flag  $end
$var reg       1 0*   pass_thru  $end
$var reg      10 1*   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 2*   ADDR_WIDTH  $end
$var parameter 32 3*   DATA_WIDTH  $end
$var parameter 32 4*   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 5*   wr_en  $end
$var wire      2 6*   addr_in [1:0] $end
$var wire     10 ;)   data_in [9:0] $end
$var wire      2 7*   addr_out [1:0] $end
$var reg      10 8*   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 9*   PASS_THRU  $end
$var parameter 32 :*   ADDR_WIDTH  $end
$var parameter 32 ;*   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 <*   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 =*   full  $end
$var reg      27 >*   data_out [26:0] $end
$var wire      1 =)   pull  $end
$var reg       1 ?*   empty  $end
$var reg       1 @*   wr_en  $end
$var reg       3 A*   wrptr [2:0] $end
$var reg       3 B*   rdptr [2:0] $end
$var reg       1 C*   empty_flag  $end
$var reg       1 D*   full_flag  $end
$var reg       1 E*   pass_thru  $end
$var reg      27 F*   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 G*   ADDR_WIDTH  $end
$var parameter 32 H*   DATA_WIDTH  $end
$var parameter 32 I*   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 J*   wr_en  $end
$var wire      2 K*   addr_in [1:0] $end
$var wire     27 <*   data_in [26:0] $end
$var wire      2 L*   addr_out [1:0] $end
$var reg      27 M*   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 N*   PASS_THRU  $end
$var parameter 32 O*   ADDR_WIDTH  $end
$var parameter 32 P*   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 Q*   data_in [50:0] $end
$var wire      1 ?)   push  $end
$var reg       1 R*   full  $end
$var reg      51 S*   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 T*   empty  $end
$var reg       1 U*   wr_en  $end
$var reg       3 V*   wrptr [2:0] $end
$var reg       3 W*   rdptr [2:0] $end
$var reg       1 X*   empty_flag  $end
$var reg       1 Y*   full_flag  $end
$var reg       1 Z*   pass_thru  $end
$var reg      51 [*   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 \*   ADDR_WIDTH  $end
$var parameter 32 ]*   DATA_WIDTH  $end
$var parameter 32 ^*   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 _*   wr_en  $end
$var wire      2 `*   addr_in [1:0] $end
$var wire     51 Q*   data_in [50:0] $end
$var wire      2 a*   addr_out [1:0] $end
$var reg      51 b*   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv3_if $end
$var parameter 32 c*   AXI_ADDR_W  $end
$var parameter 32 d*   AXI_ID_W  $end
$var parameter 32 e*   AXI_DATA_W  $end
$var parameter 32 f*   SLV_NB  $end
$var parameter 32 g*   STRB_MODE  $end
$var parameter 32 h*   AXI_SIGNALING  $end
$var parameter 32 i*   MST_CDC  $end
$var parameter 32 j*   MST_OSTDREQ_NUM  $end
$var parameter 32 k*   MST_OSTDREQ_SIZE  $end
$var parameter 32 l*   USER_SUPPORT  $end
$var parameter 32 m*   AXI_AUSER_W  $end
$var parameter 32 n*   AXI_WUSER_W  $end
$var parameter 32 o*   AXI_BUSER_W  $end
$var parameter 32 p*   AXI_RUSER_W  $end
$var parameter 32 q*   AWCH_W  $end
$var parameter 32 r*   WCH_W  $end
$var parameter 32 s*   BCH_W  $end
$var parameter 32 t*   ARCH_W  $end
$var parameter 32 u*   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 v*   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 w*   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 x*   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 y*   i_bid [7:0] $end
$var reg       2 z*   i_bresp [1:0] $end
$var reg       1 {*   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 |*   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 }*   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 ~*   i_rid [7:0] $end
$var reg       2 !+   i_rresp [1:0] $end
$var reg      40 "+   i_rdata [39:0] $end
$var reg       1 #+   i_rlast  $end
$var reg       1 $+   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 %+   o_awvalid  $end
$var wire      1 &+   o_awready  $end
$var reg      27 '+   o_awch [26:0] $end
$var reg       1 (+   o_wvalid  $end
$var wire      1 )+   o_wready  $end
$var reg       1 *+   o_wlast  $end
$var reg      45 ++   o_wch [44:0] $end
$var wire      1 ,+   o_bvalid  $end
$var reg       1 -+   o_bready  $end
$var wire     10 .+   o_bch [9:0] $end
$var reg       1 /+   o_arvalid  $end
$var wire      1 0+   o_arready  $end
$var reg      27 1+   o_arch [26:0] $end
$var wire      1 2+   o_rvalid  $end
$var reg       1 3+   o_rready  $end
$var wire      1 4+   o_rlast  $end
$var wire     50 5+   o_rch [49:0] $end
$var reg      27 6+   awch [26:0] $end
$var reg      45 7+   wch [44:0] $end
$var reg      10 8+   bch [9:0] $end
$var reg      27 9+   arch [26:0] $end
$var reg      50 :+   rch [49:0] $end
$var reg       1 ;+   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 <+   PASS_THRU  $end
$var parameter 32 =+   AW_ASIZE  $end
$var parameter 32 >+   W_ASIZE  $end
$var parameter 32 ?+   B_ASIZE  $end
$var parameter 32 @+   AR_ASIZE  $end
$var parameter 32 A+   R_ASIZE  $end
$var reg       1 B+   aw_full  $end
$var reg       1 C+   aw_empty  $end
$var reg       1 D+   w_full  $end
$var reg       1 E+   w_empty  $end
$var reg       1 F+   ar_full  $end
$var reg       1 G+   ar_empty  $end
$var reg       1 H+   r_full  $end
$var reg       1 I+   r_empty  $end
$var reg       1 J+   b_full  $end
$var reg       1 K+   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 L+   PASS_THRU  $end
$var parameter 32 M+   ADDR_WIDTH  $end
$var parameter 32 N+   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 O+   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 P+   full  $end
$var reg      27 Q+   data_out [26:0] $end
$var wire      1 &+   pull  $end
$var reg       1 R+   empty  $end
$var reg       1 S+   wr_en  $end
$var reg       3 T+   wrptr [2:0] $end
$var reg       3 U+   rdptr [2:0] $end
$var reg       1 V+   empty_flag  $end
$var reg       1 W+   full_flag  $end
$var reg       1 X+   pass_thru  $end
$var reg      27 Y+   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 Z+   ADDR_WIDTH  $end
$var parameter 32 [+   DATA_WIDTH  $end
$var parameter 32 \+   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ]+   wr_en  $end
$var wire      2 ^+   addr_in [1:0] $end
$var wire     27 O+   data_in [26:0] $end
$var wire      2 _+   addr_out [1:0] $end
$var reg      27 `+   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 a+   PASS_THRU  $end
$var parameter 32 b+   ADDR_WIDTH  $end
$var parameter 32 c+   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 d+   data_in [45:0] $end
$var wire      1 e    push  $end
$var reg       1 e+   full  $end
$var reg      46 f+   data_out [45:0] $end
$var wire      1 )+   pull  $end
$var reg       1 g+   empty  $end
$var reg       1 h+   wr_en  $end
$var reg       3 i+   wrptr [2:0] $end
$var reg       3 j+   rdptr [2:0] $end
$var reg       1 k+   empty_flag  $end
$var reg       1 l+   full_flag  $end
$var reg       1 m+   pass_thru  $end
$var reg      46 n+   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 o+   ADDR_WIDTH  $end
$var parameter 32 p+   DATA_WIDTH  $end
$var parameter 32 q+   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 r+   wr_en  $end
$var wire      2 s+   addr_in [1:0] $end
$var wire     46 d+   data_in [45:0] $end
$var wire      2 t+   addr_out [1:0] $end
$var reg      46 u+   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 v+   PASS_THRU  $end
$var parameter 32 w+   ADDR_WIDTH  $end
$var parameter 32 x+   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 .+   data_in [9:0] $end
$var wire      1 ,+   push  $end
$var reg       1 y+   full  $end
$var reg      10 z+   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 {+   empty  $end
$var reg       1 |+   wr_en  $end
$var reg       3 }+   wrptr [2:0] $end
$var reg       3 ~+   rdptr [2:0] $end
$var reg       1 !,   empty_flag  $end
$var reg       1 ",   full_flag  $end
$var reg       1 #,   pass_thru  $end
$var reg      10 $,   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 %,   ADDR_WIDTH  $end
$var parameter 32 &,   DATA_WIDTH  $end
$var parameter 32 ',   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 (,   wr_en  $end
$var wire      2 ),   addr_in [1:0] $end
$var wire     10 .+   data_in [9:0] $end
$var wire      2 *,   addr_out [1:0] $end
$var reg      10 +,   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 ,,   PASS_THRU  $end
$var parameter 32 -,   ADDR_WIDTH  $end
$var parameter 32 .,   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 /,   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 0,   full  $end
$var reg      27 1,   data_out [26:0] $end
$var wire      1 0+   pull  $end
$var reg       1 2,   empty  $end
$var reg       1 3,   wr_en  $end
$var reg       3 4,   wrptr [2:0] $end
$var reg       3 5,   rdptr [2:0] $end
$var reg       1 6,   empty_flag  $end
$var reg       1 7,   full_flag  $end
$var reg       1 8,   pass_thru  $end
$var reg      27 9,   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 :,   ADDR_WIDTH  $end
$var parameter 32 ;,   DATA_WIDTH  $end
$var parameter 32 <,   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 =,   wr_en  $end
$var wire      2 >,   addr_in [1:0] $end
$var wire     27 /,   data_in [26:0] $end
$var wire      2 ?,   addr_out [1:0] $end
$var reg      27 @,   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 A,   PASS_THRU  $end
$var parameter 32 B,   ADDR_WIDTH  $end
$var parameter 32 C,   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 D,   data_in [50:0] $end
$var wire      1 2+   push  $end
$var reg       1 E,   full  $end
$var reg      51 F,   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 G,   empty  $end
$var reg       1 H,   wr_en  $end
$var reg       3 I,   wrptr [2:0] $end
$var reg       3 J,   rdptr [2:0] $end
$var reg       1 K,   empty_flag  $end
$var reg       1 L,   full_flag  $end
$var reg       1 M,   pass_thru  $end
$var reg      51 N,   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 O,   ADDR_WIDTH  $end
$var parameter 32 P,   DATA_WIDTH  $end
$var parameter 32 Q,   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 R,   wr_en  $end
$var wire      2 S,   addr_in [1:0] $end
$var wire     51 D,   data_in [50:0] $end
$var wire      2 T,   addr_out [1:0] $end
$var reg      51 U,   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module switchs $end
$var parameter 32 V,   AXI_ADDR_W  $end
$var parameter 32 W,   AXI_ID_W  $end
$var parameter 32 X,   AXI_DATA_W  $end
$var parameter 32 Y,   AXI_SIGNALING  $end
$var parameter 32 Z,   MST_NB  $end
$var parameter 32 [,   SLV_NB  $end
$var parameter 32 \,   MST_PIPELINE  $end
$var parameter 32 ],   SLV_PIPELINE  $end
$var parameter 32 ^,   TIMEOUT_ENABLE  $end
$var parameter 16 _,   MST_ROUTES [15:0] $end
$var parameter  8 `,   MST0_ID_MASK [7:0] $end
$var parameter  8 a,   MST1_ID_MASK [7:0] $end
$var parameter  8 b,   MST2_ID_MASK [7:0] $end
$var parameter  8 c,   MST3_ID_MASK [7:0] $end
$var parameter 32 d,   MST0_PRIORITY  $end
$var parameter 32 e,   MST1_PRIORITY  $end
$var parameter 32 f,   MST2_PRIORITY  $end
$var parameter 32 g,   MST3_PRIORITY  $end
$var parameter 32 h,   SLV0_START_ADDR  $end
$var parameter 32 i,   SLV0_END_ADDR  $end
$var parameter 32 j,   SLV1_START_ADDR  $end
$var parameter 32 k,   SLV1_END_ADDR  $end
$var parameter 32 l,   SLV2_START_ADDR  $end
$var parameter 32 m,   SLV2_END_ADDR  $end
$var parameter 32 n,   SLV3_START_ADDR  $end
$var parameter 32 o,   SLV3_END_ADDR  $end
$var parameter 32 p,   AWCH_W  $end
$var parameter 32 q,   WCH_W  $end
$var parameter 32 r,   BCH_W  $end
$var parameter 32 s,   ARCH_W  $end
$var parameter 32 t,   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u,   i_awvalid [3] $end
$var wire      1 v,   i_awvalid [2] $end
$var wire      1 w,   i_awvalid [1] $end
$var wire      1 x,   i_awvalid [0] $end
$var reg       4 y,   i_awready [3:0] $end
$var wire     108 z,   i_awch [107:0] $end
$var wire      1 {,   i_wvalid [3] $end
$var wire      1 |,   i_wvalid [2] $end
$var wire      1 },   i_wvalid [1] $end
$var wire      1 ~,   i_wvalid [0] $end
$var reg       4 !-   i_wready [3:0] $end
$var wire      4 "-   i_wlast [3:0] $end
$var wire     180 #-   i_wch [179:0] $end
$var reg       4 $-   i_bvalid [3:0] $end
$var wire      1 %-   i_bready [3] $end
$var wire      1 &-   i_bready [2] $end
$var wire      1 '-   i_bready [1] $end
$var wire      1 (-   i_bready [0] $end
$var reg      40 )-   i_bch [39:0] $end
$var wire      1 *-   i_arvalid [3] $end
$var wire      1 +-   i_arvalid [2] $end
$var wire      1 ,-   i_arvalid [1] $end
$var wire      1 --   i_arvalid [0] $end
$var reg       4 .-   i_arready [3:0] $end
$var wire     108 /-   i_arch [107:0] $end
$var reg       4 0-   i_rvalid [3:0] $end
$var wire      1 1-   i_rready [3] $end
$var wire      1 2-   i_rready [2] $end
$var wire      1 3-   i_rready [1] $end
$var wire      1 4-   i_rready [0] $end
$var reg       4 5-   i_rlast [3:0] $end
$var reg      200 6-   i_rch [199:0] $end
$var reg       4 7-   o_awvalid [3:0] $end
$var wire      1 8-   o_awready [3] $end
$var wire      1 9-   o_awready [2] $end
$var wire      1 :-   o_awready [1] $end
$var wire      1 ;-   o_awready [0] $end
$var reg      108 <-   o_awch [107:0] $end
$var reg       4 =-   o_wvalid [3:0] $end
$var wire      1 >-   o_wready [3] $end
$var wire      1 ?-   o_wready [2] $end
$var wire      1 @-   o_wready [1] $end
$var wire      1 A-   o_wready [0] $end
$var reg       4 B-   o_wlast [3:0] $end
$var reg      180 C-   o_wch [179:0] $end
$var wire      1 D-   o_bvalid [3] $end
$var wire      1 E-   o_bvalid [2] $end
$var wire      1 F-   o_bvalid [1] $end
$var wire      1 G-   o_bvalid [0] $end
$var reg       4 H-   o_bready [3:0] $end
$var wire     40 I-   o_bch [39:0] $end
$var reg       4 J-   o_arvalid [3:0] $end
$var wire      1 K-   o_arready [3] $end
$var wire      1 L-   o_arready [2] $end
$var wire      1 M-   o_arready [1] $end
$var wire      1 N-   o_arready [0] $end
$var reg      108 O-   o_arch [107:0] $end
$var wire      1 P-   o_rvalid [3] $end
$var wire      1 Q-   o_rvalid [2] $end
$var wire      1 R-   o_rvalid [1] $end
$var wire      1 S-   o_rvalid [0] $end
$var reg       4 T-   o_rready [3:0] $end
$var wire      4 U-   o_rlast [3:0] $end
$var wire     200 V-   o_rch [199:0] $end
$var reg      16 W-   slv_awvalid [15:0] $end
$var reg      16 X-   slv_awready [15:0] $end
$var reg      108 Y-   awch [107:0] $end
$var reg      16 Z-   slv_wvalid [15:0] $end
$var reg      16 [-   slv_wready [15:0] $end
$var reg      16 \-   slv_wlast [15:0] $end
$var reg      180 ]-   wch [179:0] $end
$var reg      16 ^-   slv_bvalid [15:0] $end
$var reg      16 _-   slv_bready [15:0] $end
$var reg      16 `-   slv_arvalid [15:0] $end
$var reg      16 a-   slv_arready [15:0] $end
$var reg      108 b-   arch [107:0] $end
$var reg      16 c-   slv_rvalid [15:0] $end
$var reg      16 d-   slv_rready [15:0] $end
$var reg      16 e-   slv_rlast [15:0] $end
$var reg      16 f-   mst_awvalid [15:0] $end
$var reg      16 g-   mst_awready [15:0] $end
$var reg      16 h-   mst_wvalid [15:0] $end
$var reg      16 i-   mst_wready [15:0] $end
$var reg      16 j-   mst_wlast [15:0] $end
$var reg      16 k-   mst_bvalid [15:0] $end
$var reg      16 l-   mst_bready [15:0] $end
$var reg      40 m-   bch [39:0] $end
$var reg      16 n-   mst_arvalid [15:0] $end
$var reg      16 o-   mst_arready [15:0] $end
$var reg      16 p-   mst_rvalid [15:0] $end
$var reg      16 q-   mst_rready [15:0] $end
$var reg      16 r-   mst_rlast [15:0] $end
$var reg      200 s-   rch [199:0] $end

$scope begin SLV_SWITCHS_GEN[0] $end
$var parameter 32 t-   i [31:0] $end
$var reg       1 u-   pipe_awvalid  $end
$var reg       1 v-   pipe_awready  $end
$var reg      27 w-   pipe_awch [26:0] $end
$var reg       1 x-   pipe_wvalid  $end
$var reg       1 y-   pipe_wready  $end
$var reg       1 z-   pipe_wlast  $end
$var reg      45 {-   pipe_wch [44:0] $end
$var reg       1 |-   pipe_bvalid  $end
$var reg       1 }-   pipe_bready  $end
$var reg      10 ~-   pipe_bch [9:0] $end
$var reg       1 !.   pipe_arvalid  $end
$var reg       1 ".   pipe_arready  $end
$var reg      27 #.   pipe_arch [26:0] $end
$var reg       1 $.   pipe_rvalid  $end
$var reg       1 %.   pipe_rready  $end
$var reg       1 &.   pipe_rlast  $end
$var reg      50 '.   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 (.   DATA_BUS_W  $end
$var parameter 32 ).   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 x,   i_valid  $end
$var reg       1 *.   i_ready  $end
$var wire     27 +.   i_data [26:0] $end
$var reg       1 ,.   o_valid  $end
$var wire      1 -.   o_ready  $end
$var reg      27 ..   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 /.   DATA_BUS_W  $end
$var parameter 32 0.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ~,   i_valid  $end
$var reg       1 1.   i_ready  $end
$var wire     46 2.   i_data [45:0] $end
$var reg       1 3.   o_valid  $end
$var wire      1 4.   o_ready  $end
$var reg      46 5.   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 6.   DATA_BUS_W  $end
$var parameter 32 7.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 8.   i_valid  $end
$var reg       1 9.   i_ready  $end
$var wire     10 :.   i_data [9:0] $end
$var reg       1 ;.   o_valid  $end
$var wire      1 (-   o_ready  $end
$var reg      10 <.   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 =.   DATA_BUS_W  $end
$var parameter 32 >.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 --   i_valid  $end
$var reg       1 ?.   i_ready  $end
$var wire     27 @.   i_data [26:0] $end
$var reg       1 A.   o_valid  $end
$var wire      1 B.   o_ready  $end
$var reg      27 C.   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 D.   DATA_BUS_W  $end
$var parameter 32 E.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 F.   i_valid  $end
$var reg       1 G.   i_ready  $end
$var wire     51 H.   i_data [50:0] $end
$var reg       1 I.   o_valid  $end
$var wire      1 4-   o_ready  $end
$var reg      51 J.   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 K.   AXI_ADDR_W  $end
$var parameter 32 L.   AXI_ID_W  $end
$var parameter 32 M.   AXI_SIGNALING  $end
$var parameter 32 N.   SLV_NB  $end
$var parameter 32 O.   TIMEOUT_ENABLE  $end
$var parameter  4 P.   MST_ROUTES  $end
$var parameter 32 Q.   SLV0_START_ADDR  $end
$var parameter 32 R.   SLV0_END_ADDR  $end
$var parameter 32 S.   SLV1_START_ADDR  $end
$var parameter 32 T.   SLV1_END_ADDR  $end
$var parameter 32 U.   SLV2_START_ADDR  $end
$var parameter 32 V.   SLV2_END_ADDR  $end
$var parameter 32 W.   SLV3_START_ADDR  $end
$var parameter 32 X.   SLV3_END_ADDR  $end
$var parameter 32 Y.   AWCH_W  $end
$var parameter 32 Z.   WCH_W  $end
$var parameter 32 [.   BCH_W  $end
$var parameter 32 \.   ARCH_W  $end
$var parameter 32 ].   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ^.   i_awvalid  $end
$var reg       1 _.   i_awready  $end
$var wire     27 `.   i_awch [26:0] $end
$var wire      1 a.   i_wvalid  $end
$var reg       1 b.   i_wready  $end
$var wire      1 c.   i_wlast  $end
$var wire     45 d.   i_wch [44:0] $end
$var reg       1 e.   i_bvalid  $end
$var wire      1 f.   i_bready  $end
$var reg      10 g.   i_bch [9:0] $end
$var wire      1 h.   i_arvalid  $end
$var reg       1 i.   i_arready  $end
$var wire     27 j.   i_arch [26:0] $end
$var reg       1 k.   i_rvalid  $end
$var wire      1 l.   i_rready  $end
$var reg       1 m.   i_rlast  $end
$var reg      50 n.   i_rch [49:0] $end
$var reg       4 o.   o_awvalid [3:0] $end
$var wire      4 p.   o_awready [3:0] $end
$var reg      27 q.   o_awch [26:0] $end
$var reg       4 r.   o_wvalid [3:0] $end
$var wire      4 s.   o_wready [3:0] $end
$var reg       4 t.   o_wlast [3:0] $end
$var reg      45 u.   o_wch [44:0] $end
$var wire      4 v.   o_bvalid [3:0] $end
$var reg       4 w.   o_bready [3:0] $end
$var wire     40 x.   o_bch [39:0] $end
$var reg       4 y.   o_arvalid [3:0] $end
$var wire      4 z.   o_arready [3:0] $end
$var reg      27 {.   o_arch [26:0] $end
$var wire      4 |.   o_rvalid [3:0] $end
$var reg       4 }.   o_rready [3:0] $end
$var wire      4 ~.   o_rlast [3:0] $end
$var wire     200 !/   o_rch [199:0] $end
$var reg       1 "/   wch_full  $end
$var reg       1 #/   wch_empty  $end
$var reg       4 $/   slv_aw_targeted [3:0] $end
$var reg       4 %/   slv_w_targeted [3:0] $end
$var reg       4 &/   slv_ar_targeted [3:0] $end
$var reg       1 '/   bch_en  $end
$var reg       4 (/   bch_req [3:0] $end
$var reg       4 )/   bch_grant [3:0] $end
$var reg       1 */   rch_en  $end
$var reg       4 +/   rch_req [3:0] $end
$var reg       4 ,/   rch_grant [3:0] $end
$var reg      16 -/   slv0_start_addr [15:0] $end
$var reg      16 ./   slv0_end_addr [15:0] $end
$var reg      16 //   slv1_start_addr [15:0] $end
$var reg      16 0/   slv1_end_addr [15:0] $end
$var reg      16 1/   slv2_start_addr [15:0] $end
$var reg      16 2/   slv2_end_addr [15:0] $end
$var reg      16 3/   slv3_start_addr [15:0] $end
$var reg      16 4/   slv3_end_addr [15:0] $end
$var reg       1 5/   w_misrouting  $end
$var reg       1 6/   r_misrouting  $end
$var reg       1 7/   bch_mr_full  $end
$var reg       1 8/   bch_mr_empty  $end
$var reg       8 9/   bch_mr_id [7:0] $end
$var reg       1 :/   rch_mr_full  $end
$var reg       1 ;/   rch_mr_empty  $end
$var reg      16 </   rch_mr_info [15:0] $end
$var reg       8 =/   rch_mr_id [7:0] $end
$var reg       8 >/   rch_mr_len [7:0] $end
$var reg       8 ?/   rlen [7:0] $end
$var reg       1 @/   rch_running  $end
$var reg       4 A/   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 B/   PASS_THRU  $end
$var parameter 32 C/   ADDR_WIDTH  $end
$var parameter 32 D/   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 E/   data_in [3:0] $end
$var wire      1 F/   push  $end
$var reg       1 G/   full  $end
$var reg       4 H/   data_out [3:0] $end
$var wire      1 I/   pull  $end
$var reg       1 J/   empty  $end
$var reg       1 K/   wr_en  $end
$var reg       9 L/   wrptr [8:0] $end
$var reg       9 M/   rdptr [8:0] $end
$var reg       1 N/   empty_flag  $end
$var reg       1 O/   full_flag  $end
$var reg       1 P/   pass_thru  $end
$var reg       4 Q/   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 R/   ADDR_WIDTH  $end
$var parameter 32 S/   DATA_WIDTH  $end
$var parameter 32 T/   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 U/   wr_en  $end
$var wire      8 V/   addr_in [7:0] $end
$var wire      4 E/   data_in [3:0] $end
$var wire      8 W/   addr_out [7:0] $end
$var reg       4 X/   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 Y/   PASS_THRU  $end
$var parameter 32 Z/   ADDR_WIDTH  $end
$var parameter 32 [/   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 \/   data_in [7:0] $end
$var wire      1 ]/   push  $end
$var reg       1 ^/   full  $end
$var reg       8 _/   data_out [7:0] $end
$var wire      1 `/   pull  $end
$var reg       1 a/   empty  $end
$var reg       1 b/   wr_en  $end
$var reg       3 c/   wrptr [2:0] $end
$var reg       3 d/   rdptr [2:0] $end
$var reg       1 e/   empty_flag  $end
$var reg       1 f/   full_flag  $end
$var reg       1 g/   pass_thru  $end
$var reg       8 h/   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 i/   ADDR_WIDTH  $end
$var parameter 32 j/   DATA_WIDTH  $end
$var parameter 32 k/   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 l/   wr_en  $end
$var wire      2 m/   addr_in [1:0] $end
$var wire      8 \/   data_in [7:0] $end
$var wire      2 n/   addr_out [1:0] $end
$var reg       8 o/   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 p/   REQ_NB  $end
$var parameter 32 q/   REQ0_PRIORITY  $end
$var parameter 32 r/   REQ1_PRIORITY  $end
$var parameter 32 s/   REQ2_PRIORITY  $end
$var parameter 32 t/   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u/   en  $end
$var wire      4 v/   req [3:0] $end
$var reg       4 w/   grant [3:0] $end
$var reg       1 x/   p0_active  $end
$var reg       1 y/   p1_active  $end
$var reg       1 z/   p2_active  $end
$var reg       1 {/   p3_active  $end
$var reg       4 |/   req_p0 [3:0] $end
$var reg       4 }/   req_p1 [3:0] $end
$var reg       4 ~/   req_p2 [3:0] $end
$var reg       4 !0   req_p3 [3:0] $end
$var reg       4 "0   grant_p0 [3:0] $end
$var reg       4 #0   grant_p1 [3:0] $end
$var reg       4 $0   grant_p2 [3:0] $end
$var reg       4 %0   grant_p3 [3:0] $end
$var reg       1 &0   p0  $end
$var reg       1 '0   p1  $end
$var reg       1 (0   p2  $end
$var reg       1 )0   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 *0   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 +0   en  $end
$var wire      4 ,0   req [3:0] $end
$var reg       4 -0   grant [3:0] $end
$var reg       4 .0   mask [3:0] $end
$var reg       4 /0   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 00   PASS_THRU  $end
$var parameter 32 10   ADDR_WIDTH  $end
$var parameter 32 20   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 30   data_in [15:0] $end
$var wire      1 40   push  $end
$var reg       1 50   full  $end
$var reg      16 60   data_out [15:0] $end
$var wire      1 70   pull  $end
$var reg       1 80   empty  $end
$var reg       1 90   wr_en  $end
$var reg       5 :0   wrptr [4:0] $end
$var reg       5 ;0   rdptr [4:0] $end
$var reg       1 <0   empty_flag  $end
$var reg       1 =0   full_flag  $end
$var reg       1 >0   pass_thru  $end
$var reg      16 ?0   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 @0   ADDR_WIDTH  $end
$var parameter 32 A0   DATA_WIDTH  $end
$var parameter 32 B0   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 C0   wr_en  $end
$var wire      4 D0   addr_in [3:0] $end
$var wire     16 30   data_in [15:0] $end
$var wire      4 E0   addr_out [3:0] $end
$var reg      16 F0   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 G0   REQ_NB  $end
$var parameter 32 H0   REQ0_PRIORITY  $end
$var parameter 32 I0   REQ1_PRIORITY  $end
$var parameter 32 J0   REQ2_PRIORITY  $end
$var parameter 32 K0   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 L0   en  $end
$var wire      4 M0   req [3:0] $end
$var reg       4 N0   grant [3:0] $end
$var reg       1 O0   p0_active  $end
$var reg       1 P0   p1_active  $end
$var reg       1 Q0   p2_active  $end
$var reg       1 R0   p3_active  $end
$var reg       4 S0   req_p0 [3:0] $end
$var reg       4 T0   req_p1 [3:0] $end
$var reg       4 U0   req_p2 [3:0] $end
$var reg       4 V0   req_p3 [3:0] $end
$var reg       4 W0   grant_p0 [3:0] $end
$var reg       4 X0   grant_p1 [3:0] $end
$var reg       4 Y0   grant_p2 [3:0] $end
$var reg       4 Z0   grant_p3 [3:0] $end
$var reg       1 [0   p0  $end
$var reg       1 \0   p1  $end
$var reg       1 ]0   p2  $end
$var reg       1 ^0   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 _0   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 `0   en  $end
$var wire      4 a0   req [3:0] $end
$var reg       4 b0   grant [3:0] $end
$var reg       4 c0   mask [3:0] $end
$var reg       4 d0   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[1] $end
$var parameter 32 e0   i [31:0] $end
$var reg       1 f0   pipe_awvalid  $end
$var reg       1 g0   pipe_awready  $end
$var reg      27 h0   pipe_awch [26:0] $end
$var reg       1 i0   pipe_wvalid  $end
$var reg       1 j0   pipe_wready  $end
$var reg       1 k0   pipe_wlast  $end
$var reg      45 l0   pipe_wch [44:0] $end
$var reg       1 m0   pipe_bvalid  $end
$var reg       1 n0   pipe_bready  $end
$var reg      10 o0   pipe_bch [9:0] $end
$var reg       1 p0   pipe_arvalid  $end
$var reg       1 q0   pipe_arready  $end
$var reg      27 r0   pipe_arch [26:0] $end
$var reg       1 s0   pipe_rvalid  $end
$var reg       1 t0   pipe_rready  $end
$var reg       1 u0   pipe_rlast  $end
$var reg      50 v0   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 w0   DATA_BUS_W  $end
$var parameter 32 x0   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w,   i_valid  $end
$var reg       1 y0   i_ready  $end
$var wire     27 z0   i_data [26:0] $end
$var reg       1 {0   o_valid  $end
$var wire      1 |0   o_ready  $end
$var reg      27 }0   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 ~0   DATA_BUS_W  $end
$var parameter 32 !1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 },   i_valid  $end
$var reg       1 "1   i_ready  $end
$var wire     46 #1   i_data [45:0] $end
$var reg       1 $1   o_valid  $end
$var wire      1 %1   o_ready  $end
$var reg      46 &1   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 '1   DATA_BUS_W  $end
$var parameter 32 (1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 )1   i_valid  $end
$var reg       1 *1   i_ready  $end
$var wire     10 +1   i_data [9:0] $end
$var reg       1 ,1   o_valid  $end
$var wire      1 '-   o_ready  $end
$var reg      10 -1   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 .1   DATA_BUS_W  $end
$var parameter 32 /1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ,-   i_valid  $end
$var reg       1 01   i_ready  $end
$var wire     27 11   i_data [26:0] $end
$var reg       1 21   o_valid  $end
$var wire      1 31   o_ready  $end
$var reg      27 41   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 51   DATA_BUS_W  $end
$var parameter 32 61   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 71   i_valid  $end
$var reg       1 81   i_ready  $end
$var wire     51 91   i_data [50:0] $end
$var reg       1 :1   o_valid  $end
$var wire      1 3-   o_ready  $end
$var reg      51 ;1   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 <1   AXI_ADDR_W  $end
$var parameter 32 =1   AXI_ID_W  $end
$var parameter 32 >1   AXI_SIGNALING  $end
$var parameter 32 ?1   SLV_NB  $end
$var parameter 32 @1   TIMEOUT_ENABLE  $end
$var parameter  4 A1   MST_ROUTES  $end
$var parameter 32 B1   SLV0_START_ADDR  $end
$var parameter 32 C1   SLV0_END_ADDR  $end
$var parameter 32 D1   SLV1_START_ADDR  $end
$var parameter 32 E1   SLV1_END_ADDR  $end
$var parameter 32 F1   SLV2_START_ADDR  $end
$var parameter 32 G1   SLV2_END_ADDR  $end
$var parameter 32 H1   SLV3_START_ADDR  $end
$var parameter 32 I1   SLV3_END_ADDR  $end
$var parameter 32 J1   AWCH_W  $end
$var parameter 32 K1   WCH_W  $end
$var parameter 32 L1   BCH_W  $end
$var parameter 32 M1   ARCH_W  $end
$var parameter 32 N1   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 O1   i_awvalid  $end
$var reg       1 P1   i_awready  $end
$var wire     27 Q1   i_awch [26:0] $end
$var wire      1 R1   i_wvalid  $end
$var reg       1 S1   i_wready  $end
$var wire      1 T1   i_wlast  $end
$var wire     45 U1   i_wch [44:0] $end
$var reg       1 V1   i_bvalid  $end
$var wire      1 W1   i_bready  $end
$var reg      10 X1   i_bch [9:0] $end
$var wire      1 Y1   i_arvalid  $end
$var reg       1 Z1   i_arready  $end
$var wire     27 [1   i_arch [26:0] $end
$var reg       1 \1   i_rvalid  $end
$var wire      1 ]1   i_rready  $end
$var reg       1 ^1   i_rlast  $end
$var reg      50 _1   i_rch [49:0] $end
$var reg       4 `1   o_awvalid [3:0] $end
$var wire      4 a1   o_awready [3:0] $end
$var reg      27 b1   o_awch [26:0] $end
$var reg       4 c1   o_wvalid [3:0] $end
$var wire      4 d1   o_wready [3:0] $end
$var reg       4 e1   o_wlast [3:0] $end
$var reg      45 f1   o_wch [44:0] $end
$var wire      4 g1   o_bvalid [3:0] $end
$var reg       4 h1   o_bready [3:0] $end
$var wire     40 i1   o_bch [39:0] $end
$var reg       4 j1   o_arvalid [3:0] $end
$var wire      4 k1   o_arready [3:0] $end
$var reg      27 l1   o_arch [26:0] $end
$var wire      4 m1   o_rvalid [3:0] $end
$var reg       4 n1   o_rready [3:0] $end
$var wire      4 o1   o_rlast [3:0] $end
$var wire     200 p1   o_rch [199:0] $end
$var reg       1 q1   wch_full  $end
$var reg       1 r1   wch_empty  $end
$var reg       4 s1   slv_aw_targeted [3:0] $end
$var reg       4 t1   slv_w_targeted [3:0] $end
$var reg       4 u1   slv_ar_targeted [3:0] $end
$var reg       1 v1   bch_en  $end
$var reg       4 w1   bch_req [3:0] $end
$var reg       4 x1   bch_grant [3:0] $end
$var reg       1 y1   rch_en  $end
$var reg       4 z1   rch_req [3:0] $end
$var reg       4 {1   rch_grant [3:0] $end
$var reg      16 |1   slv0_start_addr [15:0] $end
$var reg      16 }1   slv0_end_addr [15:0] $end
$var reg      16 ~1   slv1_start_addr [15:0] $end
$var reg      16 !2   slv1_end_addr [15:0] $end
$var reg      16 "2   slv2_start_addr [15:0] $end
$var reg      16 #2   slv2_end_addr [15:0] $end
$var reg      16 $2   slv3_start_addr [15:0] $end
$var reg      16 %2   slv3_end_addr [15:0] $end
$var reg       1 &2   w_misrouting  $end
$var reg       1 '2   r_misrouting  $end
$var reg       1 (2   bch_mr_full  $end
$var reg       1 )2   bch_mr_empty  $end
$var reg       8 *2   bch_mr_id [7:0] $end
$var reg       1 +2   rch_mr_full  $end
$var reg       1 ,2   rch_mr_empty  $end
$var reg      16 -2   rch_mr_info [15:0] $end
$var reg       8 .2   rch_mr_id [7:0] $end
$var reg       8 /2   rch_mr_len [7:0] $end
$var reg       8 02   rlen [7:0] $end
$var reg       1 12   rch_running  $end
$var reg       4 22   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 32   PASS_THRU  $end
$var parameter 32 42   ADDR_WIDTH  $end
$var parameter 32 52   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 62   data_in [3:0] $end
$var wire      1 72   push  $end
$var reg       1 82   full  $end
$var reg       4 92   data_out [3:0] $end
$var wire      1 :2   pull  $end
$var reg       1 ;2   empty  $end
$var reg       1 <2   wr_en  $end
$var reg       9 =2   wrptr [8:0] $end
$var reg       9 >2   rdptr [8:0] $end
$var reg       1 ?2   empty_flag  $end
$var reg       1 @2   full_flag  $end
$var reg       1 A2   pass_thru  $end
$var reg       4 B2   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 C2   ADDR_WIDTH  $end
$var parameter 32 D2   DATA_WIDTH  $end
$var parameter 32 E2   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 F2   wr_en  $end
$var wire      8 G2   addr_in [7:0] $end
$var wire      4 62   data_in [3:0] $end
$var wire      8 H2   addr_out [7:0] $end
$var reg       4 I2   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 J2   PASS_THRU  $end
$var parameter 32 K2   ADDR_WIDTH  $end
$var parameter 32 L2   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 M2   data_in [7:0] $end
$var wire      1 N2   push  $end
$var reg       1 O2   full  $end
$var reg       8 P2   data_out [7:0] $end
$var wire      1 Q2   pull  $end
$var reg       1 R2   empty  $end
$var reg       1 S2   wr_en  $end
$var reg       3 T2   wrptr [2:0] $end
$var reg       3 U2   rdptr [2:0] $end
$var reg       1 V2   empty_flag  $end
$var reg       1 W2   full_flag  $end
$var reg       1 X2   pass_thru  $end
$var reg       8 Y2   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 Z2   ADDR_WIDTH  $end
$var parameter 32 [2   DATA_WIDTH  $end
$var parameter 32 \2   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 ]2   wr_en  $end
$var wire      2 ^2   addr_in [1:0] $end
$var wire      8 M2   data_in [7:0] $end
$var wire      2 _2   addr_out [1:0] $end
$var reg       8 `2   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 a2   REQ_NB  $end
$var parameter 32 b2   REQ0_PRIORITY  $end
$var parameter 32 c2   REQ1_PRIORITY  $end
$var parameter 32 d2   REQ2_PRIORITY  $end
$var parameter 32 e2   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 f2   en  $end
$var wire      4 g2   req [3:0] $end
$var reg       4 h2   grant [3:0] $end
$var reg       1 i2   p0_active  $end
$var reg       1 j2   p1_active  $end
$var reg       1 k2   p2_active  $end
$var reg       1 l2   p3_active  $end
$var reg       4 m2   req_p0 [3:0] $end
$var reg       4 n2   req_p1 [3:0] $end
$var reg       4 o2   req_p2 [3:0] $end
$var reg       4 p2   req_p3 [3:0] $end
$var reg       4 q2   grant_p0 [3:0] $end
$var reg       4 r2   grant_p1 [3:0] $end
$var reg       4 s2   grant_p2 [3:0] $end
$var reg       4 t2   grant_p3 [3:0] $end
$var reg       1 u2   p0  $end
$var reg       1 v2   p1  $end
$var reg       1 w2   p2  $end
$var reg       1 x2   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 y2   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 z2   en  $end
$var wire      4 {2   req [3:0] $end
$var reg       4 |2   grant [3:0] $end
$var reg       4 }2   mask [3:0] $end
$var reg       4 ~2   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 !3   PASS_THRU  $end
$var parameter 32 "3   ADDR_WIDTH  $end
$var parameter 32 #3   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 $3   data_in [15:0] $end
$var wire      1 %3   push  $end
$var reg       1 &3   full  $end
$var reg      16 '3   data_out [15:0] $end
$var wire      1 (3   pull  $end
$var reg       1 )3   empty  $end
$var reg       1 *3   wr_en  $end
$var reg       5 +3   wrptr [4:0] $end
$var reg       5 ,3   rdptr [4:0] $end
$var reg       1 -3   empty_flag  $end
$var reg       1 .3   full_flag  $end
$var reg       1 /3   pass_thru  $end
$var reg      16 03   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 13   ADDR_WIDTH  $end
$var parameter 32 23   DATA_WIDTH  $end
$var parameter 32 33   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 43   wr_en  $end
$var wire      4 53   addr_in [3:0] $end
$var wire     16 $3   data_in [15:0] $end
$var wire      4 63   addr_out [3:0] $end
$var reg      16 73   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 83   REQ_NB  $end
$var parameter 32 93   REQ0_PRIORITY  $end
$var parameter 32 :3   REQ1_PRIORITY  $end
$var parameter 32 ;3   REQ2_PRIORITY  $end
$var parameter 32 <3   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 =3   en  $end
$var wire      4 >3   req [3:0] $end
$var reg       4 ?3   grant [3:0] $end
$var reg       1 @3   p0_active  $end
$var reg       1 A3   p1_active  $end
$var reg       1 B3   p2_active  $end
$var reg       1 C3   p3_active  $end
$var reg       4 D3   req_p0 [3:0] $end
$var reg       4 E3   req_p1 [3:0] $end
$var reg       4 F3   req_p2 [3:0] $end
$var reg       4 G3   req_p3 [3:0] $end
$var reg       4 H3   grant_p0 [3:0] $end
$var reg       4 I3   grant_p1 [3:0] $end
$var reg       4 J3   grant_p2 [3:0] $end
$var reg       4 K3   grant_p3 [3:0] $end
$var reg       1 L3   p0  $end
$var reg       1 M3   p1  $end
$var reg       1 N3   p2  $end
$var reg       1 O3   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 P3   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Q3   en  $end
$var wire      4 R3   req [3:0] $end
$var reg       4 S3   grant [3:0] $end
$var reg       4 T3   mask [3:0] $end
$var reg       4 U3   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[2] $end
$var parameter 32 V3   i [31:0] $end
$var reg       1 W3   pipe_awvalid  $end
$var reg       1 X3   pipe_awready  $end
$var reg      27 Y3   pipe_awch [26:0] $end
$var reg       1 Z3   pipe_wvalid  $end
$var reg       1 [3   pipe_wready  $end
$var reg       1 \3   pipe_wlast  $end
$var reg      45 ]3   pipe_wch [44:0] $end
$var reg       1 ^3   pipe_bvalid  $end
$var reg       1 _3   pipe_bready  $end
$var reg      10 `3   pipe_bch [9:0] $end
$var reg       1 a3   pipe_arvalid  $end
$var reg       1 b3   pipe_arready  $end
$var reg      27 c3   pipe_arch [26:0] $end
$var reg       1 d3   pipe_rvalid  $end
$var reg       1 e3   pipe_rready  $end
$var reg       1 f3   pipe_rlast  $end
$var reg      50 g3   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 h3   DATA_BUS_W  $end
$var parameter 32 i3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 v,   i_valid  $end
$var reg       1 j3   i_ready  $end
$var wire     27 k3   i_data [26:0] $end
$var reg       1 l3   o_valid  $end
$var wire      1 m3   o_ready  $end
$var reg      27 n3   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 o3   DATA_BUS_W  $end
$var parameter 32 p3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 |,   i_valid  $end
$var reg       1 q3   i_ready  $end
$var wire     46 r3   i_data [45:0] $end
$var reg       1 s3   o_valid  $end
$var wire      1 t3   o_ready  $end
$var reg      46 u3   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 v3   DATA_BUS_W  $end
$var parameter 32 w3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 x3   i_valid  $end
$var reg       1 y3   i_ready  $end
$var wire     10 z3   i_data [9:0] $end
$var reg       1 {3   o_valid  $end
$var wire      1 &-   o_ready  $end
$var reg      10 |3   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 }3   DATA_BUS_W  $end
$var parameter 32 ~3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 +-   i_valid  $end
$var reg       1 !4   i_ready  $end
$var wire     27 "4   i_data [26:0] $end
$var reg       1 #4   o_valid  $end
$var wire      1 $4   o_ready  $end
$var reg      27 %4   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 &4   DATA_BUS_W  $end
$var parameter 32 '4   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 (4   i_valid  $end
$var reg       1 )4   i_ready  $end
$var wire     51 *4   i_data [50:0] $end
$var reg       1 +4   o_valid  $end
$var wire      1 2-   o_ready  $end
$var reg      51 ,4   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 -4   AXI_ADDR_W  $end
$var parameter 32 .4   AXI_ID_W  $end
$var parameter 32 /4   AXI_SIGNALING  $end
$var parameter 32 04   SLV_NB  $end
$var parameter 32 14   TIMEOUT_ENABLE  $end
$var parameter  4 24   MST_ROUTES  $end
$var parameter 32 34   SLV0_START_ADDR  $end
$var parameter 32 44   SLV0_END_ADDR  $end
$var parameter 32 54   SLV1_START_ADDR  $end
$var parameter 32 64   SLV1_END_ADDR  $end
$var parameter 32 74   SLV2_START_ADDR  $end
$var parameter 32 84   SLV2_END_ADDR  $end
$var parameter 32 94   SLV3_START_ADDR  $end
$var parameter 32 :4   SLV3_END_ADDR  $end
$var parameter 32 ;4   AWCH_W  $end
$var parameter 32 <4   WCH_W  $end
$var parameter 32 =4   BCH_W  $end
$var parameter 32 >4   ARCH_W  $end
$var parameter 32 ?4   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 @4   i_awvalid  $end
$var reg       1 A4   i_awready  $end
$var wire     27 B4   i_awch [26:0] $end
$var wire      1 C4   i_wvalid  $end
$var reg       1 D4   i_wready  $end
$var wire      1 E4   i_wlast  $end
$var wire     45 F4   i_wch [44:0] $end
$var reg       1 G4   i_bvalid  $end
$var wire      1 H4   i_bready  $end
$var reg      10 I4   i_bch [9:0] $end
$var wire      1 J4   i_arvalid  $end
$var reg       1 K4   i_arready  $end
$var wire     27 L4   i_arch [26:0] $end
$var reg       1 M4   i_rvalid  $end
$var wire      1 N4   i_rready  $end
$var reg       1 O4   i_rlast  $end
$var reg      50 P4   i_rch [49:0] $end
$var reg       4 Q4   o_awvalid [3:0] $end
$var wire      4 R4   o_awready [3:0] $end
$var reg      27 S4   o_awch [26:0] $end
$var reg       4 T4   o_wvalid [3:0] $end
$var wire      4 U4   o_wready [3:0] $end
$var reg       4 V4   o_wlast [3:0] $end
$var reg      45 W4   o_wch [44:0] $end
$var wire      4 X4   o_bvalid [3:0] $end
$var reg       4 Y4   o_bready [3:0] $end
$var wire     40 Z4   o_bch [39:0] $end
$var reg       4 [4   o_arvalid [3:0] $end
$var wire      4 \4   o_arready [3:0] $end
$var reg      27 ]4   o_arch [26:0] $end
$var wire      4 ^4   o_rvalid [3:0] $end
$var reg       4 _4   o_rready [3:0] $end
$var wire      4 `4   o_rlast [3:0] $end
$var wire     200 a4   o_rch [199:0] $end
$var reg       1 b4   wch_full  $end
$var reg       1 c4   wch_empty  $end
$var reg       4 d4   slv_aw_targeted [3:0] $end
$var reg       4 e4   slv_w_targeted [3:0] $end
$var reg       4 f4   slv_ar_targeted [3:0] $end
$var reg       1 g4   bch_en  $end
$var reg       4 h4   bch_req [3:0] $end
$var reg       4 i4   bch_grant [3:0] $end
$var reg       1 j4   rch_en  $end
$var reg       4 k4   rch_req [3:0] $end
$var reg       4 l4   rch_grant [3:0] $end
$var reg      16 m4   slv0_start_addr [15:0] $end
$var reg      16 n4   slv0_end_addr [15:0] $end
$var reg      16 o4   slv1_start_addr [15:0] $end
$var reg      16 p4   slv1_end_addr [15:0] $end
$var reg      16 q4   slv2_start_addr [15:0] $end
$var reg      16 r4   slv2_end_addr [15:0] $end
$var reg      16 s4   slv3_start_addr [15:0] $end
$var reg      16 t4   slv3_end_addr [15:0] $end
$var reg       1 u4   w_misrouting  $end
$var reg       1 v4   r_misrouting  $end
$var reg       1 w4   bch_mr_full  $end
$var reg       1 x4   bch_mr_empty  $end
$var reg       8 y4   bch_mr_id [7:0] $end
$var reg       1 z4   rch_mr_full  $end
$var reg       1 {4   rch_mr_empty  $end
$var reg      16 |4   rch_mr_info [15:0] $end
$var reg       8 }4   rch_mr_id [7:0] $end
$var reg       8 ~4   rch_mr_len [7:0] $end
$var reg       8 !5   rlen [7:0] $end
$var reg       1 "5   rch_running  $end
$var reg       4 #5   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 $5   PASS_THRU  $end
$var parameter 32 %5   ADDR_WIDTH  $end
$var parameter 32 &5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 '5   data_in [3:0] $end
$var wire      1 (5   push  $end
$var reg       1 )5   full  $end
$var reg       4 *5   data_out [3:0] $end
$var wire      1 +5   pull  $end
$var reg       1 ,5   empty  $end
$var reg       1 -5   wr_en  $end
$var reg       9 .5   wrptr [8:0] $end
$var reg       9 /5   rdptr [8:0] $end
$var reg       1 05   empty_flag  $end
$var reg       1 15   full_flag  $end
$var reg       1 25   pass_thru  $end
$var reg       4 35   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 45   ADDR_WIDTH  $end
$var parameter 32 55   DATA_WIDTH  $end
$var parameter 32 65   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 75   wr_en  $end
$var wire      8 85   addr_in [7:0] $end
$var wire      4 '5   data_in [3:0] $end
$var wire      8 95   addr_out [7:0] $end
$var reg       4 :5   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 ;5   PASS_THRU  $end
$var parameter 32 <5   ADDR_WIDTH  $end
$var parameter 32 =5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 >5   data_in [7:0] $end
$var wire      1 ?5   push  $end
$var reg       1 @5   full  $end
$var reg       8 A5   data_out [7:0] $end
$var wire      1 B5   pull  $end
$var reg       1 C5   empty  $end
$var reg       1 D5   wr_en  $end
$var reg       3 E5   wrptr [2:0] $end
$var reg       3 F5   rdptr [2:0] $end
$var reg       1 G5   empty_flag  $end
$var reg       1 H5   full_flag  $end
$var reg       1 I5   pass_thru  $end
$var reg       8 J5   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 K5   ADDR_WIDTH  $end
$var parameter 32 L5   DATA_WIDTH  $end
$var parameter 32 M5   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 N5   wr_en  $end
$var wire      2 O5   addr_in [1:0] $end
$var wire      8 >5   data_in [7:0] $end
$var wire      2 P5   addr_out [1:0] $end
$var reg       8 Q5   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 R5   REQ_NB  $end
$var parameter 32 S5   REQ0_PRIORITY  $end
$var parameter 32 T5   REQ1_PRIORITY  $end
$var parameter 32 U5   REQ2_PRIORITY  $end
$var parameter 32 V5   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 W5   en  $end
$var wire      4 X5   req [3:0] $end
$var reg       4 Y5   grant [3:0] $end
$var reg       1 Z5   p0_active  $end
$var reg       1 [5   p1_active  $end
$var reg       1 \5   p2_active  $end
$var reg       1 ]5   p3_active  $end
$var reg       4 ^5   req_p0 [3:0] $end
$var reg       4 _5   req_p1 [3:0] $end
$var reg       4 `5   req_p2 [3:0] $end
$var reg       4 a5   req_p3 [3:0] $end
$var reg       4 b5   grant_p0 [3:0] $end
$var reg       4 c5   grant_p1 [3:0] $end
$var reg       4 d5   grant_p2 [3:0] $end
$var reg       4 e5   grant_p3 [3:0] $end
$var reg       1 f5   p0  $end
$var reg       1 g5   p1  $end
$var reg       1 h5   p2  $end
$var reg       1 i5   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 j5   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 k5   en  $end
$var wire      4 l5   req [3:0] $end
$var reg       4 m5   grant [3:0] $end
$var reg       4 n5   mask [3:0] $end
$var reg       4 o5   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 p5   PASS_THRU  $end
$var parameter 32 q5   ADDR_WIDTH  $end
$var parameter 32 r5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 s5   data_in [15:0] $end
$var wire      1 t5   push  $end
$var reg       1 u5   full  $end
$var reg      16 v5   data_out [15:0] $end
$var wire      1 w5   pull  $end
$var reg       1 x5   empty  $end
$var reg       1 y5   wr_en  $end
$var reg       5 z5   wrptr [4:0] $end
$var reg       5 {5   rdptr [4:0] $end
$var reg       1 |5   empty_flag  $end
$var reg       1 }5   full_flag  $end
$var reg       1 ~5   pass_thru  $end
$var reg      16 !6   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 "6   ADDR_WIDTH  $end
$var parameter 32 #6   DATA_WIDTH  $end
$var parameter 32 $6   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 %6   wr_en  $end
$var wire      4 &6   addr_in [3:0] $end
$var wire     16 s5   data_in [15:0] $end
$var wire      4 '6   addr_out [3:0] $end
$var reg      16 (6   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 )6   REQ_NB  $end
$var parameter 32 *6   REQ0_PRIORITY  $end
$var parameter 32 +6   REQ1_PRIORITY  $end
$var parameter 32 ,6   REQ2_PRIORITY  $end
$var parameter 32 -6   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 .6   en  $end
$var wire      4 /6   req [3:0] $end
$var reg       4 06   grant [3:0] $end
$var reg       1 16   p0_active  $end
$var reg       1 26   p1_active  $end
$var reg       1 36   p2_active  $end
$var reg       1 46   p3_active  $end
$var reg       4 56   req_p0 [3:0] $end
$var reg       4 66   req_p1 [3:0] $end
$var reg       4 76   req_p2 [3:0] $end
$var reg       4 86   req_p3 [3:0] $end
$var reg       4 96   grant_p0 [3:0] $end
$var reg       4 :6   grant_p1 [3:0] $end
$var reg       4 ;6   grant_p2 [3:0] $end
$var reg       4 <6   grant_p3 [3:0] $end
$var reg       1 =6   p0  $end
$var reg       1 >6   p1  $end
$var reg       1 ?6   p2  $end
$var reg       1 @6   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 A6   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 B6   en  $end
$var wire      4 C6   req [3:0] $end
$var reg       4 D6   grant [3:0] $end
$var reg       4 E6   mask [3:0] $end
$var reg       4 F6   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[3] $end
$var parameter 32 G6   i [31:0] $end
$var reg       1 H6   pipe_awvalid  $end
$var reg       1 I6   pipe_awready  $end
$var reg      27 J6   pipe_awch [26:0] $end
$var reg       1 K6   pipe_wvalid  $end
$var reg       1 L6   pipe_wready  $end
$var reg       1 M6   pipe_wlast  $end
$var reg      45 N6   pipe_wch [44:0] $end
$var reg       1 O6   pipe_bvalid  $end
$var reg       1 P6   pipe_bready  $end
$var reg      10 Q6   pipe_bch [9:0] $end
$var reg       1 R6   pipe_arvalid  $end
$var reg       1 S6   pipe_arready  $end
$var reg      27 T6   pipe_arch [26:0] $end
$var reg       1 U6   pipe_rvalid  $end
$var reg       1 V6   pipe_rready  $end
$var reg       1 W6   pipe_rlast  $end
$var reg      50 X6   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 Y6   DATA_BUS_W  $end
$var parameter 32 Z6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u,   i_valid  $end
$var reg       1 [6   i_ready  $end
$var wire     27 \6   i_data [26:0] $end
$var reg       1 ]6   o_valid  $end
$var wire      1 ^6   o_ready  $end
$var reg      27 _6   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 `6   DATA_BUS_W  $end
$var parameter 32 a6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 {,   i_valid  $end
$var reg       1 b6   i_ready  $end
$var wire     46 c6   i_data [45:0] $end
$var reg       1 d6   o_valid  $end
$var wire      1 e6   o_ready  $end
$var reg      46 f6   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 g6   DATA_BUS_W  $end
$var parameter 32 h6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 i6   i_valid  $end
$var reg       1 j6   i_ready  $end
$var wire     10 k6   i_data [9:0] $end
$var reg       1 l6   o_valid  $end
$var wire      1 %-   o_ready  $end
$var reg      10 m6   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 n6   DATA_BUS_W  $end
$var parameter 32 o6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 *-   i_valid  $end
$var reg       1 p6   i_ready  $end
$var wire     27 q6   i_data [26:0] $end
$var reg       1 r6   o_valid  $end
$var wire      1 s6   o_ready  $end
$var reg      27 t6   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 u6   DATA_BUS_W  $end
$var parameter 32 v6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w6   i_valid  $end
$var reg       1 x6   i_ready  $end
$var wire     51 y6   i_data [50:0] $end
$var reg       1 z6   o_valid  $end
$var wire      1 1-   o_ready  $end
$var reg      51 {6   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 |6   AXI_ADDR_W  $end
$var parameter 32 }6   AXI_ID_W  $end
$var parameter 32 ~6   AXI_SIGNALING  $end
$var parameter 32 !7   SLV_NB  $end
$var parameter 32 "7   TIMEOUT_ENABLE  $end
$var parameter  4 #7   MST_ROUTES  $end
$var parameter 32 $7   SLV0_START_ADDR  $end
$var parameter 32 %7   SLV0_END_ADDR  $end
$var parameter 32 &7   SLV1_START_ADDR  $end
$var parameter 32 '7   SLV1_END_ADDR  $end
$var parameter 32 (7   SLV2_START_ADDR  $end
$var parameter 32 )7   SLV2_END_ADDR  $end
$var parameter 32 *7   SLV3_START_ADDR  $end
$var parameter 32 +7   SLV3_END_ADDR  $end
$var parameter 32 ,7   AWCH_W  $end
$var parameter 32 -7   WCH_W  $end
$var parameter 32 .7   BCH_W  $end
$var parameter 32 /7   ARCH_W  $end
$var parameter 32 07   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 17   i_awvalid  $end
$var reg       1 27   i_awready  $end
$var wire     27 37   i_awch [26:0] $end
$var wire      1 47   i_wvalid  $end
$var reg       1 57   i_wready  $end
$var wire      1 67   i_wlast  $end
$var wire     45 77   i_wch [44:0] $end
$var reg       1 87   i_bvalid  $end
$var wire      1 97   i_bready  $end
$var reg      10 :7   i_bch [9:0] $end
$var wire      1 ;7   i_arvalid  $end
$var reg       1 <7   i_arready  $end
$var wire     27 =7   i_arch [26:0] $end
$var reg       1 >7   i_rvalid  $end
$var wire      1 ?7   i_rready  $end
$var reg       1 @7   i_rlast  $end
$var reg      50 A7   i_rch [49:0] $end
$var reg       4 B7   o_awvalid [3:0] $end
$var wire      4 C7   o_awready [3:0] $end
$var reg      27 D7   o_awch [26:0] $end
$var reg       4 E7   o_wvalid [3:0] $end
$var wire      4 F7   o_wready [3:0] $end
$var reg       4 G7   o_wlast [3:0] $end
$var reg      45 H7   o_wch [44:0] $end
$var wire      4 I7   o_bvalid [3:0] $end
$var reg       4 J7   o_bready [3:0] $end
$var wire     40 K7   o_bch [39:0] $end
$var reg       4 L7   o_arvalid [3:0] $end
$var wire      4 M7   o_arready [3:0] $end
$var reg      27 N7   o_arch [26:0] $end
$var wire      4 O7   o_rvalid [3:0] $end
$var reg       4 P7   o_rready [3:0] $end
$var wire      4 Q7   o_rlast [3:0] $end
$var wire     200 R7   o_rch [199:0] $end
$var reg       1 S7   wch_full  $end
$var reg       1 T7   wch_empty  $end
$var reg       4 U7   slv_aw_targeted [3:0] $end
$var reg       4 V7   slv_w_targeted [3:0] $end
$var reg       4 W7   slv_ar_targeted [3:0] $end
$var reg       1 X7   bch_en  $end
$var reg       4 Y7   bch_req [3:0] $end
$var reg       4 Z7   bch_grant [3:0] $end
$var reg       1 [7   rch_en  $end
$var reg       4 \7   rch_req [3:0] $end
$var reg       4 ]7   rch_grant [3:0] $end
$var reg      16 ^7   slv0_start_addr [15:0] $end
$var reg      16 _7   slv0_end_addr [15:0] $end
$var reg      16 `7   slv1_start_addr [15:0] $end
$var reg      16 a7   slv1_end_addr [15:0] $end
$var reg      16 b7   slv2_start_addr [15:0] $end
$var reg      16 c7   slv2_end_addr [15:0] $end
$var reg      16 d7   slv3_start_addr [15:0] $end
$var reg      16 e7   slv3_end_addr [15:0] $end
$var reg       1 f7   w_misrouting  $end
$var reg       1 g7   r_misrouting  $end
$var reg       1 h7   bch_mr_full  $end
$var reg       1 i7   bch_mr_empty  $end
$var reg       8 j7   bch_mr_id [7:0] $end
$var reg       1 k7   rch_mr_full  $end
$var reg       1 l7   rch_mr_empty  $end
$var reg      16 m7   rch_mr_info [15:0] $end
$var reg       8 n7   rch_mr_id [7:0] $end
$var reg       8 o7   rch_mr_len [7:0] $end
$var reg       8 p7   rlen [7:0] $end
$var reg       1 q7   rch_running  $end
$var reg       4 r7   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 s7   PASS_THRU  $end
$var parameter 32 t7   ADDR_WIDTH  $end
$var parameter 32 u7   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 v7   data_in [3:0] $end
$var wire      1 w7   push  $end
$var reg       1 x7   full  $end
$var reg       4 y7   data_out [3:0] $end
$var wire      1 z7   pull  $end
$var reg       1 {7   empty  $end
$var reg       1 |7   wr_en  $end
$var reg       9 }7   wrptr [8:0] $end
$var reg       9 ~7   rdptr [8:0] $end
$var reg       1 !8   empty_flag  $end
$var reg       1 "8   full_flag  $end
$var reg       1 #8   pass_thru  $end
$var reg       4 $8   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 %8   ADDR_WIDTH  $end
$var parameter 32 &8   DATA_WIDTH  $end
$var parameter 32 '8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 (8   wr_en  $end
$var wire      8 )8   addr_in [7:0] $end
$var wire      4 v7   data_in [3:0] $end
$var wire      8 *8   addr_out [7:0] $end
$var reg       4 +8   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 ,8   PASS_THRU  $end
$var parameter 32 -8   ADDR_WIDTH  $end
$var parameter 32 .8   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 /8   data_in [7:0] $end
$var wire      1 08   push  $end
$var reg       1 18   full  $end
$var reg       8 28   data_out [7:0] $end
$var wire      1 38   pull  $end
$var reg       1 48   empty  $end
$var reg       1 58   wr_en  $end
$var reg       3 68   wrptr [2:0] $end
$var reg       3 78   rdptr [2:0] $end
$var reg       1 88   empty_flag  $end
$var reg       1 98   full_flag  $end
$var reg       1 :8   pass_thru  $end
$var reg       8 ;8   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 <8   ADDR_WIDTH  $end
$var parameter 32 =8   DATA_WIDTH  $end
$var parameter 32 >8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 ?8   wr_en  $end
$var wire      2 @8   addr_in [1:0] $end
$var wire      8 /8   data_in [7:0] $end
$var wire      2 A8   addr_out [1:0] $end
$var reg       8 B8   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 C8   REQ_NB  $end
$var parameter 32 D8   REQ0_PRIORITY  $end
$var parameter 32 E8   REQ1_PRIORITY  $end
$var parameter 32 F8   REQ2_PRIORITY  $end
$var parameter 32 G8   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 H8   en  $end
$var wire      4 I8   req [3:0] $end
$var reg       4 J8   grant [3:0] $end
$var reg       1 K8   p0_active  $end
$var reg       1 L8   p1_active  $end
$var reg       1 M8   p2_active  $end
$var reg       1 N8   p3_active  $end
$var reg       4 O8   req_p0 [3:0] $end
$var reg       4 P8   req_p1 [3:0] $end
$var reg       4 Q8   req_p2 [3:0] $end
$var reg       4 R8   req_p3 [3:0] $end
$var reg       4 S8   grant_p0 [3:0] $end
$var reg       4 T8   grant_p1 [3:0] $end
$var reg       4 U8   grant_p2 [3:0] $end
$var reg       4 V8   grant_p3 [3:0] $end
$var reg       1 W8   p0  $end
$var reg       1 X8   p1  $end
$var reg       1 Y8   p2  $end
$var reg       1 Z8   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 [8   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 \8   en  $end
$var wire      4 ]8   req [3:0] $end
$var reg       4 ^8   grant [3:0] $end
$var reg       4 _8   mask [3:0] $end
$var reg       4 `8   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 a8   PASS_THRU  $end
$var parameter 32 b8   ADDR_WIDTH  $end
$var parameter 32 c8   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 d8   data_in [15:0] $end
$var wire      1 e8   push  $end
$var reg       1 f8   full  $end
$var reg      16 g8   data_out [15:0] $end
$var wire      1 h8   pull  $end
$var reg       1 i8   empty  $end
$var reg       1 j8   wr_en  $end
$var reg       5 k8   wrptr [4:0] $end
$var reg       5 l8   rdptr [4:0] $end
$var reg       1 m8   empty_flag  $end
$var reg       1 n8   full_flag  $end
$var reg       1 o8   pass_thru  $end
$var reg      16 p8   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 q8   ADDR_WIDTH  $end
$var parameter 32 r8   DATA_WIDTH  $end
$var parameter 32 s8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 t8   wr_en  $end
$var wire      4 u8   addr_in [3:0] $end
$var wire     16 d8   data_in [15:0] $end
$var wire      4 v8   addr_out [3:0] $end
$var reg      16 w8   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 x8   REQ_NB  $end
$var parameter 32 y8   REQ0_PRIORITY  $end
$var parameter 32 z8   REQ1_PRIORITY  $end
$var parameter 32 {8   REQ2_PRIORITY  $end
$var parameter 32 |8   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 }8   en  $end
$var wire      4 ~8   req [3:0] $end
$var reg       4 !9   grant [3:0] $end
$var reg       1 "9   p0_active  $end
$var reg       1 #9   p1_active  $end
$var reg       1 $9   p2_active  $end
$var reg       1 %9   p3_active  $end
$var reg       4 &9   req_p0 [3:0] $end
$var reg       4 '9   req_p1 [3:0] $end
$var reg       4 (9   req_p2 [3:0] $end
$var reg       4 )9   req_p3 [3:0] $end
$var reg       4 *9   grant_p0 [3:0] $end
$var reg       4 +9   grant_p1 [3:0] $end
$var reg       4 ,9   grant_p2 [3:0] $end
$var reg       4 -9   grant_p3 [3:0] $end
$var reg       1 .9   p0  $end
$var reg       1 /9   p1  $end
$var reg       1 09   p2  $end
$var reg       1 19   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 29   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 39   en  $end
$var wire      4 49   req [3:0] $end
$var reg       4 59   grant [3:0] $end
$var reg       4 69   mask [3:0] $end
$var reg       4 79   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[0] $end
$var parameter 32 89   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 99   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 :9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 ;9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 <9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[1] $end
$var parameter 32 =9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 >9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 ?9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 @9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 A9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[2] $end
$var parameter 32 B9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 C9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 D9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 E9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 F9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[3] $end
$var parameter 32 G9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 H9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 I9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 J9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 K9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[0] $end
$var parameter 32 L9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 M9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 N9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 O9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 P9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[1] $end
$var parameter 32 Q9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 R9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 S9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 T9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 U9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[2] $end
$var parameter 32 V9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 W9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 X9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 Y9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 Z9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[3] $end
$var parameter 32 [9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 \9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 ]9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 ^9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 _9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[0] $end
$var parameter 32 `9   i [31:0] $end
$var reg       1 a9   pipe_awvalid  $end
$var reg       1 b9   pipe_awready  $end
$var reg      27 c9   pipe_awch [26:0] $end
$var reg       1 d9   pipe_wvalid  $end
$var reg       1 e9   pipe_wready  $end
$var reg       1 f9   pipe_wlast  $end
$var reg      45 g9   pipe_wch [44:0] $end
$var reg       1 h9   pipe_bvalid  $end
$var reg       1 i9   pipe_bready  $end
$var reg      10 j9   pipe_bch [9:0] $end
$var reg       1 k9   pipe_arvalid  $end
$var reg       1 l9   pipe_arready  $end
$var reg      27 m9   pipe_arch [26:0] $end
$var reg       1 n9   pipe_rvalid  $end
$var reg       1 o9   pipe_rready  $end
$var reg       1 p9   pipe_rlast  $end
$var reg      50 q9   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 r9   AXI_ID_W  $end
$var parameter 32 s9   AXI_DATA_W  $end
$var parameter 32 t9   MST_NB  $end
$var parameter 32 u9   TIMEOUT_ENABLE  $end
$var parameter  8 v9   MST0_ID_MASK [7:0] $end
$var parameter  8 w9   MST1_ID_MASK [7:0] $end
$var parameter  8 x9   MST2_ID_MASK [7:0] $end
$var parameter  8 y9   MST3_ID_MASK [7:0] $end
$var parameter 32 z9   MST0_PRIORITY  $end
$var parameter 32 {9   MST1_PRIORITY  $end
$var parameter 32 |9   MST2_PRIORITY  $end
$var parameter 32 }9   MST3_PRIORITY  $end
$var parameter 32 ~9   AWCH_W  $end
$var parameter 32 !:   WCH_W  $end
$var parameter 32 ":   BCH_W  $end
$var parameter 32 #:   ARCH_W  $end
$var parameter 32 $:   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 %:   i_awvalid [3:0] $end
$var reg       4 &:   i_awready [3:0] $end
$var wire     108 ':   i_awch [107:0] $end
$var wire      4 (:   i_wvalid [3:0] $end
$var reg       4 ):   i_wready [3:0] $end
$var wire      4 *:   i_wlast [3:0] $end
$var wire     180 +:   i_wch [179:0] $end
$var reg       4 ,:   i_bvalid [3:0] $end
$var wire      4 -:   i_bready [3:0] $end
$var reg      10 .:   i_bch [9:0] $end
$var wire      4 /:   i_arvalid [3:0] $end
$var reg       4 0:   i_arready [3:0] $end
$var wire     108 1:   i_arch [107:0] $end
$var reg       4 2:   i_rvalid [3:0] $end
$var wire      4 3:   i_rready [3:0] $end
$var reg       4 4:   i_rlast [3:0] $end
$var reg      50 5:   i_rch [49:0] $end
$var reg       1 6:   o_awvalid  $end
$var wire      1 7:   o_awready  $end
$var reg      27 8:   o_awch [26:0] $end
$var reg       1 9:   o_wvalid  $end
$var wire      1 ::   o_wready  $end
$var reg       1 ;:   o_wlast  $end
$var reg      45 <:   o_wch [44:0] $end
$var wire      1 =:   o_bvalid  $end
$var reg       1 >:   o_bready  $end
$var wire     10 ?:   o_bch [9:0] $end
$var reg       1 @:   o_arvalid  $end
$var wire      1 A:   o_arready  $end
$var reg      27 B:   o_arch [26:0] $end
$var wire      1 C:   o_rvalid  $end
$var reg       1 D:   o_rready  $end
$var wire      1 E:   o_rlast  $end
$var wire     50 F:   o_rch [49:0] $end
$var reg       1 G:   awch_en  $end
$var reg       4 H:   awch_req [3:0] $end
$var reg       4 I:   awch_grant [3:0] $end
$var reg       4 J:   wch_grant [3:0] $end
$var reg       1 K:   arch_en  $end
$var reg       4 L:   arch_req [3:0] $end
$var reg       4 M:   arch_grant [3:0] $end
$var reg       1 N:   mst0_bch_targeted  $end
$var reg       1 O:   mst1_bch_targeted  $end
$var reg       1 P:   mst2_bch_targeted  $end
$var reg       1 Q:   mst3_bch_targeted  $end
$var reg       1 R:   mst0_rch_targeted  $end
$var reg       1 S:   mst1_rch_targeted  $end
$var reg       1 T:   mst2_rch_targeted  $end
$var reg       1 U:   mst3_rch_targeted  $end
$var reg       1 V:   wch_full  $end
$var reg       1 W:   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 X:   REQ_NB  $end
$var parameter 32 Y:   REQ0_PRIORITY  $end
$var parameter 32 Z:   REQ1_PRIORITY  $end
$var parameter 32 [:   REQ2_PRIORITY  $end
$var parameter 32 \:   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ]:   en  $end
$var wire      4 ^:   req [3:0] $end
$var reg       4 _:   grant [3:0] $end
$var reg       1 `:   p0_active  $end
$var reg       1 a:   p1_active  $end
$var reg       1 b:   p2_active  $end
$var reg       1 c:   p3_active  $end
$var reg       4 d:   req_p0 [3:0] $end
$var reg       4 e:   req_p1 [3:0] $end
$var reg       4 f:   req_p2 [3:0] $end
$var reg       4 g:   req_p3 [3:0] $end
$var reg       4 h:   grant_p0 [3:0] $end
$var reg       4 i:   grant_p1 [3:0] $end
$var reg       4 j:   grant_p2 [3:0] $end
$var reg       4 k:   grant_p3 [3:0] $end
$var reg       1 l:   p0  $end
$var reg       1 m:   p1  $end
$var reg       1 n:   p2  $end
$var reg       1 o:   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 p:   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 q:   en  $end
$var wire      4 r:   req [3:0] $end
$var reg       4 s:   grant [3:0] $end
$var reg       4 t:   mask [3:0] $end
$var reg       4 u:   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 v:   PASS_THRU  $end
$var parameter 32 w:   ADDR_WIDTH  $end
$var parameter 32 x:   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 y:   data_in [3:0] $end
$var wire      1 z:   push  $end
$var reg       1 {:   full  $end
$var reg       4 |:   data_out [3:0] $end
$var wire      1 }:   pull  $end
$var reg       1 ~:   empty  $end
$var reg       1 !;   wr_en  $end
$var reg       9 ";   wrptr [8:0] $end
$var reg       9 #;   rdptr [8:0] $end
$var reg       1 $;   empty_flag  $end
$var reg       1 %;   full_flag  $end
$var reg       1 &;   pass_thru  $end
$var reg       4 ';   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 (;   ADDR_WIDTH  $end
$var parameter 32 );   DATA_WIDTH  $end
$var parameter 32 *;   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 +;   wr_en  $end
$var wire      8 ,;   addr_in [7:0] $end
$var wire      4 y:   data_in [3:0] $end
$var wire      8 -;   addr_out [7:0] $end
$var reg       4 .;   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 /;   REQ_NB  $end
$var parameter 32 0;   REQ0_PRIORITY  $end
$var parameter 32 1;   REQ1_PRIORITY  $end
$var parameter 32 2;   REQ2_PRIORITY  $end
$var parameter 32 3;   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 4;   en  $end
$var wire      4 5;   req [3:0] $end
$var reg       4 6;   grant [3:0] $end
$var reg       1 7;   p0_active  $end
$var reg       1 8;   p1_active  $end
$var reg       1 9;   p2_active  $end
$var reg       1 :;   p3_active  $end
$var reg       4 ;;   req_p0 [3:0] $end
$var reg       4 <;   req_p1 [3:0] $end
$var reg       4 =;   req_p2 [3:0] $end
$var reg       4 >;   req_p3 [3:0] $end
$var reg       4 ?;   grant_p0 [3:0] $end
$var reg       4 @;   grant_p1 [3:0] $end
$var reg       4 A;   grant_p2 [3:0] $end
$var reg       4 B;   grant_p3 [3:0] $end
$var reg       1 C;   p0  $end
$var reg       1 D;   p1  $end
$var reg       1 E;   p2  $end
$var reg       1 F;   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 G;   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 H;   en  $end
$var wire      4 I;   req [3:0] $end
$var reg       4 J;   grant [3:0] $end
$var reg       4 K;   mask [3:0] $end
$var reg       4 L;   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 M;   DATA_BUS_W  $end
$var parameter 32 N;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 O;   i_valid  $end
$var reg       1 P;   i_ready  $end
$var wire     27 Q;   i_data [26:0] $end
$var reg       1 R;   o_valid  $end
$var wire      1 ;-   o_ready  $end
$var reg      27 S;   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 T;   DATA_BUS_W  $end
$var parameter 32 U;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 V;   i_valid  $end
$var reg       1 W;   i_ready  $end
$var wire     46 X;   i_data [45:0] $end
$var reg       1 Y;   o_valid  $end
$var wire      1 A-   o_ready  $end
$var reg      46 Z;   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 [;   DATA_BUS_W  $end
$var parameter 32 \;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 G-   i_valid  $end
$var reg       1 ];   i_ready  $end
$var wire     10 ^;   i_data [9:0] $end
$var reg       1 _;   o_valid  $end
$var wire      1 `;   o_ready  $end
$var reg      10 a;   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 b;   DATA_BUS_W  $end
$var parameter 32 c;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 d;   i_valid  $end
$var reg       1 e;   i_ready  $end
$var wire     27 f;   i_data [26:0] $end
$var reg       1 g;   o_valid  $end
$var wire      1 N-   o_ready  $end
$var reg      27 h;   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 i;   DATA_BUS_W  $end
$var parameter 32 j;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 S-   i_valid  $end
$var reg       1 k;   i_ready  $end
$var wire     51 l;   i_data [50:0] $end
$var reg       1 m;   o_valid  $end
$var wire      1 n;   o_ready  $end
$var reg      51 o;   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[1] $end
$var parameter 32 p;   i [31:0] $end
$var reg       1 q;   pipe_awvalid  $end
$var reg       1 r;   pipe_awready  $end
$var reg      27 s;   pipe_awch [26:0] $end
$var reg       1 t;   pipe_wvalid  $end
$var reg       1 u;   pipe_wready  $end
$var reg       1 v;   pipe_wlast  $end
$var reg      45 w;   pipe_wch [44:0] $end
$var reg       1 x;   pipe_bvalid  $end
$var reg       1 y;   pipe_bready  $end
$var reg      10 z;   pipe_bch [9:0] $end
$var reg       1 {;   pipe_arvalid  $end
$var reg       1 |;   pipe_arready  $end
$var reg      27 };   pipe_arch [26:0] $end
$var reg       1 ~;   pipe_rvalid  $end
$var reg       1 !<   pipe_rready  $end
$var reg       1 "<   pipe_rlast  $end
$var reg      50 #<   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 $<   AXI_ID_W  $end
$var parameter 32 %<   AXI_DATA_W  $end
$var parameter 32 &<   MST_NB  $end
$var parameter 32 '<   TIMEOUT_ENABLE  $end
$var parameter  8 (<   MST0_ID_MASK [7:0] $end
$var parameter  8 )<   MST1_ID_MASK [7:0] $end
$var parameter  8 *<   MST2_ID_MASK [7:0] $end
$var parameter  8 +<   MST3_ID_MASK [7:0] $end
$var parameter 32 ,<   MST0_PRIORITY  $end
$var parameter 32 -<   MST1_PRIORITY  $end
$var parameter 32 .<   MST2_PRIORITY  $end
$var parameter 32 /<   MST3_PRIORITY  $end
$var parameter 32 0<   AWCH_W  $end
$var parameter 32 1<   WCH_W  $end
$var parameter 32 2<   BCH_W  $end
$var parameter 32 3<   ARCH_W  $end
$var parameter 32 4<   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 5<   i_awvalid [3:0] $end
$var reg       4 6<   i_awready [3:0] $end
$var wire     108 7<   i_awch [107:0] $end
$var wire      4 8<   i_wvalid [3:0] $end
$var reg       4 9<   i_wready [3:0] $end
$var wire      4 :<   i_wlast [3:0] $end
$var wire     180 ;<   i_wch [179:0] $end
$var reg       4 <<   i_bvalid [3:0] $end
$var wire      4 =<   i_bready [3:0] $end
$var reg      10 ><   i_bch [9:0] $end
$var wire      4 ?<   i_arvalid [3:0] $end
$var reg       4 @<   i_arready [3:0] $end
$var wire     108 A<   i_arch [107:0] $end
$var reg       4 B<   i_rvalid [3:0] $end
$var wire      4 C<   i_rready [3:0] $end
$var reg       4 D<   i_rlast [3:0] $end
$var reg      50 E<   i_rch [49:0] $end
$var reg       1 F<   o_awvalid  $end
$var wire      1 G<   o_awready  $end
$var reg      27 H<   o_awch [26:0] $end
$var reg       1 I<   o_wvalid  $end
$var wire      1 J<   o_wready  $end
$var reg       1 K<   o_wlast  $end
$var reg      45 L<   o_wch [44:0] $end
$var wire      1 M<   o_bvalid  $end
$var reg       1 N<   o_bready  $end
$var wire     10 O<   o_bch [9:0] $end
$var reg       1 P<   o_arvalid  $end
$var wire      1 Q<   o_arready  $end
$var reg      27 R<   o_arch [26:0] $end
$var wire      1 S<   o_rvalid  $end
$var reg       1 T<   o_rready  $end
$var wire      1 U<   o_rlast  $end
$var wire     50 V<   o_rch [49:0] $end
$var reg       1 W<   awch_en  $end
$var reg       4 X<   awch_req [3:0] $end
$var reg       4 Y<   awch_grant [3:0] $end
$var reg       4 Z<   wch_grant [3:0] $end
$var reg       1 [<   arch_en  $end
$var reg       4 \<   arch_req [3:0] $end
$var reg       4 ]<   arch_grant [3:0] $end
$var reg       1 ^<   mst0_bch_targeted  $end
$var reg       1 _<   mst1_bch_targeted  $end
$var reg       1 `<   mst2_bch_targeted  $end
$var reg       1 a<   mst3_bch_targeted  $end
$var reg       1 b<   mst0_rch_targeted  $end
$var reg       1 c<   mst1_rch_targeted  $end
$var reg       1 d<   mst2_rch_targeted  $end
$var reg       1 e<   mst3_rch_targeted  $end
$var reg       1 f<   wch_full  $end
$var reg       1 g<   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 h<   REQ_NB  $end
$var parameter 32 i<   REQ0_PRIORITY  $end
$var parameter 32 j<   REQ1_PRIORITY  $end
$var parameter 32 k<   REQ2_PRIORITY  $end
$var parameter 32 l<   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 m<   en  $end
$var wire      4 n<   req [3:0] $end
$var reg       4 o<   grant [3:0] $end
$var reg       1 p<   p0_active  $end
$var reg       1 q<   p1_active  $end
$var reg       1 r<   p2_active  $end
$var reg       1 s<   p3_active  $end
$var reg       4 t<   req_p0 [3:0] $end
$var reg       4 u<   req_p1 [3:0] $end
$var reg       4 v<   req_p2 [3:0] $end
$var reg       4 w<   req_p3 [3:0] $end
$var reg       4 x<   grant_p0 [3:0] $end
$var reg       4 y<   grant_p1 [3:0] $end
$var reg       4 z<   grant_p2 [3:0] $end
$var reg       4 {<   grant_p3 [3:0] $end
$var reg       1 |<   p0  $end
$var reg       1 }<   p1  $end
$var reg       1 ~<   p2  $end
$var reg       1 !=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 "=   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 #=   en  $end
$var wire      4 $=   req [3:0] $end
$var reg       4 %=   grant [3:0] $end
$var reg       4 &=   mask [3:0] $end
$var reg       4 '=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 (=   PASS_THRU  $end
$var parameter 32 )=   ADDR_WIDTH  $end
$var parameter 32 *=   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 +=   data_in [3:0] $end
$var wire      1 ,=   push  $end
$var reg       1 -=   full  $end
$var reg       4 .=   data_out [3:0] $end
$var wire      1 /=   pull  $end
$var reg       1 0=   empty  $end
$var reg       1 1=   wr_en  $end
$var reg       9 2=   wrptr [8:0] $end
$var reg       9 3=   rdptr [8:0] $end
$var reg       1 4=   empty_flag  $end
$var reg       1 5=   full_flag  $end
$var reg       1 6=   pass_thru  $end
$var reg       4 7=   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 8=   ADDR_WIDTH  $end
$var parameter 32 9=   DATA_WIDTH  $end
$var parameter 32 :=   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 ;=   wr_en  $end
$var wire      8 <=   addr_in [7:0] $end
$var wire      4 +=   data_in [3:0] $end
$var wire      8 ==   addr_out [7:0] $end
$var reg       4 >=   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 ?=   REQ_NB  $end
$var parameter 32 @=   REQ0_PRIORITY  $end
$var parameter 32 A=   REQ1_PRIORITY  $end
$var parameter 32 B=   REQ2_PRIORITY  $end
$var parameter 32 C=   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 D=   en  $end
$var wire      4 E=   req [3:0] $end
$var reg       4 F=   grant [3:0] $end
$var reg       1 G=   p0_active  $end
$var reg       1 H=   p1_active  $end
$var reg       1 I=   p2_active  $end
$var reg       1 J=   p3_active  $end
$var reg       4 K=   req_p0 [3:0] $end
$var reg       4 L=   req_p1 [3:0] $end
$var reg       4 M=   req_p2 [3:0] $end
$var reg       4 N=   req_p3 [3:0] $end
$var reg       4 O=   grant_p0 [3:0] $end
$var reg       4 P=   grant_p1 [3:0] $end
$var reg       4 Q=   grant_p2 [3:0] $end
$var reg       4 R=   grant_p3 [3:0] $end
$var reg       1 S=   p0  $end
$var reg       1 T=   p1  $end
$var reg       1 U=   p2  $end
$var reg       1 V=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 W=   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 X=   en  $end
$var wire      4 Y=   req [3:0] $end
$var reg       4 Z=   grant [3:0] $end
$var reg       4 [=   mask [3:0] $end
$var reg       4 \=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 ]=   DATA_BUS_W  $end
$var parameter 32 ^=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 _=   i_valid  $end
$var reg       1 `=   i_ready  $end
$var wire     27 a=   i_data [26:0] $end
$var reg       1 b=   o_valid  $end
$var wire      1 :-   o_ready  $end
$var reg      27 c=   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 d=   DATA_BUS_W  $end
$var parameter 32 e=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 f=   i_valid  $end
$var reg       1 g=   i_ready  $end
$var wire     46 h=   i_data [45:0] $end
$var reg       1 i=   o_valid  $end
$var wire      1 @-   o_ready  $end
$var reg      46 j=   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 k=   DATA_BUS_W  $end
$var parameter 32 l=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 F-   i_valid  $end
$var reg       1 m=   i_ready  $end
$var wire     10 n=   i_data [9:0] $end
$var reg       1 o=   o_valid  $end
$var wire      1 p=   o_ready  $end
$var reg      10 q=   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 r=   DATA_BUS_W  $end
$var parameter 32 s=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 t=   i_valid  $end
$var reg       1 u=   i_ready  $end
$var wire     27 v=   i_data [26:0] $end
$var reg       1 w=   o_valid  $end
$var wire      1 M-   o_ready  $end
$var reg      27 x=   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 y=   DATA_BUS_W  $end
$var parameter 32 z=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 R-   i_valid  $end
$var reg       1 {=   i_ready  $end
$var wire     51 |=   i_data [50:0] $end
$var reg       1 }=   o_valid  $end
$var wire      1 ~=   o_ready  $end
$var reg      51 !>   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[2] $end
$var parameter 32 ">   i [31:0] $end
$var reg       1 #>   pipe_awvalid  $end
$var reg       1 $>   pipe_awready  $end
$var reg      27 %>   pipe_awch [26:0] $end
$var reg       1 &>   pipe_wvalid  $end
$var reg       1 '>   pipe_wready  $end
$var reg       1 (>   pipe_wlast  $end
$var reg      45 )>   pipe_wch [44:0] $end
$var reg       1 *>   pipe_bvalid  $end
$var reg       1 +>   pipe_bready  $end
$var reg      10 ,>   pipe_bch [9:0] $end
$var reg       1 ->   pipe_arvalid  $end
$var reg       1 .>   pipe_arready  $end
$var reg      27 />   pipe_arch [26:0] $end
$var reg       1 0>   pipe_rvalid  $end
$var reg       1 1>   pipe_rready  $end
$var reg       1 2>   pipe_rlast  $end
$var reg      50 3>   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 4>   AXI_ID_W  $end
$var parameter 32 5>   AXI_DATA_W  $end
$var parameter 32 6>   MST_NB  $end
$var parameter 32 7>   TIMEOUT_ENABLE  $end
$var parameter  8 8>   MST0_ID_MASK [7:0] $end
$var parameter  8 9>   MST1_ID_MASK [7:0] $end
$var parameter  8 :>   MST2_ID_MASK [7:0] $end
$var parameter  8 ;>   MST3_ID_MASK [7:0] $end
$var parameter 32 <>   MST0_PRIORITY  $end
$var parameter 32 =>   MST1_PRIORITY  $end
$var parameter 32 >>   MST2_PRIORITY  $end
$var parameter 32 ?>   MST3_PRIORITY  $end
$var parameter 32 @>   AWCH_W  $end
$var parameter 32 A>   WCH_W  $end
$var parameter 32 B>   BCH_W  $end
$var parameter 32 C>   ARCH_W  $end
$var parameter 32 D>   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 E>   i_awvalid [3:0] $end
$var reg       4 F>   i_awready [3:0] $end
$var wire     108 G>   i_awch [107:0] $end
$var wire      4 H>   i_wvalid [3:0] $end
$var reg       4 I>   i_wready [3:0] $end
$var wire      4 J>   i_wlast [3:0] $end
$var wire     180 K>   i_wch [179:0] $end
$var reg       4 L>   i_bvalid [3:0] $end
$var wire      4 M>   i_bready [3:0] $end
$var reg      10 N>   i_bch [9:0] $end
$var wire      4 O>   i_arvalid [3:0] $end
$var reg       4 P>   i_arready [3:0] $end
$var wire     108 Q>   i_arch [107:0] $end
$var reg       4 R>   i_rvalid [3:0] $end
$var wire      4 S>   i_rready [3:0] $end
$var reg       4 T>   i_rlast [3:0] $end
$var reg      50 U>   i_rch [49:0] $end
$var reg       1 V>   o_awvalid  $end
$var wire      1 W>   o_awready  $end
$var reg      27 X>   o_awch [26:0] $end
$var reg       1 Y>   o_wvalid  $end
$var wire      1 Z>   o_wready  $end
$var reg       1 [>   o_wlast  $end
$var reg      45 \>   o_wch [44:0] $end
$var wire      1 ]>   o_bvalid  $end
$var reg       1 ^>   o_bready  $end
$var wire     10 _>   o_bch [9:0] $end
$var reg       1 `>   o_arvalid  $end
$var wire      1 a>   o_arready  $end
$var reg      27 b>   o_arch [26:0] $end
$var wire      1 c>   o_rvalid  $end
$var reg       1 d>   o_rready  $end
$var wire      1 e>   o_rlast  $end
$var wire     50 f>   o_rch [49:0] $end
$var reg       1 g>   awch_en  $end
$var reg       4 h>   awch_req [3:0] $end
$var reg       4 i>   awch_grant [3:0] $end
$var reg       4 j>   wch_grant [3:0] $end
$var reg       1 k>   arch_en  $end
$var reg       4 l>   arch_req [3:0] $end
$var reg       4 m>   arch_grant [3:0] $end
$var reg       1 n>   mst0_bch_targeted  $end
$var reg       1 o>   mst1_bch_targeted  $end
$var reg       1 p>   mst2_bch_targeted  $end
$var reg       1 q>   mst3_bch_targeted  $end
$var reg       1 r>   mst0_rch_targeted  $end
$var reg       1 s>   mst1_rch_targeted  $end
$var reg       1 t>   mst2_rch_targeted  $end
$var reg       1 u>   mst3_rch_targeted  $end
$var reg       1 v>   wch_full  $end
$var reg       1 w>   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 x>   REQ_NB  $end
$var parameter 32 y>   REQ0_PRIORITY  $end
$var parameter 32 z>   REQ1_PRIORITY  $end
$var parameter 32 {>   REQ2_PRIORITY  $end
$var parameter 32 |>   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 }>   en  $end
$var wire      4 ~>   req [3:0] $end
$var reg       4 !?   grant [3:0] $end
$var reg       1 "?   p0_active  $end
$var reg       1 #?   p1_active  $end
$var reg       1 $?   p2_active  $end
$var reg       1 %?   p3_active  $end
$var reg       4 &?   req_p0 [3:0] $end
$var reg       4 '?   req_p1 [3:0] $end
$var reg       4 (?   req_p2 [3:0] $end
$var reg       4 )?   req_p3 [3:0] $end
$var reg       4 *?   grant_p0 [3:0] $end
$var reg       4 +?   grant_p1 [3:0] $end
$var reg       4 ,?   grant_p2 [3:0] $end
$var reg       4 -?   grant_p3 [3:0] $end
$var reg       1 .?   p0  $end
$var reg       1 /?   p1  $end
$var reg       1 0?   p2  $end
$var reg       1 1?   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 2?   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 3?   en  $end
$var wire      4 4?   req [3:0] $end
$var reg       4 5?   grant [3:0] $end
$var reg       4 6?   mask [3:0] $end
$var reg       4 7?   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 8?   PASS_THRU  $end
$var parameter 32 9?   ADDR_WIDTH  $end
$var parameter 32 :?   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 ;?   data_in [3:0] $end
$var wire      1 <?   push  $end
$var reg       1 =?   full  $end
$var reg       4 >?   data_out [3:0] $end
$var wire      1 ??   pull  $end
$var reg       1 @?   empty  $end
$var reg       1 A?   wr_en  $end
$var reg       9 B?   wrptr [8:0] $end
$var reg       9 C?   rdptr [8:0] $end
$var reg       1 D?   empty_flag  $end
$var reg       1 E?   full_flag  $end
$var reg       1 F?   pass_thru  $end
$var reg       4 G?   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 H?   ADDR_WIDTH  $end
$var parameter 32 I?   DATA_WIDTH  $end
$var parameter 32 J?   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 K?   wr_en  $end
$var wire      8 L?   addr_in [7:0] $end
$var wire      4 ;?   data_in [3:0] $end
$var wire      8 M?   addr_out [7:0] $end
$var reg       4 N?   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 O?   REQ_NB  $end
$var parameter 32 P?   REQ0_PRIORITY  $end
$var parameter 32 Q?   REQ1_PRIORITY  $end
$var parameter 32 R?   REQ2_PRIORITY  $end
$var parameter 32 S?   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 T?   en  $end
$var wire      4 U?   req [3:0] $end
$var reg       4 V?   grant [3:0] $end
$var reg       1 W?   p0_active  $end
$var reg       1 X?   p1_active  $end
$var reg       1 Y?   p2_active  $end
$var reg       1 Z?   p3_active  $end
$var reg       4 [?   req_p0 [3:0] $end
$var reg       4 \?   req_p1 [3:0] $end
$var reg       4 ]?   req_p2 [3:0] $end
$var reg       4 ^?   req_p3 [3:0] $end
$var reg       4 _?   grant_p0 [3:0] $end
$var reg       4 `?   grant_p1 [3:0] $end
$var reg       4 a?   grant_p2 [3:0] $end
$var reg       4 b?   grant_p3 [3:0] $end
$var reg       1 c?   p0  $end
$var reg       1 d?   p1  $end
$var reg       1 e?   p2  $end
$var reg       1 f?   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 g?   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 h?   en  $end
$var wire      4 i?   req [3:0] $end
$var reg       4 j?   grant [3:0] $end
$var reg       4 k?   mask [3:0] $end
$var reg       4 l?   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 m?   DATA_BUS_W  $end
$var parameter 32 n?   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 o?   i_valid  $end
$var reg       1 p?   i_ready  $end
$var wire     27 q?   i_data [26:0] $end
$var reg       1 r?   o_valid  $end
$var wire      1 9-   o_ready  $end
$var reg      27 s?   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 t?   DATA_BUS_W  $end
$var parameter 32 u?   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 v?   i_valid  $end
$var reg       1 w?   i_ready  $end
$var wire     46 x?   i_data [45:0] $end
$var reg       1 y?   o_valid  $end
$var wire      1 ?-   o_ready  $end
$var reg      46 z?   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 {?   DATA_BUS_W  $end
$var parameter 32 |?   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 E-   i_valid  $end
$var reg       1 }?   i_ready  $end
$var wire     10 ~?   i_data [9:0] $end
$var reg       1 !@   o_valid  $end
$var wire      1 "@   o_ready  $end
$var reg      10 #@   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 $@   DATA_BUS_W  $end
$var parameter 32 %@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 &@   i_valid  $end
$var reg       1 '@   i_ready  $end
$var wire     27 (@   i_data [26:0] $end
$var reg       1 )@   o_valid  $end
$var wire      1 L-   o_ready  $end
$var reg      27 *@   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 +@   DATA_BUS_W  $end
$var parameter 32 ,@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Q-   i_valid  $end
$var reg       1 -@   i_ready  $end
$var wire     51 .@   i_data [50:0] $end
$var reg       1 /@   o_valid  $end
$var wire      1 0@   o_ready  $end
$var reg      51 1@   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[3] $end
$var parameter 32 2@   i [31:0] $end
$var reg       1 3@   pipe_awvalid  $end
$var reg       1 4@   pipe_awready  $end
$var reg      27 5@   pipe_awch [26:0] $end
$var reg       1 6@   pipe_wvalid  $end
$var reg       1 7@   pipe_wready  $end
$var reg       1 8@   pipe_wlast  $end
$var reg      45 9@   pipe_wch [44:0] $end
$var reg       1 :@   pipe_bvalid  $end
$var reg       1 ;@   pipe_bready  $end
$var reg      10 <@   pipe_bch [9:0] $end
$var reg       1 =@   pipe_arvalid  $end
$var reg       1 >@   pipe_arready  $end
$var reg      27 ?@   pipe_arch [26:0] $end
$var reg       1 @@   pipe_rvalid  $end
$var reg       1 A@   pipe_rready  $end
$var reg       1 B@   pipe_rlast  $end
$var reg      50 C@   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 D@   AXI_ID_W  $end
$var parameter 32 E@   AXI_DATA_W  $end
$var parameter 32 F@   MST_NB  $end
$var parameter 32 G@   TIMEOUT_ENABLE  $end
$var parameter  8 H@   MST0_ID_MASK [7:0] $end
$var parameter  8 I@   MST1_ID_MASK [7:0] $end
$var parameter  8 J@   MST2_ID_MASK [7:0] $end
$var parameter  8 K@   MST3_ID_MASK [7:0] $end
$var parameter 32 L@   MST0_PRIORITY  $end
$var parameter 32 M@   MST1_PRIORITY  $end
$var parameter 32 N@   MST2_PRIORITY  $end
$var parameter 32 O@   MST3_PRIORITY  $end
$var parameter 32 P@   AWCH_W  $end
$var parameter 32 Q@   WCH_W  $end
$var parameter 32 R@   BCH_W  $end
$var parameter 32 S@   ARCH_W  $end
$var parameter 32 T@   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 U@   i_awvalid [3:0] $end
$var reg       4 V@   i_awready [3:0] $end
$var wire     108 W@   i_awch [107:0] $end
$var wire      4 X@   i_wvalid [3:0] $end
$var reg       4 Y@   i_wready [3:0] $end
$var wire      4 Z@   i_wlast [3:0] $end
$var wire     180 [@   i_wch [179:0] $end
$var reg       4 \@   i_bvalid [3:0] $end
$var wire      4 ]@   i_bready [3:0] $end
$var reg      10 ^@   i_bch [9:0] $end
$var wire      4 _@   i_arvalid [3:0] $end
$var reg       4 `@   i_arready [3:0] $end
$var wire     108 a@   i_arch [107:0] $end
$var reg       4 b@   i_rvalid [3:0] $end
$var wire      4 c@   i_rready [3:0] $end
$var reg       4 d@   i_rlast [3:0] $end
$var reg      50 e@   i_rch [49:0] $end
$var reg       1 f@   o_awvalid  $end
$var wire      1 g@   o_awready  $end
$var reg      27 h@   o_awch [26:0] $end
$var reg       1 i@   o_wvalid  $end
$var wire      1 j@   o_wready  $end
$var reg       1 k@   o_wlast  $end
$var reg      45 l@   o_wch [44:0] $end
$var wire      1 m@   o_bvalid  $end
$var reg       1 n@   o_bready  $end
$var wire     10 o@   o_bch [9:0] $end
$var reg       1 p@   o_arvalid  $end
$var wire      1 q@   o_arready  $end
$var reg      27 r@   o_arch [26:0] $end
$var wire      1 s@   o_rvalid  $end
$var reg       1 t@   o_rready  $end
$var wire      1 u@   o_rlast  $end
$var wire     50 v@   o_rch [49:0] $end
$var reg       1 w@   awch_en  $end
$var reg       4 x@   awch_req [3:0] $end
$var reg       4 y@   awch_grant [3:0] $end
$var reg       4 z@   wch_grant [3:0] $end
$var reg       1 {@   arch_en  $end
$var reg       4 |@   arch_req [3:0] $end
$var reg       4 }@   arch_grant [3:0] $end
$var reg       1 ~@   mst0_bch_targeted  $end
$var reg       1 !A   mst1_bch_targeted  $end
$var reg       1 "A   mst2_bch_targeted  $end
$var reg       1 #A   mst3_bch_targeted  $end
$var reg       1 $A   mst0_rch_targeted  $end
$var reg       1 %A   mst1_rch_targeted  $end
$var reg       1 &A   mst2_rch_targeted  $end
$var reg       1 'A   mst3_rch_targeted  $end
$var reg       1 (A   wch_full  $end
$var reg       1 )A   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 *A   REQ_NB  $end
$var parameter 32 +A   REQ0_PRIORITY  $end
$var parameter 32 ,A   REQ1_PRIORITY  $end
$var parameter 32 -A   REQ2_PRIORITY  $end
$var parameter 32 .A   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 /A   en  $end
$var wire      4 0A   req [3:0] $end
$var reg       4 1A   grant [3:0] $end
$var reg       1 2A   p0_active  $end
$var reg       1 3A   p1_active  $end
$var reg       1 4A   p2_active  $end
$var reg       1 5A   p3_active  $end
$var reg       4 6A   req_p0 [3:0] $end
$var reg       4 7A   req_p1 [3:0] $end
$var reg       4 8A   req_p2 [3:0] $end
$var reg       4 9A   req_p3 [3:0] $end
$var reg       4 :A   grant_p0 [3:0] $end
$var reg       4 ;A   grant_p1 [3:0] $end
$var reg       4 <A   grant_p2 [3:0] $end
$var reg       4 =A   grant_p3 [3:0] $end
$var reg       1 >A   p0  $end
$var reg       1 ?A   p1  $end
$var reg       1 @A   p2  $end
$var reg       1 AA   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 BA   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 CA   en  $end
$var wire      4 DA   req [3:0] $end
$var reg       4 EA   grant [3:0] $end
$var reg       4 FA   mask [3:0] $end
$var reg       4 GA   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 HA   PASS_THRU  $end
$var parameter 32 IA   ADDR_WIDTH  $end
$var parameter 32 JA   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 KA   data_in [3:0] $end
$var wire      1 LA   push  $end
$var reg       1 MA   full  $end
$var reg       4 NA   data_out [3:0] $end
$var wire      1 OA   pull  $end
$var reg       1 PA   empty  $end
$var reg       1 QA   wr_en  $end
$var reg       9 RA   wrptr [8:0] $end
$var reg       9 SA   rdptr [8:0] $end
$var reg       1 TA   empty_flag  $end
$var reg       1 UA   full_flag  $end
$var reg       1 VA   pass_thru  $end
$var reg       4 WA   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 XA   ADDR_WIDTH  $end
$var parameter 32 YA   DATA_WIDTH  $end
$var parameter 32 ZA   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 [A   wr_en  $end
$var wire      8 \A   addr_in [7:0] $end
$var wire      4 KA   data_in [3:0] $end
$var wire      8 ]A   addr_out [7:0] $end
$var reg       4 ^A   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 _A   REQ_NB  $end
$var parameter 32 `A   REQ0_PRIORITY  $end
$var parameter 32 aA   REQ1_PRIORITY  $end
$var parameter 32 bA   REQ2_PRIORITY  $end
$var parameter 32 cA   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 dA   en  $end
$var wire      4 eA   req [3:0] $end
$var reg       4 fA   grant [3:0] $end
$var reg       1 gA   p0_active  $end
$var reg       1 hA   p1_active  $end
$var reg       1 iA   p2_active  $end
$var reg       1 jA   p3_active  $end
$var reg       4 kA   req_p0 [3:0] $end
$var reg       4 lA   req_p1 [3:0] $end
$var reg       4 mA   req_p2 [3:0] $end
$var reg       4 nA   req_p3 [3:0] $end
$var reg       4 oA   grant_p0 [3:0] $end
$var reg       4 pA   grant_p1 [3:0] $end
$var reg       4 qA   grant_p2 [3:0] $end
$var reg       4 rA   grant_p3 [3:0] $end
$var reg       1 sA   p0  $end
$var reg       1 tA   p1  $end
$var reg       1 uA   p2  $end
$var reg       1 vA   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 wA   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 xA   en  $end
$var wire      4 yA   req [3:0] $end
$var reg       4 zA   grant [3:0] $end
$var reg       4 {A   mask [3:0] $end
$var reg       4 |A   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 }A   DATA_BUS_W  $end
$var parameter 32 ~A   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 !B   i_valid  $end
$var reg       1 "B   i_ready  $end
$var wire     27 #B   i_data [26:0] $end
$var reg       1 $B   o_valid  $end
$var wire      1 8-   o_ready  $end
$var reg      27 %B   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 &B   DATA_BUS_W  $end
$var parameter 32 'B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 (B   i_valid  $end
$var reg       1 )B   i_ready  $end
$var wire     46 *B   i_data [45:0] $end
$var reg       1 +B   o_valid  $end
$var wire      1 >-   o_ready  $end
$var reg      46 ,B   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 -B   DATA_BUS_W  $end
$var parameter 32 .B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 D-   i_valid  $end
$var reg       1 /B   i_ready  $end
$var wire     10 0B   i_data [9:0] $end
$var reg       1 1B   o_valid  $end
$var wire      1 2B   o_ready  $end
$var reg      10 3B   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 4B   DATA_BUS_W  $end
$var parameter 32 5B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 6B   i_valid  $end
$var reg       1 7B   i_ready  $end
$var wire     27 8B   i_data [26:0] $end
$var reg       1 9B   o_valid  $end
$var wire      1 K-   o_ready  $end
$var reg      27 :B   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 ;B   DATA_BUS_W  $end
$var parameter 32 <B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 P-   i_valid  $end
$var reg       1 =B   i_ready  $end
$var wire     51 >B   i_data [50:0] $end
$var reg       1 ?B   o_valid  $end
$var wire      1 @B   o_ready  $end
$var reg      51 AB   o_data [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module mst0_if $end
$var parameter 32 BB   AXI_ADDR_W  $end
$var parameter 32 CB   AXI_ID_W  $end
$var parameter 32 DB   AXI_DATA_W  $end
$var parameter 32 EB   STRB_MODE  $end
$var parameter 32 FB   AXI_SIGNALING  $end
$var parameter 32 GB   KEEP_BASE_ADDR  $end
$var parameter 32 HB   BASE_ADDR  $end
$var parameter 32 IB   SLV_CDC  $end
$var parameter 32 JB   SLV_OSTDREQ_NUM  $end
$var parameter 32 KB   SLV_OSTDREQ_SIZE  $end
$var parameter 32 LB   USER_SUPPORT  $end
$var parameter 32 MB   AXI_AUSER_W  $end
$var parameter 32 NB   AXI_WUSER_W  $end
$var parameter 32 OB   AXI_BUSER_W  $end
$var parameter 32 PB   AXI_RUSER_W  $end
$var parameter 32 QB   AWCH_W  $end
$var parameter 32 RB   WCH_W  $end
$var parameter 32 SB   BCH_W  $end
$var parameter 32 TB   ARCH_W  $end
$var parameter 32 UB   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 VB   i_awvalid  $end
$var reg       1 WB   i_awready  $end
$var wire     27 XB   i_awch [26:0] $end
$var wire      1 YB   i_wvalid  $end
$var reg       1 ZB   i_wready  $end
$var wire      1 [B   i_wlast  $end
$var wire     45 \B   i_wch [44:0] $end
$var reg       1 ]B   i_bvalid  $end
$var wire      1 ^B   i_bready  $end
$var reg      10 _B   i_bch [9:0] $end
$var wire      1 `B   i_arvalid  $end
$var reg       1 aB   i_arready  $end
$var wire     27 bB   i_arch [26:0] $end
$var reg       1 cB   i_rvalid  $end
$var wire      1 dB   i_rready  $end
$var reg       1 eB   i_rlast  $end
$var reg      50 fB   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 gB   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 hB   o_awaddr [15:0] $end
$var reg       8 iB   o_awlen [7:0] $end
$var reg       3 jB   o_awsize [2:0] $end
$var reg       2 kB   o_awburst [1:0] $end
$var reg       2 lB   o_awlock [1:0] $end
$var reg       4 mB   o_awcache [3:0] $end
$var reg       3 nB   o_awprot [2:0] $end
$var reg       4 oB   o_awqos [3:0] $end
$var reg       4 pB   o_awregion [3:0] $end
$var reg       8 qB   o_awid [7:0] $end
$var reg       1 rB   o_awuser [0:0] $end
$var reg       1 sB   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 tB   o_wlast  $end
$var reg      40 uB   o_wdata [39:0] $end
$var reg       5 vB   o_wstrb [4:0] $end
$var reg       1 wB   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 xB   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 yB   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 zB   o_araddr [15:0] $end
$var reg       8 {B   o_arlen [7:0] $end
$var reg       3 |B   o_arsize [2:0] $end
$var reg       2 }B   o_arburst [1:0] $end
$var reg       2 ~B   o_arlock [1:0] $end
$var reg       4 !C   o_arcache [3:0] $end
$var reg       3 "C   o_arprot [2:0] $end
$var reg       4 #C   o_arqos [3:0] $end
$var reg       4 $C   o_arregion [3:0] $end
$var reg       8 %C   o_arid [7:0] $end
$var reg       1 &C   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 'C   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 (C   awch [26:0] $end
$var reg      45 )C   wch [44:0] $end
$var reg      10 *C   bch [9:0] $end
$var reg      27 +C   arch [26:0] $end
$var reg      50 ,C   rch [49:0] $end
$var reg       1 -C   rlast  $end
$var reg      16 .C   awaddr [15:0] $end
$var reg      16 /C   araddr [15:0] $end
$var wire      1 0C   i_wvalid_w  $end
$var wire      1 1C   i_wdata_w [40] $end
$var wire      1 2C   i_wdata_w [39] $end
$var wire      1 3C   i_wdata_w [38] $end
$var wire      1 4C   i_wdata_w [37] $end
$var wire      1 5C   i_wdata_w [36] $end
$var wire      1 6C   i_wdata_w [35] $end
$var wire      1 7C   i_wdata_w [34] $end
$var wire      1 8C   i_wdata_w [33] $end
$var wire      1 9C   i_wdata_w [32] $end
$var wire      1 :C   i_wdata_w [31] $end
$var wire      1 ;C   i_wdata_w [30] $end
$var wire      1 <C   i_wdata_w [29] $end
$var wire      1 =C   i_wdata_w [28] $end
$var wire      1 >C   i_wdata_w [27] $end
$var wire      1 ?C   i_wdata_w [26] $end
$var wire      1 @C   i_wdata_w [25] $end
$var wire      1 AC   i_wdata_w [24] $end
$var wire      1 BC   i_wdata_w [23] $end
$var wire      1 CC   i_wdata_w [22] $end
$var wire      1 DC   i_wdata_w [21] $end
$var wire      1 EC   i_wdata_w [20] $end
$var wire      1 FC   i_wdata_w [19] $end
$var wire      1 GC   i_wdata_w [18] $end
$var wire      1 HC   i_wdata_w [17] $end
$var wire      1 IC   i_wdata_w [16] $end
$var wire      1 JC   i_wdata_w [15] $end
$var wire      1 KC   i_wdata_w [14] $end
$var wire      1 LC   i_wdata_w [13] $end
$var wire      1 MC   i_wdata_w [12] $end
$var wire      1 NC   i_wdata_w [11] $end
$var wire      1 OC   i_wdata_w [10] $end
$var wire      1 PC   i_wdata_w [9] $end
$var wire      1 QC   i_wdata_w [8] $end
$var wire      1 RC   i_wdata_w [7] $end
$var wire      1 SC   i_wdata_w [6] $end
$var wire      1 TC   i_wdata_w [5] $end
$var wire      1 UC   i_wdata_w [4] $end
$var wire      1 VC   i_wdata_w [3] $end
$var wire      1 WC   i_wdata_w [2] $end
$var wire      1 XC   i_wdata_w [1] $end
$var wire      1 YC   i_wdata_w [0] $end
$var reg       3 ZC   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 [C   PASS_THRU  $end
$var parameter 32 \C   AW_ASIZE  $end
$var parameter 32 ]C   W_ASIZE  $end
$var parameter 32 ^C   B_ASIZE  $end
$var parameter 32 _C   AR_ASIZE  $end
$var parameter 32 `C   R_ASIZE  $end
$var reg       1 aC   aw_full  $end
$var reg       1 bC   aw_empty  $end
$var reg       1 cC   w_full  $end
$var reg       1 dC   w_empty  $end
$var reg       1 eC   ar_full  $end
$var reg       1 fC   ar_empty  $end
$var reg       1 gC   r_full  $end
$var reg       1 hC   r_empty  $end
$var reg       1 iC   b_full  $end
$var reg       1 jC   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 kC   PASS_THRU  $end
$var parameter 32 lC   ADDR_WIDTH  $end
$var parameter 32 mC   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 XB   data_in [26:0] $end
$var wire      1 VB   push  $end
$var reg       1 nC   full  $end
$var reg      27 oC   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 pC   empty  $end
$var reg       1 qC   wr_en  $end
$var reg       3 rC   wrptr [2:0] $end
$var reg       3 sC   rdptr [2:0] $end
$var reg       1 tC   empty_flag  $end
$var reg       1 uC   full_flag  $end
$var reg       1 vC   pass_thru  $end
$var reg      27 wC   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 xC   ADDR_WIDTH  $end
$var parameter 32 yC   DATA_WIDTH  $end
$var parameter 32 zC   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 {C   wr_en  $end
$var wire      2 |C   addr_in [1:0] $end
$var wire     27 XB   data_in [26:0] $end
$var wire      2 }C   addr_out [1:0] $end
$var reg      27 ~C   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 !D   PASS_THRU  $end
$var parameter 32 "D   ADDR_WIDTH  $end
$var parameter 32 #D   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 $D   data_in [45:0] $end
$var wire      1 0C   push  $end
$var reg       1 %D   full  $end
$var reg      46 &D   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 'D   empty  $end
$var reg       1 (D   wr_en  $end
$var reg       3 )D   wrptr [2:0] $end
$var reg       3 *D   rdptr [2:0] $end
$var reg       1 +D   empty_flag  $end
$var reg       1 ,D   full_flag  $end
$var reg       1 -D   pass_thru  $end
$var reg      46 .D   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 /D   ADDR_WIDTH  $end
$var parameter 32 0D   DATA_WIDTH  $end
$var parameter 32 1D   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 2D   wr_en  $end
$var wire      2 3D   addr_in [1:0] $end
$var wire     46 $D   data_in [45:0] $end
$var wire      2 4D   addr_out [1:0] $end
$var reg      46 5D   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 6D   PASS_THRU  $end
$var parameter 32 7D   ADDR_WIDTH  $end
$var parameter 32 8D   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 9D   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 :D   full  $end
$var reg      10 ;D   data_out [9:0] $end
$var wire      1 ^B   pull  $end
$var reg       1 <D   empty  $end
$var reg       1 =D   wr_en  $end
$var reg       3 >D   wrptr [2:0] $end
$var reg       3 ?D   rdptr [2:0] $end
$var reg       1 @D   empty_flag  $end
$var reg       1 AD   full_flag  $end
$var reg       1 BD   pass_thru  $end
$var reg      10 CD   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 DD   ADDR_WIDTH  $end
$var parameter 32 ED   DATA_WIDTH  $end
$var parameter 32 FD   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 GD   wr_en  $end
$var wire      2 HD   addr_in [1:0] $end
$var wire     10 9D   data_in [9:0] $end
$var wire      2 ID   addr_out [1:0] $end
$var reg      10 JD   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 KD   PASS_THRU  $end
$var parameter 32 LD   ADDR_WIDTH  $end
$var parameter 32 MD   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 bB   data_in [26:0] $end
$var wire      1 `B   push  $end
$var reg       1 ND   full  $end
$var reg      27 OD   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 PD   empty  $end
$var reg       1 QD   wr_en  $end
$var reg       3 RD   wrptr [2:0] $end
$var reg       3 SD   rdptr [2:0] $end
$var reg       1 TD   empty_flag  $end
$var reg       1 UD   full_flag  $end
$var reg       1 VD   pass_thru  $end
$var reg      27 WD   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 XD   ADDR_WIDTH  $end
$var parameter 32 YD   DATA_WIDTH  $end
$var parameter 32 ZD   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 [D   wr_en  $end
$var wire      2 \D   addr_in [1:0] $end
$var wire     27 bB   data_in [26:0] $end
$var wire      2 ]D   addr_out [1:0] $end
$var reg      27 ^D   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 _D   PASS_THRU  $end
$var parameter 32 `D   ADDR_WIDTH  $end
$var parameter 32 aD   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 bD   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 cD   full  $end
$var reg      51 dD   data_out [50:0] $end
$var wire      1 dB   pull  $end
$var reg       1 eD   empty  $end
$var reg       1 fD   wr_en  $end
$var reg       3 gD   wrptr [2:0] $end
$var reg       3 hD   rdptr [2:0] $end
$var reg       1 iD   empty_flag  $end
$var reg       1 jD   full_flag  $end
$var reg       1 kD   pass_thru  $end
$var reg      51 lD   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 mD   ADDR_WIDTH  $end
$var parameter 32 nD   DATA_WIDTH  $end
$var parameter 32 oD   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 pD   wr_en  $end
$var wire      2 qD   addr_in [1:0] $end
$var wire     51 bD   data_in [50:0] $end
$var wire      2 rD   addr_out [1:0] $end
$var reg      51 sD   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 YB   i_wvalid  $end
$var wire      1 2C   i_wdata [39] $end
$var wire      1 3C   i_wdata [38] $end
$var wire      1 4C   i_wdata [37] $end
$var wire      1 5C   i_wdata [36] $end
$var wire      1 6C   i_wdata [35] $end
$var wire      1 7C   i_wdata [34] $end
$var wire      1 8C   i_wdata [33] $end
$var wire      1 9C   i_wdata [32] $end
$var wire      1 :C   i_wdata [31] $end
$var wire      1 ;C   i_wdata [30] $end
$var wire      1 <C   i_wdata [29] $end
$var wire      1 =C   i_wdata [28] $end
$var wire      1 >C   i_wdata [27] $end
$var wire      1 ?C   i_wdata [26] $end
$var wire      1 @C   i_wdata [25] $end
$var wire      1 AC   i_wdata [24] $end
$var wire      1 BC   i_wdata [23] $end
$var wire      1 CC   i_wdata [22] $end
$var wire      1 DC   i_wdata [21] $end
$var wire      1 EC   i_wdata [20] $end
$var wire      1 FC   i_wdata [19] $end
$var wire      1 GC   i_wdata [18] $end
$var wire      1 HC   i_wdata [17] $end
$var wire      1 IC   i_wdata [16] $end
$var wire      1 JC   i_wdata [15] $end
$var wire      1 KC   i_wdata [14] $end
$var wire      1 LC   i_wdata [13] $end
$var wire      1 MC   i_wdata [12] $end
$var wire      1 NC   i_wdata [11] $end
$var wire      1 OC   i_wdata [10] $end
$var wire      1 PC   i_wdata [9] $end
$var wire      1 QC   i_wdata [8] $end
$var wire      1 RC   i_wdata [7] $end
$var wire      1 SC   i_wdata [6] $end
$var wire      1 TC   i_wdata [5] $end
$var wire      1 UC   i_wdata [4] $end
$var wire      1 VC   i_wdata [3] $end
$var wire      1 WC   i_wdata [2] $end
$var wire      1 XC   i_wdata [1] $end
$var wire      1 YC   i_wdata [0] $end
$var reg       1 tD   o_serr  $end
$var reg       1 uD   o_decerr  $end
$var reg       1 vD   o_wvalid  $end
$var reg      40 wD   o_wdata [39:0] $end
$var wire      8 xD   gen_ecc [7:0] $end
$var wire      8 yD   serr_pos [7:0] $end
$var reg       8 zD   recvd_ecc [7:0] $end
$upscope $end

$upscope $end


$scope module mst1_if $end
$var parameter 32 {D   AXI_ADDR_W  $end
$var parameter 32 |D   AXI_ID_W  $end
$var parameter 32 }D   AXI_DATA_W  $end
$var parameter 32 ~D   STRB_MODE  $end
$var parameter 32 !E   AXI_SIGNALING  $end
$var parameter 32 "E   KEEP_BASE_ADDR  $end
$var parameter 32 #E   BASE_ADDR  $end
$var parameter 32 $E   SLV_CDC  $end
$var parameter 32 %E   SLV_OSTDREQ_NUM  $end
$var parameter 32 &E   SLV_OSTDREQ_SIZE  $end
$var parameter 32 'E   USER_SUPPORT  $end
$var parameter 32 (E   AXI_AUSER_W  $end
$var parameter 32 )E   AXI_WUSER_W  $end
$var parameter 32 *E   AXI_BUSER_W  $end
$var parameter 32 +E   AXI_RUSER_W  $end
$var parameter 32 ,E   AWCH_W  $end
$var parameter 32 -E   WCH_W  $end
$var parameter 32 .E   BCH_W  $end
$var parameter 32 /E   ARCH_W  $end
$var parameter 32 0E   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 1E   i_awvalid  $end
$var reg       1 2E   i_awready  $end
$var wire     27 3E   i_awch [26:0] $end
$var wire      1 4E   i_wvalid  $end
$var reg       1 5E   i_wready  $end
$var wire      1 6E   i_wlast  $end
$var wire     45 7E   i_wch [44:0] $end
$var reg       1 8E   i_bvalid  $end
$var wire      1 9E   i_bready  $end
$var reg      10 :E   i_bch [9:0] $end
$var wire      1 ;E   i_arvalid  $end
$var reg       1 <E   i_arready  $end
$var wire     27 =E   i_arch [26:0] $end
$var reg       1 >E   i_rvalid  $end
$var wire      1 ?E   i_rready  $end
$var reg       1 @E   i_rlast  $end
$var reg      50 AE   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 BE   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 CE   o_awaddr [15:0] $end
$var reg       8 DE   o_awlen [7:0] $end
$var reg       3 EE   o_awsize [2:0] $end
$var reg       2 FE   o_awburst [1:0] $end
$var reg       2 GE   o_awlock [1:0] $end
$var reg       4 HE   o_awcache [3:0] $end
$var reg       3 IE   o_awprot [2:0] $end
$var reg       4 JE   o_awqos [3:0] $end
$var reg       4 KE   o_awregion [3:0] $end
$var reg       8 LE   o_awid [7:0] $end
$var reg       1 ME   o_awuser [0:0] $end
$var reg       1 NE   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 OE   o_wlast  $end
$var reg      40 PE   o_wdata [39:0] $end
$var reg       5 QE   o_wstrb [4:0] $end
$var reg       1 RE   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 SE   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 TE   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 UE   o_araddr [15:0] $end
$var reg       8 VE   o_arlen [7:0] $end
$var reg       3 WE   o_arsize [2:0] $end
$var reg       2 XE   o_arburst [1:0] $end
$var reg       2 YE   o_arlock [1:0] $end
$var reg       4 ZE   o_arcache [3:0] $end
$var reg       3 [E   o_arprot [2:0] $end
$var reg       4 \E   o_arqos [3:0] $end
$var reg       4 ]E   o_arregion [3:0] $end
$var reg       8 ^E   o_arid [7:0] $end
$var reg       1 _E   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 `E   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 aE   awch [26:0] $end
$var reg      45 bE   wch [44:0] $end
$var reg      10 cE   bch [9:0] $end
$var reg      27 dE   arch [26:0] $end
$var reg      50 eE   rch [49:0] $end
$var reg       1 fE   rlast  $end
$var reg      16 gE   awaddr [15:0] $end
$var reg      16 hE   araddr [15:0] $end
$var wire      1 iE   i_wvalid_w  $end
$var wire      1 jE   i_wdata_w [40] $end
$var wire      1 kE   i_wdata_w [39] $end
$var wire      1 lE   i_wdata_w [38] $end
$var wire      1 mE   i_wdata_w [37] $end
$var wire      1 nE   i_wdata_w [36] $end
$var wire      1 oE   i_wdata_w [35] $end
$var wire      1 pE   i_wdata_w [34] $end
$var wire      1 qE   i_wdata_w [33] $end
$var wire      1 rE   i_wdata_w [32] $end
$var wire      1 sE   i_wdata_w [31] $end
$var wire      1 tE   i_wdata_w [30] $end
$var wire      1 uE   i_wdata_w [29] $end
$var wire      1 vE   i_wdata_w [28] $end
$var wire      1 wE   i_wdata_w [27] $end
$var wire      1 xE   i_wdata_w [26] $end
$var wire      1 yE   i_wdata_w [25] $end
$var wire      1 zE   i_wdata_w [24] $end
$var wire      1 {E   i_wdata_w [23] $end
$var wire      1 |E   i_wdata_w [22] $end
$var wire      1 }E   i_wdata_w [21] $end
$var wire      1 ~E   i_wdata_w [20] $end
$var wire      1 !F   i_wdata_w [19] $end
$var wire      1 "F   i_wdata_w [18] $end
$var wire      1 #F   i_wdata_w [17] $end
$var wire      1 $F   i_wdata_w [16] $end
$var wire      1 %F   i_wdata_w [15] $end
$var wire      1 &F   i_wdata_w [14] $end
$var wire      1 'F   i_wdata_w [13] $end
$var wire      1 (F   i_wdata_w [12] $end
$var wire      1 )F   i_wdata_w [11] $end
$var wire      1 *F   i_wdata_w [10] $end
$var wire      1 +F   i_wdata_w [9] $end
$var wire      1 ,F   i_wdata_w [8] $end
$var wire      1 -F   i_wdata_w [7] $end
$var wire      1 .F   i_wdata_w [6] $end
$var wire      1 /F   i_wdata_w [5] $end
$var wire      1 0F   i_wdata_w [4] $end
$var wire      1 1F   i_wdata_w [3] $end
$var wire      1 2F   i_wdata_w [2] $end
$var wire      1 3F   i_wdata_w [1] $end
$var wire      1 4F   i_wdata_w [0] $end
$var reg       3 5F   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 6F   PASS_THRU  $end
$var parameter 32 7F   AW_ASIZE  $end
$var parameter 32 8F   W_ASIZE  $end
$var parameter 32 9F   B_ASIZE  $end
$var parameter 32 :F   AR_ASIZE  $end
$var parameter 32 ;F   R_ASIZE  $end
$var reg       1 <F   aw_full  $end
$var reg       1 =F   aw_empty  $end
$var reg       1 >F   w_full  $end
$var reg       1 ?F   w_empty  $end
$var reg       1 @F   ar_full  $end
$var reg       1 AF   ar_empty  $end
$var reg       1 BF   r_full  $end
$var reg       1 CF   r_empty  $end
$var reg       1 DF   b_full  $end
$var reg       1 EF   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 FF   PASS_THRU  $end
$var parameter 32 GF   ADDR_WIDTH  $end
$var parameter 32 HF   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 3E   data_in [26:0] $end
$var wire      1 1E   push  $end
$var reg       1 IF   full  $end
$var reg      27 JF   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 KF   empty  $end
$var reg       1 LF   wr_en  $end
$var reg       3 MF   wrptr [2:0] $end
$var reg       3 NF   rdptr [2:0] $end
$var reg       1 OF   empty_flag  $end
$var reg       1 PF   full_flag  $end
$var reg       1 QF   pass_thru  $end
$var reg      27 RF   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 SF   ADDR_WIDTH  $end
$var parameter 32 TF   DATA_WIDTH  $end
$var parameter 32 UF   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 VF   wr_en  $end
$var wire      2 WF   addr_in [1:0] $end
$var wire     27 3E   data_in [26:0] $end
$var wire      2 XF   addr_out [1:0] $end
$var reg      27 YF   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 ZF   PASS_THRU  $end
$var parameter 32 [F   ADDR_WIDTH  $end
$var parameter 32 \F   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 ]F   data_in [45:0] $end
$var wire      1 iE   push  $end
$var reg       1 ^F   full  $end
$var reg      46 _F   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 `F   empty  $end
$var reg       1 aF   wr_en  $end
$var reg       3 bF   wrptr [2:0] $end
$var reg       3 cF   rdptr [2:0] $end
$var reg       1 dF   empty_flag  $end
$var reg       1 eF   full_flag  $end
$var reg       1 fF   pass_thru  $end
$var reg      46 gF   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 hF   ADDR_WIDTH  $end
$var parameter 32 iF   DATA_WIDTH  $end
$var parameter 32 jF   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 kF   wr_en  $end
$var wire      2 lF   addr_in [1:0] $end
$var wire     46 ]F   data_in [45:0] $end
$var wire      2 mF   addr_out [1:0] $end
$var reg      46 nF   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 oF   PASS_THRU  $end
$var parameter 32 pF   ADDR_WIDTH  $end
$var parameter 32 qF   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 rF   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 sF   full  $end
$var reg      10 tF   data_out [9:0] $end
$var wire      1 9E   pull  $end
$var reg       1 uF   empty  $end
$var reg       1 vF   wr_en  $end
$var reg       3 wF   wrptr [2:0] $end
$var reg       3 xF   rdptr [2:0] $end
$var reg       1 yF   empty_flag  $end
$var reg       1 zF   full_flag  $end
$var reg       1 {F   pass_thru  $end
$var reg      10 |F   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 }F   ADDR_WIDTH  $end
$var parameter 32 ~F   DATA_WIDTH  $end
$var parameter 32 !G   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 "G   wr_en  $end
$var wire      2 #G   addr_in [1:0] $end
$var wire     10 rF   data_in [9:0] $end
$var wire      2 $G   addr_out [1:0] $end
$var reg      10 %G   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 &G   PASS_THRU  $end
$var parameter 32 'G   ADDR_WIDTH  $end
$var parameter 32 (G   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 =E   data_in [26:0] $end
$var wire      1 ;E   push  $end
$var reg       1 )G   full  $end
$var reg      27 *G   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 +G   empty  $end
$var reg       1 ,G   wr_en  $end
$var reg       3 -G   wrptr [2:0] $end
$var reg       3 .G   rdptr [2:0] $end
$var reg       1 /G   empty_flag  $end
$var reg       1 0G   full_flag  $end
$var reg       1 1G   pass_thru  $end
$var reg      27 2G   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 3G   ADDR_WIDTH  $end
$var parameter 32 4G   DATA_WIDTH  $end
$var parameter 32 5G   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 6G   wr_en  $end
$var wire      2 7G   addr_in [1:0] $end
$var wire     27 =E   data_in [26:0] $end
$var wire      2 8G   addr_out [1:0] $end
$var reg      27 9G   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 :G   PASS_THRU  $end
$var parameter 32 ;G   ADDR_WIDTH  $end
$var parameter 32 <G   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 =G   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 >G   full  $end
$var reg      51 ?G   data_out [50:0] $end
$var wire      1 ?E   pull  $end
$var reg       1 @G   empty  $end
$var reg       1 AG   wr_en  $end
$var reg       3 BG   wrptr [2:0] $end
$var reg       3 CG   rdptr [2:0] $end
$var reg       1 DG   empty_flag  $end
$var reg       1 EG   full_flag  $end
$var reg       1 FG   pass_thru  $end
$var reg      51 GG   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 HG   ADDR_WIDTH  $end
$var parameter 32 IG   DATA_WIDTH  $end
$var parameter 32 JG   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 KG   wr_en  $end
$var wire      2 LG   addr_in [1:0] $end
$var wire     51 =G   data_in [50:0] $end
$var wire      2 MG   addr_out [1:0] $end
$var reg      51 NG   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 4E   i_wvalid  $end
$var wire      1 kE   i_wdata [39] $end
$var wire      1 lE   i_wdata [38] $end
$var wire      1 mE   i_wdata [37] $end
$var wire      1 nE   i_wdata [36] $end
$var wire      1 oE   i_wdata [35] $end
$var wire      1 pE   i_wdata [34] $end
$var wire      1 qE   i_wdata [33] $end
$var wire      1 rE   i_wdata [32] $end
$var wire      1 sE   i_wdata [31] $end
$var wire      1 tE   i_wdata [30] $end
$var wire      1 uE   i_wdata [29] $end
$var wire      1 vE   i_wdata [28] $end
$var wire      1 wE   i_wdata [27] $end
$var wire      1 xE   i_wdata [26] $end
$var wire      1 yE   i_wdata [25] $end
$var wire      1 zE   i_wdata [24] $end
$var wire      1 {E   i_wdata [23] $end
$var wire      1 |E   i_wdata [22] $end
$var wire      1 }E   i_wdata [21] $end
$var wire      1 ~E   i_wdata [20] $end
$var wire      1 !F   i_wdata [19] $end
$var wire      1 "F   i_wdata [18] $end
$var wire      1 #F   i_wdata [17] $end
$var wire      1 $F   i_wdata [16] $end
$var wire      1 %F   i_wdata [15] $end
$var wire      1 &F   i_wdata [14] $end
$var wire      1 'F   i_wdata [13] $end
$var wire      1 (F   i_wdata [12] $end
$var wire      1 )F   i_wdata [11] $end
$var wire      1 *F   i_wdata [10] $end
$var wire      1 +F   i_wdata [9] $end
$var wire      1 ,F   i_wdata [8] $end
$var wire      1 -F   i_wdata [7] $end
$var wire      1 .F   i_wdata [6] $end
$var wire      1 /F   i_wdata [5] $end
$var wire      1 0F   i_wdata [4] $end
$var wire      1 1F   i_wdata [3] $end
$var wire      1 2F   i_wdata [2] $end
$var wire      1 3F   i_wdata [1] $end
$var wire      1 4F   i_wdata [0] $end
$var reg       1 OG   o_serr  $end
$var reg       1 PG   o_decerr  $end
$var reg       1 QG   o_wvalid  $end
$var reg      40 RG   o_wdata [39:0] $end
$var wire      8 SG   gen_ecc [7:0] $end
$var wire      8 TG   serr_pos [7:0] $end
$var reg       8 UG   recvd_ecc [7:0] $end
$upscope $end

$upscope $end


$scope module mst2_if $end
$var parameter 32 VG   AXI_ADDR_W  $end
$var parameter 32 WG   AXI_ID_W  $end
$var parameter 32 XG   AXI_DATA_W  $end
$var parameter 32 YG   STRB_MODE  $end
$var parameter 32 ZG   AXI_SIGNALING  $end
$var parameter 32 [G   KEEP_BASE_ADDR  $end
$var parameter 32 \G   BASE_ADDR  $end
$var parameter 32 ]G   SLV_CDC  $end
$var parameter 32 ^G   SLV_OSTDREQ_NUM  $end
$var parameter 32 _G   SLV_OSTDREQ_SIZE  $end
$var parameter 32 `G   USER_SUPPORT  $end
$var parameter 32 aG   AXI_AUSER_W  $end
$var parameter 32 bG   AXI_WUSER_W  $end
$var parameter 32 cG   AXI_BUSER_W  $end
$var parameter 32 dG   AXI_RUSER_W  $end
$var parameter 32 eG   AWCH_W  $end
$var parameter 32 fG   WCH_W  $end
$var parameter 32 gG   BCH_W  $end
$var parameter 32 hG   ARCH_W  $end
$var parameter 32 iG   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 jG   i_awvalid  $end
$var reg       1 kG   i_awready  $end
$var wire     27 lG   i_awch [26:0] $end
$var wire      1 mG   i_wvalid  $end
$var reg       1 nG   i_wready  $end
$var wire      1 oG   i_wlast  $end
$var wire     45 pG   i_wch [44:0] $end
$var reg       1 qG   i_bvalid  $end
$var wire      1 rG   i_bready  $end
$var reg      10 sG   i_bch [9:0] $end
$var wire      1 tG   i_arvalid  $end
$var reg       1 uG   i_arready  $end
$var wire     27 vG   i_arch [26:0] $end
$var reg       1 wG   i_rvalid  $end
$var wire      1 xG   i_rready  $end
$var reg       1 yG   i_rlast  $end
$var reg      50 zG   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 {G   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 |G   o_awaddr [15:0] $end
$var reg       8 }G   o_awlen [7:0] $end
$var reg       3 ~G   o_awsize [2:0] $end
$var reg       2 !H   o_awburst [1:0] $end
$var reg       2 "H   o_awlock [1:0] $end
$var reg       4 #H   o_awcache [3:0] $end
$var reg       3 $H   o_awprot [2:0] $end
$var reg       4 %H   o_awqos [3:0] $end
$var reg       4 &H   o_awregion [3:0] $end
$var reg       8 'H   o_awid [7:0] $end
$var reg       1 (H   o_awuser [0:0] $end
$var reg       1 )H   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 *H   o_wlast  $end
$var reg      40 +H   o_wdata [39:0] $end
$var reg       5 ,H   o_wstrb [4:0] $end
$var reg       1 -H   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 .H   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 /H   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 0H   o_araddr [15:0] $end
$var reg       8 1H   o_arlen [7:0] $end
$var reg       3 2H   o_arsize [2:0] $end
$var reg       2 3H   o_arburst [1:0] $end
$var reg       2 4H   o_arlock [1:0] $end
$var reg       4 5H   o_arcache [3:0] $end
$var reg       3 6H   o_arprot [2:0] $end
$var reg       4 7H   o_arqos [3:0] $end
$var reg       4 8H   o_arregion [3:0] $end
$var reg       8 9H   o_arid [7:0] $end
$var reg       1 :H   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 ;H   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 <H   awch [26:0] $end
$var reg      45 =H   wch [44:0] $end
$var reg      10 >H   bch [9:0] $end
$var reg      27 ?H   arch [26:0] $end
$var reg      50 @H   rch [49:0] $end
$var reg       1 AH   rlast  $end
$var reg      16 BH   awaddr [15:0] $end
$var reg      16 CH   araddr [15:0] $end
$var wire      1 DH   i_wvalid_w  $end
$var wire      1 EH   i_wdata_w [40] $end
$var wire      1 FH   i_wdata_w [39] $end
$var wire      1 GH   i_wdata_w [38] $end
$var wire      1 HH   i_wdata_w [37] $end
$var wire      1 IH   i_wdata_w [36] $end
$var wire      1 JH   i_wdata_w [35] $end
$var wire      1 KH   i_wdata_w [34] $end
$var wire      1 LH   i_wdata_w [33] $end
$var wire      1 MH   i_wdata_w [32] $end
$var wire      1 NH   i_wdata_w [31] $end
$var wire      1 OH   i_wdata_w [30] $end
$var wire      1 PH   i_wdata_w [29] $end
$var wire      1 QH   i_wdata_w [28] $end
$var wire      1 RH   i_wdata_w [27] $end
$var wire      1 SH   i_wdata_w [26] $end
$var wire      1 TH   i_wdata_w [25] $end
$var wire      1 UH   i_wdata_w [24] $end
$var wire      1 VH   i_wdata_w [23] $end
$var wire      1 WH   i_wdata_w [22] $end
$var wire      1 XH   i_wdata_w [21] $end
$var wire      1 YH   i_wdata_w [20] $end
$var wire      1 ZH   i_wdata_w [19] $end
$var wire      1 [H   i_wdata_w [18] $end
$var wire      1 \H   i_wdata_w [17] $end
$var wire      1 ]H   i_wdata_w [16] $end
$var wire      1 ^H   i_wdata_w [15] $end
$var wire      1 _H   i_wdata_w [14] $end
$var wire      1 `H   i_wdata_w [13] $end
$var wire      1 aH   i_wdata_w [12] $end
$var wire      1 bH   i_wdata_w [11] $end
$var wire      1 cH   i_wdata_w [10] $end
$var wire      1 dH   i_wdata_w [9] $end
$var wire      1 eH   i_wdata_w [8] $end
$var wire      1 fH   i_wdata_w [7] $end
$var wire      1 gH   i_wdata_w [6] $end
$var wire      1 hH   i_wdata_w [5] $end
$var wire      1 iH   i_wdata_w [4] $end
$var wire      1 jH   i_wdata_w [3] $end
$var wire      1 kH   i_wdata_w [2] $end
$var wire      1 lH   i_wdata_w [1] $end
$var wire      1 mH   i_wdata_w [0] $end
$var reg       3 nH   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 oH   PASS_THRU  $end
$var parameter 32 pH   AW_ASIZE  $end
$var parameter 32 qH   W_ASIZE  $end
$var parameter 32 rH   B_ASIZE  $end
$var parameter 32 sH   AR_ASIZE  $end
$var parameter 32 tH   R_ASIZE  $end
$var reg       1 uH   aw_full  $end
$var reg       1 vH   aw_empty  $end
$var reg       1 wH   w_full  $end
$var reg       1 xH   w_empty  $end
$var reg       1 yH   ar_full  $end
$var reg       1 zH   ar_empty  $end
$var reg       1 {H   r_full  $end
$var reg       1 |H   r_empty  $end
$var reg       1 }H   b_full  $end
$var reg       1 ~H   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 !I   PASS_THRU  $end
$var parameter 32 "I   ADDR_WIDTH  $end
$var parameter 32 #I   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 lG   data_in [26:0] $end
$var wire      1 jG   push  $end
$var reg       1 $I   full  $end
$var reg      27 %I   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 &I   empty  $end
$var reg       1 'I   wr_en  $end
$var reg       3 (I   wrptr [2:0] $end
$var reg       3 )I   rdptr [2:0] $end
$var reg       1 *I   empty_flag  $end
$var reg       1 +I   full_flag  $end
$var reg       1 ,I   pass_thru  $end
$var reg      27 -I   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 .I   ADDR_WIDTH  $end
$var parameter 32 /I   DATA_WIDTH  $end
$var parameter 32 0I   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 1I   wr_en  $end
$var wire      2 2I   addr_in [1:0] $end
$var wire     27 lG   data_in [26:0] $end
$var wire      2 3I   addr_out [1:0] $end
$var reg      27 4I   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 5I   PASS_THRU  $end
$var parameter 32 6I   ADDR_WIDTH  $end
$var parameter 32 7I   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 8I   data_in [45:0] $end
$var wire      1 DH   push  $end
$var reg       1 9I   full  $end
$var reg      46 :I   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 ;I   empty  $end
$var reg       1 <I   wr_en  $end
$var reg       3 =I   wrptr [2:0] $end
$var reg       3 >I   rdptr [2:0] $end
$var reg       1 ?I   empty_flag  $end
$var reg       1 @I   full_flag  $end
$var reg       1 AI   pass_thru  $end
$var reg      46 BI   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 CI   ADDR_WIDTH  $end
$var parameter 32 DI   DATA_WIDTH  $end
$var parameter 32 EI   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 FI   wr_en  $end
$var wire      2 GI   addr_in [1:0] $end
$var wire     46 8I   data_in [45:0] $end
$var wire      2 HI   addr_out [1:0] $end
$var reg      46 II   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 JI   PASS_THRU  $end
$var parameter 32 KI   ADDR_WIDTH  $end
$var parameter 32 LI   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 MI   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 NI   full  $end
$var reg      10 OI   data_out [9:0] $end
$var wire      1 rG   pull  $end
$var reg       1 PI   empty  $end
$var reg       1 QI   wr_en  $end
$var reg       3 RI   wrptr [2:0] $end
$var reg       3 SI   rdptr [2:0] $end
$var reg       1 TI   empty_flag  $end
$var reg       1 UI   full_flag  $end
$var reg       1 VI   pass_thru  $end
$var reg      10 WI   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 XI   ADDR_WIDTH  $end
$var parameter 32 YI   DATA_WIDTH  $end
$var parameter 32 ZI   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 [I   wr_en  $end
$var wire      2 \I   addr_in [1:0] $end
$var wire     10 MI   data_in [9:0] $end
$var wire      2 ]I   addr_out [1:0] $end
$var reg      10 ^I   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 _I   PASS_THRU  $end
$var parameter 32 `I   ADDR_WIDTH  $end
$var parameter 32 aI   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 vG   data_in [26:0] $end
$var wire      1 tG   push  $end
$var reg       1 bI   full  $end
$var reg      27 cI   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 dI   empty  $end
$var reg       1 eI   wr_en  $end
$var reg       3 fI   wrptr [2:0] $end
$var reg       3 gI   rdptr [2:0] $end
$var reg       1 hI   empty_flag  $end
$var reg       1 iI   full_flag  $end
$var reg       1 jI   pass_thru  $end
$var reg      27 kI   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 lI   ADDR_WIDTH  $end
$var parameter 32 mI   DATA_WIDTH  $end
$var parameter 32 nI   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 oI   wr_en  $end
$var wire      2 pI   addr_in [1:0] $end
$var wire     27 vG   data_in [26:0] $end
$var wire      2 qI   addr_out [1:0] $end
$var reg      27 rI   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 sI   PASS_THRU  $end
$var parameter 32 tI   ADDR_WIDTH  $end
$var parameter 32 uI   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 vI   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 wI   full  $end
$var reg      51 xI   data_out [50:0] $end
$var wire      1 xG   pull  $end
$var reg       1 yI   empty  $end
$var reg       1 zI   wr_en  $end
$var reg       3 {I   wrptr [2:0] $end
$var reg       3 |I   rdptr [2:0] $end
$var reg       1 }I   empty_flag  $end
$var reg       1 ~I   full_flag  $end
$var reg       1 !J   pass_thru  $end
$var reg      51 "J   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 #J   ADDR_WIDTH  $end
$var parameter 32 $J   DATA_WIDTH  $end
$var parameter 32 %J   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 &J   wr_en  $end
$var wire      2 'J   addr_in [1:0] $end
$var wire     51 vI   data_in [50:0] $end
$var wire      2 (J   addr_out [1:0] $end
$var reg      51 )J   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 mG   i_wvalid  $end
$var wire      1 FH   i_wdata [39] $end
$var wire      1 GH   i_wdata [38] $end
$var wire      1 HH   i_wdata [37] $end
$var wire      1 IH   i_wdata [36] $end
$var wire      1 JH   i_wdata [35] $end
$var wire      1 KH   i_wdata [34] $end
$var wire      1 LH   i_wdata [33] $end
$var wire      1 MH   i_wdata [32] $end
$var wire      1 NH   i_wdata [31] $end
$var wire      1 OH   i_wdata [30] $end
$var wire      1 PH   i_wdata [29] $end
$var wire      1 QH   i_wdata [28] $end
$var wire      1 RH   i_wdata [27] $end
$var wire      1 SH   i_wdata [26] $end
$var wire      1 TH   i_wdata [25] $end
$var wire      1 UH   i_wdata [24] $end
$var wire      1 VH   i_wdata [23] $end
$var wire      1 WH   i_wdata [22] $end
$var wire      1 XH   i_wdata [21] $end
$var wire      1 YH   i_wdata [20] $end
$var wire      1 ZH   i_wdata [19] $end
$var wire      1 [H   i_wdata [18] $end
$var wire      1 \H   i_wdata [17] $end
$var wire      1 ]H   i_wdata [16] $end
$var wire      1 ^H   i_wdata [15] $end
$var wire      1 _H   i_wdata [14] $end
$var wire      1 `H   i_wdata [13] $end
$var wire      1 aH   i_wdata [12] $end
$var wire      1 bH   i_wdata [11] $end
$var wire      1 cH   i_wdata [10] $end
$var wire      1 dH   i_wdata [9] $end
$var wire      1 eH   i_wdata [8] $end
$var wire      1 fH   i_wdata [7] $end
$var wire      1 gH   i_wdata [6] $end
$var wire      1 hH   i_wdata [5] $end
$var wire      1 iH   i_wdata [4] $end
$var wire      1 jH   i_wdata [3] $end
$var wire      1 kH   i_wdata [2] $end
$var wire      1 lH   i_wdata [1] $end
$var wire      1 mH   i_wdata [0] $end
$var reg       1 *J   o_serr  $end
$var reg       1 +J   o_decerr  $end
$var reg       1 ,J   o_wvalid  $end
$var reg      40 -J   o_wdata [39:0] $end
$var wire      8 .J   gen_ecc [7:0] $end
$var wire      8 /J   serr_pos [7:0] $end
$var reg       8 0J   recvd_ecc [7:0] $end
$upscope $end

$upscope $end


$scope module mst3_if $end
$var parameter 32 1J   AXI_ADDR_W  $end
$var parameter 32 2J   AXI_ID_W  $end
$var parameter 32 3J   AXI_DATA_W  $end
$var parameter 32 4J   STRB_MODE  $end
$var parameter 32 5J   AXI_SIGNALING  $end
$var parameter 32 6J   KEEP_BASE_ADDR  $end
$var parameter 32 7J   BASE_ADDR  $end
$var parameter 32 8J   SLV_CDC  $end
$var parameter 32 9J   SLV_OSTDREQ_NUM  $end
$var parameter 32 :J   SLV_OSTDREQ_SIZE  $end
$var parameter 32 ;J   USER_SUPPORT  $end
$var parameter 32 <J   AXI_AUSER_W  $end
$var parameter 32 =J   AXI_WUSER_W  $end
$var parameter 32 >J   AXI_BUSER_W  $end
$var parameter 32 ?J   AXI_RUSER_W  $end
$var parameter 32 @J   AWCH_W  $end
$var parameter 32 AJ   WCH_W  $end
$var parameter 32 BJ   BCH_W  $end
$var parameter 32 CJ   ARCH_W  $end
$var parameter 32 DJ   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 EJ   i_awvalid  $end
$var reg       1 FJ   i_awready  $end
$var wire     27 GJ   i_awch [26:0] $end
$var wire      1 HJ   i_wvalid  $end
$var reg       1 IJ   i_wready  $end
$var wire      1 JJ   i_wlast  $end
$var wire     45 KJ   i_wch [44:0] $end
$var reg       1 LJ   i_bvalid  $end
$var wire      1 MJ   i_bready  $end
$var reg      10 NJ   i_bch [9:0] $end
$var wire      1 OJ   i_arvalid  $end
$var reg       1 PJ   i_arready  $end
$var wire     27 QJ   i_arch [26:0] $end
$var reg       1 RJ   i_rvalid  $end
$var wire      1 SJ   i_rready  $end
$var reg       1 TJ   i_rlast  $end
$var reg      50 UJ   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 VJ   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 WJ   o_awaddr [15:0] $end
$var reg       8 XJ   o_awlen [7:0] $end
$var reg       3 YJ   o_awsize [2:0] $end
$var reg       2 ZJ   o_awburst [1:0] $end
$var reg       2 [J   o_awlock [1:0] $end
$var reg       4 \J   o_awcache [3:0] $end
$var reg       3 ]J   o_awprot [2:0] $end
$var reg       4 ^J   o_awqos [3:0] $end
$var reg       4 _J   o_awregion [3:0] $end
$var reg       8 `J   o_awid [7:0] $end
$var reg       1 aJ   o_awuser [0:0] $end
$var reg       1 bJ   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 cJ   o_wlast  $end
$var reg      40 dJ   o_wdata [39:0] $end
$var reg       5 eJ   o_wstrb [4:0] $end
$var reg       1 fJ   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 gJ   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 hJ   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 iJ   o_araddr [15:0] $end
$var reg       8 jJ   o_arlen [7:0] $end
$var reg       3 kJ   o_arsize [2:0] $end
$var reg       2 lJ   o_arburst [1:0] $end
$var reg       2 mJ   o_arlock [1:0] $end
$var reg       4 nJ   o_arcache [3:0] $end
$var reg       3 oJ   o_arprot [2:0] $end
$var reg       4 pJ   o_arqos [3:0] $end
$var reg       4 qJ   o_arregion [3:0] $end
$var reg       8 rJ   o_arid [7:0] $end
$var reg       1 sJ   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 tJ   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 uJ   awch [26:0] $end
$var reg      45 vJ   wch [44:0] $end
$var reg      10 wJ   bch [9:0] $end
$var reg      27 xJ   arch [26:0] $end
$var reg      50 yJ   rch [49:0] $end
$var reg       1 zJ   rlast  $end
$var reg      16 {J   awaddr [15:0] $end
$var reg      16 |J   araddr [15:0] $end
$var wire      1 }J   i_wvalid_w  $end
$var wire      1 ~J   i_wdata_w [40] $end
$var wire      1 !K   i_wdata_w [39] $end
$var wire      1 "K   i_wdata_w [38] $end
$var wire      1 #K   i_wdata_w [37] $end
$var wire      1 $K   i_wdata_w [36] $end
$var wire      1 %K   i_wdata_w [35] $end
$var wire      1 &K   i_wdata_w [34] $end
$var wire      1 'K   i_wdata_w [33] $end
$var wire      1 (K   i_wdata_w [32] $end
$var wire      1 )K   i_wdata_w [31] $end
$var wire      1 *K   i_wdata_w [30] $end
$var wire      1 +K   i_wdata_w [29] $end
$var wire      1 ,K   i_wdata_w [28] $end
$var wire      1 -K   i_wdata_w [27] $end
$var wire      1 .K   i_wdata_w [26] $end
$var wire      1 /K   i_wdata_w [25] $end
$var wire      1 0K   i_wdata_w [24] $end
$var wire      1 1K   i_wdata_w [23] $end
$var wire      1 2K   i_wdata_w [22] $end
$var wire      1 3K   i_wdata_w [21] $end
$var wire      1 4K   i_wdata_w [20] $end
$var wire      1 5K   i_wdata_w [19] $end
$var wire      1 6K   i_wdata_w [18] $end
$var wire      1 7K   i_wdata_w [17] $end
$var wire      1 8K   i_wdata_w [16] $end
$var wire      1 9K   i_wdata_w [15] $end
$var wire      1 :K   i_wdata_w [14] $end
$var wire      1 ;K   i_wdata_w [13] $end
$var wire      1 <K   i_wdata_w [12] $end
$var wire      1 =K   i_wdata_w [11] $end
$var wire      1 >K   i_wdata_w [10] $end
$var wire      1 ?K   i_wdata_w [9] $end
$var wire      1 @K   i_wdata_w [8] $end
$var wire      1 AK   i_wdata_w [7] $end
$var wire      1 BK   i_wdata_w [6] $end
$var wire      1 CK   i_wdata_w [5] $end
$var wire      1 DK   i_wdata_w [4] $end
$var wire      1 EK   i_wdata_w [3] $end
$var wire      1 FK   i_wdata_w [2] $end
$var wire      1 GK   i_wdata_w [1] $end
$var wire      1 HK   i_wdata_w [0] $end
$var reg       3 IK   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 JK   PASS_THRU  $end
$var parameter 32 KK   AW_ASIZE  $end
$var parameter 32 LK   W_ASIZE  $end
$var parameter 32 MK   B_ASIZE  $end
$var parameter 32 NK   AR_ASIZE  $end
$var parameter 32 OK   R_ASIZE  $end
$var reg       1 PK   aw_full  $end
$var reg       1 QK   aw_empty  $end
$var reg       1 RK   w_full  $end
$var reg       1 SK   w_empty  $end
$var reg       1 TK   ar_full  $end
$var reg       1 UK   ar_empty  $end
$var reg       1 VK   r_full  $end
$var reg       1 WK   r_empty  $end
$var reg       1 XK   b_full  $end
$var reg       1 YK   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 ZK   PASS_THRU  $end
$var parameter 32 [K   ADDR_WIDTH  $end
$var parameter 32 \K   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 GJ   data_in [26:0] $end
$var wire      1 EJ   push  $end
$var reg       1 ]K   full  $end
$var reg      27 ^K   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 _K   empty  $end
$var reg       1 `K   wr_en  $end
$var reg       3 aK   wrptr [2:0] $end
$var reg       3 bK   rdptr [2:0] $end
$var reg       1 cK   empty_flag  $end
$var reg       1 dK   full_flag  $end
$var reg       1 eK   pass_thru  $end
$var reg      27 fK   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 gK   ADDR_WIDTH  $end
$var parameter 32 hK   DATA_WIDTH  $end
$var parameter 32 iK   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 jK   wr_en  $end
$var wire      2 kK   addr_in [1:0] $end
$var wire     27 GJ   data_in [26:0] $end
$var wire      2 lK   addr_out [1:0] $end
$var reg      27 mK   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 nK   PASS_THRU  $end
$var parameter 32 oK   ADDR_WIDTH  $end
$var parameter 32 pK   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     46 qK   data_in [45:0] $end
$var wire      1 }J   push  $end
$var reg       1 rK   full  $end
$var reg      46 sK   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 tK   empty  $end
$var reg       1 uK   wr_en  $end
$var reg       3 vK   wrptr [2:0] $end
$var reg       3 wK   rdptr [2:0] $end
$var reg       1 xK   empty_flag  $end
$var reg       1 yK   full_flag  $end
$var reg       1 zK   pass_thru  $end
$var reg      46 {K   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 |K   ADDR_WIDTH  $end
$var parameter 32 }K   DATA_WIDTH  $end
$var parameter 32 ~K   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 !L   wr_en  $end
$var wire      2 "L   addr_in [1:0] $end
$var wire     46 qK   data_in [45:0] $end
$var wire      2 #L   addr_out [1:0] $end
$var reg      46 $L   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 %L   PASS_THRU  $end
$var parameter 32 &L   ADDR_WIDTH  $end
$var parameter 32 'L   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 (L   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 )L   full  $end
$var reg      10 *L   data_out [9:0] $end
$var wire      1 MJ   pull  $end
$var reg       1 +L   empty  $end
$var reg       1 ,L   wr_en  $end
$var reg       3 -L   wrptr [2:0] $end
$var reg       3 .L   rdptr [2:0] $end
$var reg       1 /L   empty_flag  $end
$var reg       1 0L   full_flag  $end
$var reg       1 1L   pass_thru  $end
$var reg      10 2L   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 3L   ADDR_WIDTH  $end
$var parameter 32 4L   DATA_WIDTH  $end
$var parameter 32 5L   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 6L   wr_en  $end
$var wire      2 7L   addr_in [1:0] $end
$var wire     10 (L   data_in [9:0] $end
$var wire      2 8L   addr_out [1:0] $end
$var reg      10 9L   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 :L   PASS_THRU  $end
$var parameter 32 ;L   ADDR_WIDTH  $end
$var parameter 32 <L   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 QJ   data_in [26:0] $end
$var wire      1 OJ   push  $end
$var reg       1 =L   full  $end
$var reg      27 >L   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 ?L   empty  $end
$var reg       1 @L   wr_en  $end
$var reg       3 AL   wrptr [2:0] $end
$var reg       3 BL   rdptr [2:0] $end
$var reg       1 CL   empty_flag  $end
$var reg       1 DL   full_flag  $end
$var reg       1 EL   pass_thru  $end
$var reg      27 FL   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 GL   ADDR_WIDTH  $end
$var parameter 32 HL   DATA_WIDTH  $end
$var parameter 32 IL   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 JL   wr_en  $end
$var wire      2 KL   addr_in [1:0] $end
$var wire     27 QJ   data_in [26:0] $end
$var wire      2 LL   addr_out [1:0] $end
$var reg      27 ML   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 NL   PASS_THRU  $end
$var parameter 32 OL   ADDR_WIDTH  $end
$var parameter 32 PL   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     51 QL   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 RL   full  $end
$var reg      51 SL   data_out [50:0] $end
$var wire      1 SJ   pull  $end
$var reg       1 TL   empty  $end
$var reg       1 UL   wr_en  $end
$var reg       3 VL   wrptr [2:0] $end
$var reg       3 WL   rdptr [2:0] $end
$var reg       1 XL   empty_flag  $end
$var reg       1 YL   full_flag  $end
$var reg       1 ZL   pass_thru  $end
$var reg      51 [L   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 \L   ADDR_WIDTH  $end
$var parameter 32 ]L   DATA_WIDTH  $end
$var parameter 32 ^L   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 _L   wr_en  $end
$var wire      2 `L   addr_in [1:0] $end
$var wire     51 QL   data_in [50:0] $end
$var wire      2 aL   addr_out [1:0] $end
$var reg      51 bL   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 HJ   i_wvalid  $end
$var wire      1 !K   i_wdata [39] $end
$var wire      1 "K   i_wdata [38] $end
$var wire      1 #K   i_wdata [37] $end
$var wire      1 $K   i_wdata [36] $end
$var wire      1 %K   i_wdata [35] $end
$var wire      1 &K   i_wdata [34] $end
$var wire      1 'K   i_wdata [33] $end
$var wire      1 (K   i_wdata [32] $end
$var wire      1 )K   i_wdata [31] $end
$var wire      1 *K   i_wdata [30] $end
$var wire      1 +K   i_wdata [29] $end
$var wire      1 ,K   i_wdata [28] $end
$var wire      1 -K   i_wdata [27] $end
$var wire      1 .K   i_wdata [26] $end
$var wire      1 /K   i_wdata [25] $end
$var wire      1 0K   i_wdata [24] $end
$var wire      1 1K   i_wdata [23] $end
$var wire      1 2K   i_wdata [22] $end
$var wire      1 3K   i_wdata [21] $end
$var wire      1 4K   i_wdata [20] $end
$var wire      1 5K   i_wdata [19] $end
$var wire      1 6K   i_wdata [18] $end
$var wire      1 7K   i_wdata [17] $end
$var wire      1 8K   i_wdata [16] $end
$var wire      1 9K   i_wdata [15] $end
$var wire      1 :K   i_wdata [14] $end
$var wire      1 ;K   i_wdata [13] $end
$var wire      1 <K   i_wdata [12] $end
$var wire      1 =K   i_wdata [11] $end
$var wire      1 >K   i_wdata [10] $end
$var wire      1 ?K   i_wdata [9] $end
$var wire      1 @K   i_wdata [8] $end
$var wire      1 AK   i_wdata [7] $end
$var wire      1 BK   i_wdata [6] $end
$var wire      1 CK   i_wdata [5] $end
$var wire      1 DK   i_wdata [4] $end
$var wire      1 EK   i_wdata [3] $end
$var wire      1 FK   i_wdata [2] $end
$var wire      1 GK   i_wdata [1] $end
$var wire      1 HK   i_wdata [0] $end
$var reg       1 cL   o_serr  $end
$var reg       1 dL   o_decerr  $end
$var reg       1 eL   o_wvalid  $end
$var reg      40 fL   o_wdata [39:0] $end
$var wire      8 gL   gen_ecc [7:0] $end
$var wire      8 hL   serr_pos [7:0] $end
$var reg       8 iL   recvd_ecc [7:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 ^L
b110011 ]L
b10 \L
b110011 PL
b10 OL
b0 NL
b0 IL
b11011 HL
b10 GL
b11011 <L
b10 ;L
b0 :L
b0 5L
b1010 4L
b10 3L
b1010 'L
b10 &L
b0 %L
b0 ~K
b101110 }K
b10 |K
b101110 pK
b10 oK
b0 nK
b0 iK
b11011 hK
b10 gK
b11011 \K
b10 [K
b0 ZK
b10 OK
b10 NK
b10 MK
b10 LK
b10 KK
b0 JK
b110010 DJ
b11011 CJ
b1010 BJ
b101101 AJ
b11011 @J
b1 ?J
b1 >J
b1 =J
b1 <J
b0 ;J
b1 :J
b100 9J
b0 8J
b11000000000000 7J
b0 6J
b0 5J
b1 4J
b101000 3J
b1000 2J
b10000 1J
b0 %J
b110011 $J
b10 #J
b110011 uI
b10 tI
b0 sI
b0 nI
b11011 mI
b10 lI
b11011 aI
b10 `I
b0 _I
b0 ZI
b1010 YI
b10 XI
b1010 LI
b10 KI
b0 JI
b0 EI
b101110 DI
b10 CI
b101110 7I
b10 6I
b0 5I
b0 0I
b11011 /I
b10 .I
b11011 #I
b10 "I
b0 !I
b10 tH
b10 sH
b10 rH
b10 qH
b10 pH
b0 oH
b110010 iG
b11011 hG
b1010 gG
b101101 fG
b11011 eG
b1 dG
b1 cG
b1 bG
b1 aG
b0 `G
b1 _G
b100 ^G
b0 ]G
b10000000000000 \G
b0 [G
b0 ZG
b1 YG
b101000 XG
b1000 WG
b10000 VG
b0 JG
b110011 IG
b10 HG
b110011 <G
b10 ;G
b0 :G
b0 5G
b11011 4G
b10 3G
b11011 (G
b10 'G
b0 &G
b0 !G
b1010 ~F
b10 }F
b1010 qF
b10 pF
b0 oF
b0 jF
b101110 iF
b10 hF
b101110 \F
b10 [F
b0 ZF
b0 UF
b11011 TF
b10 SF
b11011 HF
b10 GF
b0 FF
b10 ;F
b10 :F
b10 9F
b10 8F
b10 7F
b0 6F
b110010 0E
b11011 /E
b1010 .E
b101101 -E
b11011 ,E
b1 +E
b1 *E
b1 )E
b1 (E
b0 'E
b1 &E
b100 %E
b0 $E
b1000000000000 #E
b0 "E
b0 !E
b1 ~D
b101000 }D
b1000 |D
b10000 {D
b0 oD
b110011 nD
b10 mD
b110011 aD
b10 `D
b0 _D
b0 ZD
b11011 YD
b10 XD
b11011 MD
b10 LD
b0 KD
b0 FD
b1010 ED
b10 DD
b1010 8D
b10 7D
b0 6D
b0 1D
b101110 0D
b10 /D
b101110 #D
b10 "D
b0 !D
b0 zC
b11011 yC
b10 xC
b11011 mC
b10 lC
b0 kC
b10 `C
b10 _C
b10 ^C
b10 ]C
b10 \C
b0 [C
b110010 UB
b11011 TB
b1010 SB
b101101 RB
b11011 QB
b1 PB
b1 OB
b1 NB
b1 MB
b0 LB
b1 KB
b100 JB
b0 IB
b0 HB
b0 GB
b0 FB
b1 EB
b101000 DB
b1000 CB
b10000 BB
b0 <B
b110011 ;B
b0 5B
b11011 4B
b0 .B
b1010 -B
b0 'B
b101110 &B
b0 ~A
b11011 }A
b100 wA
b0 cA
b0 bA
b0 aA
b0 `A
b100 _A
b0 ZA
b100 YA
b1000 XA
b100 JA
b1000 IA
b0 HA
b100 BA
b0 .A
b0 -A
b0 ,A
b0 +A
b100 *A
b110010 T@
b11011 S@
b1010 R@
b101101 Q@
b11011 P@
b0 O@
b0 N@
b0 M@
b0 L@
b1000000 K@
b110000 J@
b100000 I@
b10000 H@
b1 G@
b100 F@
b101000 E@
b1000 D@
b11 2@
b0 ,@
b110011 +@
b0 %@
b11011 $@
b0 |?
b1010 {?
b0 u?
b101110 t?
b0 n?
b11011 m?
b100 g?
b0 S?
b0 R?
b0 Q?
b0 P?
b100 O?
b0 J?
b100 I?
b1000 H?
b100 :?
b1000 9?
b0 8?
b100 2?
b0 |>
b0 {>
b0 z>
b0 y>
b100 x>
b110010 D>
b11011 C>
b1010 B>
b101101 A>
b11011 @>
b0 ?>
b0 >>
b0 =>
b0 <>
b1000000 ;>
b110000 :>
b100000 9>
b10000 8>
b1 7>
b100 6>
b101000 5>
b1000 4>
b10 ">
b0 z=
b110011 y=
b0 s=
b11011 r=
b0 l=
b1010 k=
b0 e=
b101110 d=
b0 ^=
b11011 ]=
b100 W=
b0 C=
b0 B=
b0 A=
b0 @=
b100 ?=
b0 :=
b100 9=
b1000 8=
b100 *=
b1000 )=
b0 (=
b100 "=
b0 l<
b0 k<
b0 j<
b0 i<
b100 h<
b110010 4<
b11011 3<
b1010 2<
b101101 1<
b11011 0<
b0 /<
b0 .<
b0 -<
b0 ,<
b1000000 +<
b110000 *<
b100000 )<
b10000 (<
b1 '<
b100 &<
b101000 %<
b1000 $<
b1 p;
b0 j;
b110011 i;
b0 c;
b11011 b;
b0 \;
b1010 [;
b0 U;
b101110 T;
b0 N;
b11011 M;
b100 G;
b0 3;
b0 2;
b0 1;
b0 0;
b100 /;
b0 *;
b100 );
b1000 (;
b100 x:
b1000 w:
b0 v:
b100 p:
b0 \:
b0 [:
b0 Z:
b0 Y:
b100 X:
b110010 $:
b11011 #:
b1010 ":
b101101 !:
b11011 ~9
b0 }9
b0 |9
b0 {9
b0 z9
b1000000 y9
b110000 x9
b100000 w9
b10000 v9
b1 u9
b100 t9
b101000 s9
b1000 r9
b0 `9
b11 _9
b10 ^9
b1 ]9
b0 \9
b11 [9
b11 Z9
b10 Y9
b1 X9
b0 W9
b10 V9
b11 U9
b10 T9
b1 S9
b0 R9
b1 Q9
b11 P9
b10 O9
b1 N9
b0 M9
b0 L9
b11 K9
b10 J9
b1 I9
b0 H9
b11 G9
b11 F9
b10 E9
b1 D9
b0 C9
b10 B9
b11 A9
b10 @9
b1 ?9
b0 >9
b1 =9
b11 <9
b10 ;9
b1 :9
b0 99
b0 89
b100 29
b0 |8
b0 {8
b0 z8
b0 y8
b100 x8
b0 s8
b10000 r8
b100 q8
b10000 c8
b100 b8
b0 a8
b100 [8
b0 G8
b0 F8
b0 E8
b0 D8
b100 C8
b0 >8
b1000 =8
b10 <8
b1000 .8
b10 -8
b0 ,8
b0 '8
b100 &8
b1000 %8
b100 u7
b1000 t7
b0 s7
b110010 07
b11011 /7
b1010 .7
b101101 -7
b11011 ,7
b11111111111111 +7
b11000000000000 *7
b10111111111111 )7
b10000000000000 (7
b1111111111111 '7
b1000000000000 &7
b111111111111 %7
b0 $7
b1111 #7
b1 "7
b100 !7
b0 ~6
b1000 }6
b10000 |6
b0 v6
b110011 u6
b0 o6
b11011 n6
b0 h6
b1010 g6
b0 a6
b101110 `6
b0 Z6
b11011 Y6
b11 G6
b100 A6
b0 -6
b0 ,6
b0 +6
b0 *6
b100 )6
b0 $6
b10000 #6
b100 "6
b10000 r5
b100 q5
b0 p5
b100 j5
b0 V5
b0 U5
b0 T5
b0 S5
b100 R5
b0 M5
b1000 L5
b10 K5
b1000 =5
b10 <5
b0 ;5
b0 65
b100 55
b1000 45
b100 &5
b1000 %5
b0 $5
b110010 ?4
b11011 >4
b1010 =4
b101101 <4
b11011 ;4
b11111111111111 :4
b11000000000000 94
b10111111111111 84
b10000000000000 74
b1111111111111 64
b1000000000000 54
b111111111111 44
b0 34
b1111 24
b1 14
b100 04
b0 /4
b1000 .4
b10000 -4
b0 '4
b110011 &4
b0 ~3
b11011 }3
b0 w3
b1010 v3
b0 p3
b101110 o3
b0 i3
b11011 h3
b10 V3
b100 P3
b0 <3
b0 ;3
b0 :3
b0 93
b100 83
b0 33
b10000 23
b100 13
b10000 #3
b100 "3
b0 !3
b100 y2
b0 e2
b0 d2
b0 c2
b0 b2
b100 a2
b0 \2
b1000 [2
b10 Z2
b1000 L2
b10 K2
b0 J2
b0 E2
b100 D2
b1000 C2
b100 52
b1000 42
b0 32
b110010 N1
b11011 M1
b1010 L1
b101101 K1
b11011 J1
b11111111111111 I1
b11000000000000 H1
b10111111111111 G1
b10000000000000 F1
b1111111111111 E1
b1000000000000 D1
b111111111111 C1
b0 B1
b1111 A1
b1 @1
b100 ?1
b0 >1
b1000 =1
b10000 <1
b0 61
b110011 51
b0 /1
b11011 .1
b0 (1
b1010 '1
b0 !1
b101110 ~0
b0 x0
b11011 w0
b1 e0
b100 _0
b0 K0
b0 J0
b0 I0
b0 H0
b100 G0
b0 B0
b10000 A0
b100 @0
b10000 20
b100 10
b0 00
b100 *0
b0 t/
b0 s/
b0 r/
b0 q/
b100 p/
b0 k/
b1000 j/
b10 i/
b1000 [/
b10 Z/
b0 Y/
b0 T/
b100 S/
b1000 R/
b100 D/
b1000 C/
b0 B/
b110010 ].
b11011 \.
b1010 [.
b101101 Z.
b11011 Y.
b11111111111111 X.
b11000000000000 W.
b10111111111111 V.
b10000000000000 U.
b1111111111111 T.
b1000000000000 S.
b111111111111 R.
b0 Q.
b1111 P.
b1 O.
b100 N.
b0 M.
b1000 L.
b10000 K.
b0 E.
b110011 D.
b0 >.
b11011 =.
b0 7.
b1010 6.
b0 0.
b101110 /.
b0 ).
b11011 (.
b0 t-
b110010 t,
b11011 s,
b1010 r,
b101101 q,
b11011 p,
b11111111111111 o,
b11000000000000 n,
b10111111111111 m,
b10000000000000 l,
b1111111111111 k,
b1000000000000 j,
b111111111111 i,
b0 h,
b0 g,
b0 f,
b0 e,
b0 d,
b1000000 c,
b110000 b,
b100000 a,
b10000 `,
b1111111111111111 _,
b1 ^,
b0 ],
b0 \,
b100 [,
b100 Z,
b0 Y,
b101000 X,
b1000 W,
b10000 V,
b0 Q,
b110011 P,
b10 O,
b110011 C,
b10 B,
b0 A,
b0 <,
b11011 ;,
b10 :,
b11011 .,
b10 -,
b0 ,,
b0 ',
b1010 &,
b10 %,
b1010 x+
b10 w+
b0 v+
b0 q+
b101110 p+
b10 o+
b101110 c+
b10 b+
b0 a+
b0 \+
b11011 [+
b10 Z+
b11011 N+
b10 M+
b0 L+
b10 A+
b10 @+
b10 ?+
b10 >+
b10 =+
b0 <+
b110010 u*
b11011 t*
b1010 s*
b101101 r*
b11011 q*
b1 p*
b1 o*
b1 n*
b1 m*
b0 l*
b1 k*
b100 j*
b0 i*
b0 h*
b1 g*
b100 f*
b101000 e*
b1000 d*
b10000 c*
b0 ^*
b110011 ]*
b10 \*
b110011 P*
b10 O*
b0 N*
b0 I*
b11011 H*
b10 G*
b11011 ;*
b10 :*
b0 9*
b0 4*
b1010 3*
b10 2*
b1010 '*
b10 &*
b0 %*
b0 ~)
b101110 })
b10 |)
b101110 p)
b10 o)
b0 n)
b0 i)
b11011 h)
b10 g)
b11011 [)
b10 Z)
b0 Y)
b10 N)
b10 M)
b10 L)
b10 K)
b10 J)
b0 I)
b110010 $)
b11011 #)
b1010 ")
b101101 !)
b11011 ~(
b1 }(
b1 |(
b1 {(
b1 z(
b0 y(
b1 x(
b100 w(
b0 v(
b0 u(
b1 t(
b100 s(
b101000 r(
b1000 q(
b10000 p(
b0 k(
b110011 j(
b10 i(
b110011 ](
b10 \(
b0 [(
b0 V(
b11011 U(
b10 T(
b11011 H(
b10 G(
b0 F(
b0 A(
b1010 @(
b10 ?(
b1010 4(
b10 3(
b0 2(
b0 -(
b101110 ,(
b10 +(
b101110 }'
b10 |'
b0 {'
b0 v'
b11011 u'
b10 t'
b11011 h'
b10 g'
b0 f'
b10 ['
b10 Z'
b10 Y'
b10 X'
b10 W'
b0 V'
b110010 1'
b11011 0'
b1010 /'
b101101 .'
b11011 -'
b1 ,'
b1 +'
b1 *'
b1 )'
b0 ('
b1 ''
b100 &'
b0 %'
b0 $'
b1 #'
b100 "'
b101000 !'
b1000 ~&
b10000 }&
b0 x&
b110011 w&
b10 v&
b110011 j&
b10 i&
b0 h&
b0 c&
b11011 b&
b10 a&
b11011 U&
b10 T&
b0 S&
b0 N&
b1010 M&
b10 L&
b1010 A&
b10 @&
b0 ?&
b0 :&
b101110 9&
b10 8&
b101110 ,&
b10 +&
b0 *&
b0 %&
b11011 $&
b10 #&
b11011 t%
b10 s%
b0 r%
b10 g%
b10 f%
b10 e%
b10 d%
b10 c%
b0 b%
b110010 =%
b11011 <%
b1010 ;%
b101101 :%
b11011 9%
b1 8%
b1 7%
b1 6%
b1 5%
b0 4%
b1 3%
b100 2%
b0 1%
b0 0%
b1 /%
b100 .%
b101000 -%
b1000 ,%
b10000 +%
b1111111111111111 f$
b110010 e$
b11011 d$
b1010 c$
b101101 b$
b11011 a$
b0 `$
b0 _$
b0 ^$
b0 ]$
b0 d"
b1 c"
b100 b"
b11111111111111 a"
b11000000000000 `"
b0 _"
b0 ^"
b1 ]"
b100 \"
b10111111111111 ["
b10000000000000 Z"
b0 Y"
b0 X"
b1 W"
b100 V"
b1111111111111 U"
b1000000000000 T"
b0 S"
b0 R"
b1 Q"
b100 P"
b111111111111 O"
b0 N"
b0 M"
b0 L"
b1000000 K"
b1111 J"
b0 I"
b1 H"
b100 G"
b0 F"
b0 E"
b110000 D"
b1111 C"
b0 B"
b1 A"
b100 @"
b0 ?"
b0 >"
b100000 ="
b1111 <"
b0 ;"
b1 :"
b100 9"
b0 8"
b0 7"
b10000 6"
b1111 5"
b0 4"
b1 3"
b100 2"
b0 1"
b1 0"
b10011100010000 /"
b1 ."
b1 -"
b1 ,"
b1 +"
b0 *"
b0 )"
b1 ("
b0 '"
b0 &"
b100 %"
b100 $"
b101000 #"
b1000 ""
b10000 !"
b0 _
b100 ^
b11111111111111 ]
b11000000000000 \
b0 [
b0 Z
b100 Y
b10111111111111 X
b10000000000000 W
b0 V
b0 U
b100 T
b1111111111111 S
b1000000000000 R
b0 Q
b0 P
b100 O
b111111111111 N
b0 M
b0 L
b0 K
b1000000 J
b1111 I
b0 H
b100 G
b0 F
b0 E
b110000 D
b1111 C
b0 B
b100 A
b0 @
b0 ?
b100000 >
b1111 =
b0 <
b100 ;
b0 :
b0 9
b10000 8
b1111 7
b0 6
b100 5
b0 4
b1 3
b10011100010000 2
b1 1
b1 0
b1 /
b1 .
b0 -
b1 ,
b0 +
b0 *
b100 )
b100 (
b101000 '
b1000 &
b10000 %
0!
0"
0#
0$
0`
1a
0b
0c
1d
0e
xf
b0 g
b0 h
b0 i
xj
b0 k
b0 l
xm
bx n
bx o
xp
xq
xr
bx s
bx t
bx u
xv
xw
xx
xy
bx z
bx {
x|
x}
x~
bx !!
bx "!
bx #!
x$!
x%!
x&!
x'!
bx (!
bx )!
x*!
x+!
x,!
bx -!
bx .!
bx /!
x0!
x1!
x2!
x3!
bx 4!
bx 5!
x6!
x7!
x8!
bx 9!
bx :!
bx ;!
x<!
0=!
x>!
bx ?!
bx @!
bx A!
xB!
xC!
bx D!
b0xxxx E!
xF!
xG!
b0 H!
xI!
bx J!
bx K!
bx L!
xM!
xN!
xO!
bx P!
bx Q!
bx R!
xS!
xT!
bx U!
b0xxxx V!
xW!
xX!
xY!
bx Z!
bx [!
bx \!
x]!
x^!
x_!
bx `!
bx a!
bx b!
xc!
xd!
bx e!
b0xxxx f!
xg!
xh!
xi!
bx j!
bx k!
bx l!
xm!
xn!
xo!
bx p!
bx q!
bx r!
xs!
xt!
bx u!
b0xxxx v!
xw!
xx!
xy!
bx z!
bx {!
bx |!
x}!
x~!
xe"
b0 f"
b0 g"
b0 h"
b0 i"
xj"
xk"
bx l"
bx m"
xn"
xo"
xp"
bx q"
bx r"
bx s"
xt"
xu"
xv"
xw"
xx"
bx y"
bx z"
x{"
x|"
x}"
bx ~"
bx !#
bx "#
x##
x$#
x%#
x&#
x'#
bx (#
bx )#
x*#
x+#
x,#
bx -#
bx .#
bx /#
x0#
x1#
x2#
x3#
x4#
bx 5#
bx 6#
x7#
x8#
x9#
bx :#
bx ;#
bx <#
x=#
x>#
x?#
bx @#
bx A#
bx B#
bx C#
bx D#
bx E#
bx F#
bx G#
bx H#
bx I#
xJ#
xK#
xL#
bx M#
b0xxxx N#
xO#
xP#
xQ#
bx R#
bx S#
bx T#
bx U#
bx V#
bx W#
bx X#
bx Y#
bx Z#
bx [#
x\#
x]#
x^#
bx _#
bx `#
bx a#
bx b#
bx c#
bx d#
bx e#
bx f#
bx g#
bx h#
xi#
xj#
xk#
bx l#
b0xxxx m#
xn#
xo#
xp#
bx q#
bx r#
bx s#
bx t#
bx u#
bx v#
bx w#
bx x#
bx y#
bx z#
x{#
x|#
x}#
bx ~#
bx !$
bx "$
bx #$
bx $$
bx %$
bx &$
bx '$
bx ($
bx )$
x*$
x+$
x,$
bx -$
b0xxxx .$
x/$
x0$
x1$
bx 2$
bx 3$
bx 4$
bx 5$
bx 6$
bx 7$
bx 8$
bx 9$
bx :$
bx ;$
x<$
x=$
x>$
bx ?$
bx @$
bx A$
bx B$
bx C$
bx D$
bx E$
bx F$
bx G$
bx H$
xI$
xJ$
xK$
bx L$
b0xxxx M$
xN$
xO$
xP$
bx Q$
bx R$
bx S$
bx T$
bx U$
bx V$
bx W$
bx X$
bx Y$
bx Z$
x[$
x\$
bx g$
bx h$
bx i$
bx j$
bx k$
bx l$
bx m$
bx n$
bx o$
bx p$
bx q$
bx r$
bx s$
bx t$
bx u$
bx v$
bx w$
bx x$
bx y$
bx z$
bx {$
bx |$
bx }$
bx ~$
bx !%
bx "%
bx #%
bx $%
bx %%
bx &%
bx '%
bx (%
bx )%
bx *%
x>%
x?%
x@%
bx A%
bx B%
xC%
xD%
xE%
bx F%
bx G%
bx H%
xI%
xJ%
xK%
xL%
bx M%
xN%
xO%
xP%
bx Q%
xR%
xS%
bx T%
xU%
xV%
bx W%
xX%
xY%
xZ%
bx [%
b0 \%
b0 ]%
bx ^%
b0 _%
bx `%
1a%
xh%
xi%
xj%
xk%
xl%
xm%
xn%
xo%
xp%
xq%
0u%
b0 v%
xw%
bx x%
xy%
0z%
bx {%
bx |%
x}%
x~%
0!&
bx "&
0&&
bx '&
bx (&
bx )&
b1000000000000000000000000000000000000000000000 -&
x.&
bx /&
x0&
01&
bx 2&
bx 3&
x4&
x5&
06&
bx 7&
0;&
bx <&
bx =&
bx >&
xB&
bx C&
xD&
xE&
bx F&
bx G&
xH&
xI&
0J&
bx K&
xO&
bx P&
bx Q&
bx R&
b0 V&
xW&
bx X&
xY&
0Z&
bx [&
bx \&
x]&
x^&
0_&
bx `&
0d&
bx e&
bx f&
bx g&
bx k&
xl&
bx m&
xn&
xo&
bx p&
bx q&
xr&
xs&
0t&
bx u&
xy&
bx z&
bx {&
bx |&
x2'
x3'
x4'
bx 5'
bx 6'
x7'
x8'
x9'
bx :'
bx ;'
bx <'
x='
x>'
x?'
x@'
bx A'
xB'
xC'
xD'
bx E'
xF'
xG'
bx H'
xI'
xJ'
bx K'
xL'
xM'
xN'
bx O'
b0 P'
b0 Q'
bx R'
b0 S'
bx T'
1U'
x\'
x]'
x^'
x_'
x`'
xa'
xb'
xc'
xd'
xe'
b0 i'
xj'
bx k'
xl'
0m'
bx n'
bx o'
xp'
xq'
0r'
bx s'
0w'
bx x'
bx y'
bx z'
b1000000000000000000000000000000000000000000000 ~'
x!(
bx "(
x#(
0$(
bx %(
bx &(
x'(
x((
0)(
bx *(
0.(
bx /(
bx 0(
bx 1(
x5(
bx 6(
x7(
x8(
bx 9(
bx :(
x;(
x<(
0=(
bx >(
xB(
bx C(
bx D(
bx E(
b0 I(
xJ(
bx K(
xL(
0M(
bx N(
bx O(
xP(
xQ(
0R(
bx S(
0W(
bx X(
bx Y(
bx Z(
bx ^(
x_(
bx `(
xa(
xb(
bx c(
bx d(
xe(
xf(
0g(
bx h(
xl(
bx m(
bx n(
bx o(
x%)
x&)
x')
bx ()
bx ))
x*)
x+)
x,)
bx -)
bx .)
bx /)
x0)
x1)
x2)
x3)
bx 4)
x5)
x6)
x7)
bx 8)
x9)
x:)
bx ;)
x<)
x=)
bx >)
x?)
x@)
xA)
bx B)
b0 C)
b0 D)
bx E)
b0 F)
bx G)
1H)
xO)
xP)
xQ)
xR)
xS)
xT)
xU)
xV)
xW)
xX)
b0 \)
x])
bx ^)
x_)
0`)
bx a)
bx b)
xc)
xd)
0e)
bx f)
0j)
bx k)
bx l)
bx m)
b1000000000000000000000000000000000000000000000 q)
xr)
bx s)
xt)
0u)
bx v)
bx w)
xx)
xy)
0z)
bx {)
0!*
bx "*
bx #*
bx $*
x(*
bx )*
x**
x+*
bx ,*
bx -*
x.*
x/*
00*
bx 1*
x5*
bx 6*
bx 7*
bx 8*
b0 <*
x=*
bx >*
x?*
0@*
bx A*
bx B*
xC*
xD*
0E*
bx F*
0J*
bx K*
bx L*
bx M*
bx Q*
xR*
bx S*
xT*
xU*
bx V*
bx W*
xX*
xY*
0Z*
bx [*
x_*
bx `*
bx a*
bx b*
xv*
xw*
xx*
bx y*
bx z*
x{*
x|*
x}*
bx ~*
bx !+
bx "+
x#+
x$+
x%+
x&+
bx '+
x(+
x)+
x*+
bx ++
x,+
x-+
bx .+
x/+
x0+
bx 1+
x2+
x3+
x4+
bx 5+
b0 6+
b0 7+
bx 8+
b0 9+
bx :+
1;+
xB+
xC+
xD+
xE+
xF+
xG+
xH+
xI+
xJ+
xK+
b0 O+
xP+
bx Q+
xR+
0S+
bx T+
bx U+
xV+
xW+
0X+
bx Y+
0]+
bx ^+
bx _+
bx `+
b1000000000000000000000000000000000000000000000 d+
xe+
bx f+
xg+
0h+
bx i+
bx j+
xk+
xl+
0m+
bx n+
0r+
bx s+
bx t+
bx u+
xy+
bx z+
x{+
x|+
bx }+
bx ~+
x!,
x",
0#,
bx $,
x(,
bx ),
bx *,
bx +,
b0 /,
x0,
bx 1,
x2,
03,
bx 4,
bx 5,
x6,
x7,
08,
bx 9,
0=,
bx >,
bx ?,
bx @,
bx D,
xE,
bx F,
xG,
xH,
bx I,
bx J,
xK,
xL,
0M,
bx N,
xR,
bx S,
bx T,
bx U,
xu,
xv,
xw,
xx,
bx y,
bx z,
x{,
x|,
x},
x~,
bx !-
bx "-
bx #-
bx $-
x%-
x&-
x'-
x(-
bx )-
x*-
x+-
x,-
x--
bx .-
bx /-
bx 0-
x1-
x2-
x3-
x4-
bx 5-
bx 6-
bx 7-
x8-
x9-
x:-
x;-
bx <-
bx =-
x>-
x?-
x@-
xA-
bx B-
bx C-
xD-
xE-
xF-
xG-
bx H-
bx I-
bx J-
xK-
xL-
xM-
xN-
bx O-
xP-
xQ-
xR-
xS-
bx T-
bx U-
bx V-
bx W-
bx X-
bx Y-
bx Z-
bx [-
bx \-
bx ]-
bx ^-
bx _-
bx `-
bx a-
bx b-
bx c-
bx d-
bx e-
bx f-
bx g-
bx h-
bx i-
bx j-
bx k-
bx l-
bx m-
bx n-
bx o-
bx p-
bx q-
bx r-
bx s-
xu-
xv-
bx w-
xx-
xy-
xz-
bx {-
x|-
x}-
bx ~-
x!.
x".
bx #.
x$.
x%.
x&.
bx '.
x*.
bx +.
x,.
x-.
bx ..
x1.
bx 2.
x3.
x4.
bx 5.
x8.
x9.
bx :.
x;.
bx <.
x?.
bx @.
xA.
xB.
bx C.
xF.
xG.
bx H.
xI.
bx J.
x^.
x_.
bx `.
xa.
xb.
xc.
bx d.
xe.
xf.
bx g.
xh.
xi.
bx j.
xk.
xl.
xm.
bx n.
bx o.
bx p.
bx q.
bx r.
bx s.
bx t.
bx u.
bx v.
bx w.
bx x.
bx y.
bx z.
bx {.
bx |.
bx }.
bx ~.
bx !/
x"/
x#/
bx $/
bx %/
bx &/
x'/
bx (/
bx )/
x*/
bx +/
bx ,/
b0 -/
b111111111111 ./
b1000000000000 //
b1111111111111 0/
b10000000000000 1/
b10111111111111 2/
b11000000000000 3/
b11111111111111 4/
x5/
x6/
x7/
x8/
bx 9/
x:/
x;/
b0xxxxxxxx </
bx =/
bx >/
bx ?/
x@/
b1111 A/
bx E/
xF/
xG/
bx H/
xI/
xJ/
xK/
bx L/
bx M/
xN/
xO/
0P/
bx Q/
xU/
bx V/
bx W/
bx X/
bx \/
x]/
x^/
bx _/
x`/
xa/
xb/
bx c/
bx d/
xe/
xf/
0g/
bx h/
xl/
bx m/
bx n/
bx o/
xu/
bx v/
bx w/
xx/
0y/
0z/
0{/
bx |/
b0 }/
b0 ~/
b0 !0
bx "0
b0 #0
b0 $0
b0 %0
0&0
0'0
0(0
0)0
x+0
bx ,0
bx -0
bx .0
bx /0
b0xxxxxxxx 30
x40
x50
bx 60
x70
x80
x90
bx :0
bx ;0
x<0
x=0
0>0
bx ?0
xC0
bx D0
bx E0
bx F0
xL0
bx M0
bx N0
xO0
0P0
0Q0
0R0
bx S0
b0 T0
b0 U0
b0 V0
bx W0
b0 X0
b0 Y0
b0 Z0
0[0
0\0
0]0
0^0
x`0
bx a0
bx b0
bx c0
bx d0
xf0
xg0
bx h0
xi0
xj0
xk0
bx l0
xm0
xn0
bx o0
xp0
xq0
bx r0
xs0
xt0
xu0
bx v0
xy0
bx z0
x{0
x|0
bx }0
x"1
bx #1
x$1
x%1
bx &1
x)1
x*1
bx +1
x,1
bx -1
x01
bx 11
x21
x31
bx 41
x71
x81
bx 91
x:1
bx ;1
xO1
xP1
bx Q1
xR1
xS1
xT1
bx U1
xV1
xW1
bx X1
xY1
xZ1
bx [1
x\1
x]1
x^1
bx _1
bx `1
bx a1
bx b1
bx c1
bx d1
bx e1
bx f1
bx g1
bx h1
bx i1
bx j1
bx k1
bx l1
bx m1
bx n1
bx o1
bx p1
xq1
xr1
bx s1
bx t1
bx u1
xv1
bx w1
bx x1
xy1
bx z1
bx {1
b0 |1
b111111111111 }1
b1000000000000 ~1
b1111111111111 !2
b10000000000000 "2
b10111111111111 #2
b11000000000000 $2
b11111111111111 %2
x&2
x'2
x(2
x)2
bx *2
x+2
x,2
b0xxxxxxxx -2
bx .2
bx /2
bx 02
x12
b1111 22
bx 62
x72
x82
bx 92
x:2
x;2
x<2
bx =2
bx >2
x?2
x@2
0A2
bx B2
xF2
bx G2
bx H2
bx I2
bx M2
xN2
xO2
bx P2
xQ2
xR2
xS2
bx T2
bx U2
xV2
xW2
0X2
bx Y2
x]2
bx ^2
bx _2
bx `2
xf2
bx g2
bx h2
xi2
0j2
0k2
0l2
bx m2
b0 n2
b0 o2
b0 p2
bx q2
b0 r2
b0 s2
b0 t2
0u2
0v2
0w2
0x2
xz2
bx {2
bx |2
bx }2
bx ~2
b0xxxxxxxx $3
x%3
x&3
bx '3
x(3
x)3
x*3
bx +3
bx ,3
x-3
x.3
0/3
bx 03
x43
bx 53
bx 63
bx 73
x=3
bx >3
bx ?3
x@3
0A3
0B3
0C3
bx D3
b0 E3
b0 F3
b0 G3
bx H3
b0 I3
b0 J3
b0 K3
0L3
0M3
0N3
0O3
xQ3
bx R3
bx S3
bx T3
bx U3
xW3
xX3
bx Y3
xZ3
x[3
x\3
bx ]3
x^3
x_3
bx `3
xa3
xb3
bx c3
xd3
xe3
xf3
bx g3
xj3
bx k3
xl3
xm3
bx n3
xq3
bx r3
xs3
xt3
bx u3
xx3
xy3
bx z3
x{3
bx |3
x!4
bx "4
x#4
x$4
bx %4
x(4
x)4
bx *4
x+4
bx ,4
x@4
xA4
bx B4
xC4
xD4
xE4
bx F4
xG4
xH4
bx I4
xJ4
xK4
bx L4
xM4
xN4
xO4
bx P4
bx Q4
bx R4
bx S4
bx T4
bx U4
bx V4
bx W4
bx X4
bx Y4
bx Z4
bx [4
bx \4
bx ]4
bx ^4
bx _4
bx `4
bx a4
xb4
xc4
bx d4
bx e4
bx f4
xg4
bx h4
bx i4
xj4
bx k4
bx l4
b0 m4
b111111111111 n4
b1000000000000 o4
b1111111111111 p4
b10000000000000 q4
b10111111111111 r4
b11000000000000 s4
b11111111111111 t4
xu4
xv4
xw4
xx4
bx y4
xz4
x{4
b0xxxxxxxx |4
bx }4
bx ~4
bx !5
x"5
b1111 #5
bx '5
x(5
x)5
bx *5
x+5
x,5
x-5
bx .5
bx /5
x05
x15
025
bx 35
x75
bx 85
bx 95
bx :5
bx >5
x?5
x@5
bx A5
xB5
xC5
xD5
bx E5
bx F5
xG5
xH5
0I5
bx J5
xN5
bx O5
bx P5
bx Q5
xW5
bx X5
bx Y5
xZ5
0[5
0\5
0]5
bx ^5
b0 _5
b0 `5
b0 a5
bx b5
b0 c5
b0 d5
b0 e5
0f5
0g5
0h5
0i5
xk5
bx l5
bx m5
bx n5
bx o5
b0xxxxxxxx s5
xt5
xu5
bx v5
xw5
xx5
xy5
bx z5
bx {5
x|5
x}5
0~5
bx !6
x%6
bx &6
bx '6
bx (6
x.6
bx /6
bx 06
x16
026
036
046
bx 56
b0 66
b0 76
b0 86
bx 96
b0 :6
b0 ;6
b0 <6
0=6
0>6
0?6
0@6
xB6
bx C6
bx D6
bx E6
bx F6
xH6
xI6
bx J6
xK6
xL6
xM6
bx N6
xO6
xP6
bx Q6
xR6
xS6
bx T6
xU6
xV6
xW6
bx X6
x[6
bx \6
x]6
x^6
bx _6
xb6
bx c6
xd6
xe6
bx f6
xi6
xj6
bx k6
xl6
bx m6
xp6
bx q6
xr6
xs6
bx t6
xw6
xx6
bx y6
xz6
bx {6
x17
x27
bx 37
x47
x57
x67
bx 77
x87
x97
bx :7
x;7
x<7
bx =7
x>7
x?7
x@7
bx A7
bx B7
bx C7
bx D7
bx E7
bx F7
bx G7
bx H7
bx I7
bx J7
bx K7
bx L7
bx M7
bx N7
bx O7
bx P7
bx Q7
bx R7
xS7
xT7
bx U7
bx V7
bx W7
xX7
bx Y7
bx Z7
x[7
bx \7
bx ]7
b0 ^7
b111111111111 _7
b1000000000000 `7
b1111111111111 a7
b10000000000000 b7
b10111111111111 c7
b11000000000000 d7
b11111111111111 e7
xf7
xg7
xh7
xi7
bx j7
xk7
xl7
b0xxxxxxxx m7
bx n7
bx o7
bx p7
xq7
b1111 r7
bx v7
xw7
xx7
bx y7
xz7
x{7
x|7
bx }7
bx ~7
x!8
x"8
0#8
bx $8
x(8
bx )8
bx *8
bx +8
bx /8
x08
x18
bx 28
x38
x48
x58
bx 68
bx 78
x88
x98
0:8
bx ;8
x?8
bx @8
bx A8
bx B8
xH8
bx I8
bx J8
xK8
0L8
0M8
0N8
bx O8
b0 P8
b0 Q8
b0 R8
bx S8
b0 T8
b0 U8
b0 V8
0W8
0X8
0Y8
0Z8
x\8
bx ]8
bx ^8
bx _8
bx `8
b0xxxxxxxx d8
xe8
xf8
bx g8
xh8
xi8
xj8
bx k8
bx l8
xm8
xn8
0o8
bx p8
xt8
bx u8
bx v8
bx w8
x}8
bx ~8
bx !9
x"9
0#9
0$9
0%9
bx &9
b0 '9
b0 (9
b0 )9
bx *9
b0 +9
b0 ,9
b0 -9
0.9
0/9
009
019
x39
bx 49
bx 59
bx 69
bx 79
xa9
xb9
bx c9
xd9
xe9
xf9
bx g9
xh9
xi9
bx j9
xk9
xl9
bx m9
xn9
xo9
xp9
bx q9
bx %:
bx &:
bx ':
bx (:
bx ):
bx *:
bx +:
bx ,:
bx -:
bx .:
bx /:
bx 0:
bx 1:
bx 2:
bx 3:
bx 4:
bx 5:
x6:
x7:
bx 8:
x9:
x::
x;:
bx <:
x=:
x>:
bx ?:
x@:
xA:
bx B:
xC:
xD:
xE:
bx F:
xG:
bx H:
bx I:
bx J:
xK:
bx L:
bx M:
xN:
xO:
xP:
xQ:
xR:
xS:
xT:
xU:
xV:
xW:
x]:
bx ^:
bx _:
x`:
0a:
0b:
0c:
bx d:
b0 e:
b0 f:
b0 g:
bx h:
b0 i:
b0 j:
b0 k:
0l:
0m:
0n:
0o:
xq:
bx r:
bx s:
bx t:
bx u:
bx y:
xz:
x{:
bx |:
x}:
x~:
x!;
bx ";
bx #;
x$;
x%;
0&;
bx ';
x+;
bx ,;
bx -;
bx .;
x4;
bx 5;
bx 6;
x7;
08;
09;
0:;
bx ;;
b0 <;
b0 =;
b0 >;
bx ?;
b0 @;
b0 A;
b0 B;
0C;
0D;
0E;
0F;
xH;
bx I;
bx J;
bx K;
bx L;
xO;
xP;
bx Q;
xR;
bx S;
xV;
xW;
bx X;
xY;
bx Z;
x];
bx ^;
x_;
x`;
bx a;
xd;
xe;
bx f;
xg;
bx h;
xk;
bx l;
xm;
xn;
bx o;
xq;
xr;
bx s;
xt;
xu;
xv;
bx w;
xx;
xy;
bx z;
x{;
x|;
bx };
x~;
x!<
x"<
bx #<
bx 5<
bx 6<
bx 7<
bx 8<
bx 9<
bx :<
bx ;<
bx <<
bx =<
bx ><
bx ?<
bx @<
bx A<
bx B<
bx C<
bx D<
bx E<
xF<
xG<
bx H<
xI<
xJ<
xK<
bx L<
xM<
xN<
bx O<
xP<
xQ<
bx R<
xS<
xT<
xU<
bx V<
xW<
bx X<
bx Y<
bx Z<
x[<
bx \<
bx ]<
x^<
x_<
x`<
xa<
xb<
xc<
xd<
xe<
xf<
xg<
xm<
bx n<
bx o<
xp<
0q<
0r<
0s<
bx t<
b0 u<
b0 v<
b0 w<
bx x<
b0 y<
b0 z<
b0 {<
0|<
0}<
0~<
0!=
x#=
bx $=
bx %=
bx &=
bx '=
bx +=
x,=
x-=
bx .=
x/=
x0=
x1=
bx 2=
bx 3=
x4=
x5=
06=
bx 7=
x;=
bx <=
bx ==
bx >=
xD=
bx E=
bx F=
xG=
0H=
0I=
0J=
bx K=
b0 L=
b0 M=
b0 N=
bx O=
b0 P=
b0 Q=
b0 R=
0S=
0T=
0U=
0V=
xX=
bx Y=
bx Z=
bx [=
bx \=
x_=
x`=
bx a=
xb=
bx c=
xf=
xg=
bx h=
xi=
bx j=
xm=
bx n=
xo=
xp=
bx q=
xt=
xu=
bx v=
xw=
bx x=
x{=
bx |=
x}=
x~=
bx !>
x#>
x$>
bx %>
x&>
x'>
x(>
bx )>
x*>
x+>
bx ,>
x->
x.>
bx />
x0>
x1>
x2>
bx 3>
bx E>
bx F>
bx G>
bx H>
bx I>
bx J>
bx K>
bx L>
bx M>
bx N>
bx O>
bx P>
bx Q>
bx R>
bx S>
bx T>
bx U>
xV>
xW>
bx X>
xY>
xZ>
x[>
bx \>
x]>
x^>
bx _>
x`>
xa>
bx b>
xc>
xd>
xe>
bx f>
xg>
bx h>
bx i>
bx j>
xk>
bx l>
bx m>
xn>
xo>
xp>
xq>
xr>
xs>
xt>
xu>
xv>
xw>
x}>
bx ~>
bx !?
x"?
0#?
0$?
0%?
bx &?
b0 '?
b0 (?
b0 )?
bx *?
b0 +?
b0 ,?
b0 -?
0.?
0/?
00?
01?
x3?
bx 4?
bx 5?
bx 6?
bx 7?
bx ;?
x<?
x=?
bx >?
x??
x@?
xA?
bx B?
bx C?
xD?
xE?
0F?
bx G?
xK?
bx L?
bx M?
bx N?
xT?
bx U?
bx V?
xW?
0X?
0Y?
0Z?
bx [?
b0 \?
b0 ]?
b0 ^?
bx _?
b0 `?
b0 a?
b0 b?
0c?
0d?
0e?
0f?
xh?
bx i?
bx j?
bx k?
bx l?
xo?
xp?
bx q?
xr?
bx s?
xv?
xw?
bx x?
xy?
bx z?
x}?
bx ~?
x!@
x"@
bx #@
x&@
x'@
bx (@
x)@
bx *@
x-@
bx .@
x/@
x0@
bx 1@
x3@
x4@
bx 5@
x6@
x7@
x8@
bx 9@
x:@
x;@
bx <@
x=@
x>@
bx ?@
x@@
xA@
xB@
bx C@
bx U@
bx V@
bx W@
bx X@
bx Y@
bx Z@
bx [@
bx \@
bx ]@
bx ^@
bx _@
bx `@
bx a@
bx b@
bx c@
bx d@
bx e@
xf@
xg@
bx h@
xi@
xj@
xk@
bx l@
xm@
xn@
bx o@
xp@
xq@
bx r@
xs@
xt@
xu@
bx v@
xw@
bx x@
bx y@
bx z@
x{@
bx |@
bx }@
x~@
x!A
x"A
x#A
x$A
x%A
x&A
x'A
x(A
x)A
x/A
bx 0A
bx 1A
x2A
03A
04A
05A
bx 6A
b0 7A
b0 8A
b0 9A
bx :A
b0 ;A
b0 <A
b0 =A
0>A
0?A
0@A
0AA
xCA
bx DA
bx EA
bx FA
bx GA
bx KA
xLA
xMA
bx NA
xOA
xPA
xQA
bx RA
bx SA
xTA
xUA
0VA
bx WA
x[A
bx \A
bx ]A
bx ^A
xdA
bx eA
bx fA
xgA
0hA
0iA
0jA
bx kA
b0 lA
b0 mA
b0 nA
bx oA
b0 pA
b0 qA
b0 rA
0sA
0tA
0uA
0vA
xxA
bx yA
bx zA
bx {A
bx |A
x!B
x"B
bx #B
x$B
bx %B
x(B
x)B
bx *B
x+B
bx ,B
x/B
bx 0B
x1B
x2B
bx 3B
x6B
x7B
bx 8B
x9B
bx :B
x=B
bx >B
x?B
x@B
bx AB
xVB
xWB
bx XB
xYB
xZB
x[B
bx \B
x]B
x^B
bx _B
x`B
xaB
bx bB
xcB
xdB
xeB
bx fB
xgB
bx hB
bx iB
bx jB
bx kB
bx lB
bx mB
bx nB
bx oB
bx pB
bx qB
xrB
xsB
xtB
bx uB
b0xxxx vB
xwB
xxB
xyB
bx zB
bx {B
bx |B
bx }B
bx ~B
bx !C
bx "C
bx #C
bx $C
bx %C
x&C
x'C
bx (C
bx )C
b0 *C
bx +C
b0 ,C
1-C
bx .C
bx /C
x0C
x1C
x2C
x3C
x4C
x5C
x6C
x7C
x8C
x9C
x:C
x;C
x<C
x=C
x>C
x?C
x@C
xAC
xBC
xCC
xDC
xEC
xFC
xGC
xHC
xIC
xJC
xKC
xLC
xMC
xNC
xOC
xPC
xQC
xRC
xSC
xTC
xUC
xVC
xWC
xXC
xYC
bx ZC
xaC
xbC
xcC
xdC
xeC
xfC
xgC
xhC
xiC
xjC
xnC
bx oC
xpC
xqC
bx rC
bx sC
xtC
xuC
0vC
bx wC
x{C
bx |C
bx }C
bx ~C
bx $D
x%D
bx &D
x'D
x(D
bx )D
bx *D
x+D
x,D
0-D
bx .D
x2D
bx 3D
bx 4D
bx 5D
b0 9D
x:D
bx ;D
x<D
0=D
bx >D
bx ?D
x@D
xAD
0BD
bx CD
0GD
bx HD
bx ID
bx JD
xND
bx OD
xPD
xQD
bx RD
bx SD
xTD
xUD
0VD
bx WD
x[D
bx \D
bx ]D
bx ^D
b100000000000000000000000000000000000000000000000000 bD
xcD
bx dD
xeD
0fD
bx gD
bx hD
xiD
xjD
0kD
bx lD
0pD
bx qD
bx rD
bx sD
xtD
xuD
xvD
bx wD
bx xD
bx yD
bx zD
x1E
x2E
bx 3E
x4E
x5E
x6E
bx 7E
x8E
x9E
bx :E
x;E
x<E
bx =E
x>E
x?E
x@E
bx AE
xBE
bx CE
bx DE
bx EE
bx FE
bx GE
bx HE
bx IE
bx JE
bx KE
bx LE
xME
xNE
xOE
bx PE
b0xxxx QE
xRE
xSE
xTE
bx UE
bx VE
bx WE
bx XE
bx YE
bx ZE
bx [E
bx \E
bx ]E
bx ^E
x_E
x`E
bx aE
bx bE
b0 cE
bx dE
b0 eE
1fE
bx gE
bx hE
xiE
xjE
xkE
xlE
xmE
xnE
xoE
xpE
xqE
xrE
xsE
xtE
xuE
xvE
xwE
xxE
xyE
xzE
x{E
x|E
x}E
x~E
x!F
x"F
x#F
x$F
x%F
x&F
x'F
x(F
x)F
x*F
x+F
x,F
x-F
x.F
x/F
x0F
x1F
x2F
x3F
x4F
bx 5F
x<F
x=F
x>F
x?F
x@F
xAF
xBF
xCF
xDF
xEF
xIF
bx JF
xKF
xLF
bx MF
bx NF
xOF
xPF
0QF
bx RF
xVF
bx WF
bx XF
bx YF
bx ]F
x^F
bx _F
x`F
xaF
bx bF
bx cF
xdF
xeF
0fF
bx gF
xkF
bx lF
bx mF
bx nF
b0 rF
xsF
bx tF
xuF
0vF
bx wF
bx xF
xyF
xzF
0{F
bx |F
0"G
bx #G
bx $G
bx %G
x)G
bx *G
x+G
x,G
bx -G
bx .G
x/G
x0G
01G
bx 2G
x6G
bx 7G
bx 8G
bx 9G
b100000000000000000000000000000000000000000000000000 =G
x>G
bx ?G
x@G
0AG
bx BG
bx CG
xDG
xEG
0FG
bx GG
0KG
bx LG
bx MG
bx NG
xOG
xPG
xQG
bx RG
bx SG
bx TG
bx UG
xjG
xkG
bx lG
xmG
xnG
xoG
bx pG
xqG
xrG
bx sG
xtG
xuG
bx vG
xwG
xxG
xyG
bx zG
x{G
bx |G
bx }G
bx ~G
bx !H
bx "H
bx #H
bx $H
bx %H
bx &H
bx 'H
x(H
x)H
x*H
bx +H
b0xxxx ,H
x-H
x.H
x/H
bx 0H
bx 1H
bx 2H
bx 3H
bx 4H
bx 5H
bx 6H
bx 7H
bx 8H
bx 9H
x:H
x;H
bx <H
bx =H
b0 >H
bx ?H
b0 @H
1AH
bx BH
bx CH
xDH
xEH
xFH
xGH
xHH
xIH
xJH
xKH
xLH
xMH
xNH
xOH
xPH
xQH
xRH
xSH
xTH
xUH
xVH
xWH
xXH
xYH
xZH
x[H
x\H
x]H
x^H
x_H
x`H
xaH
xbH
xcH
xdH
xeH
xfH
xgH
xhH
xiH
xjH
xkH
xlH
xmH
bx nH
xuH
xvH
xwH
xxH
xyH
xzH
x{H
x|H
x}H
x~H
x$I
bx %I
x&I
x'I
bx (I
bx )I
x*I
x+I
0,I
bx -I
x1I
bx 2I
bx 3I
bx 4I
bx 8I
x9I
bx :I
x;I
x<I
bx =I
bx >I
x?I
x@I
0AI
bx BI
xFI
bx GI
bx HI
bx II
b0 MI
xNI
bx OI
xPI
0QI
bx RI
bx SI
xTI
xUI
0VI
bx WI
0[I
bx \I
bx ]I
bx ^I
xbI
bx cI
xdI
xeI
bx fI
bx gI
xhI
xiI
0jI
bx kI
xoI
bx pI
bx qI
bx rI
b100000000000000000000000000000000000000000000000000 vI
xwI
bx xI
xyI
0zI
bx {I
bx |I
x}I
x~I
0!J
bx "J
0&J
bx 'J
bx (J
bx )J
x*J
x+J
x,J
bx -J
bx .J
bx /J
bx 0J
xEJ
xFJ
bx GJ
xHJ
xIJ
xJJ
bx KJ
xLJ
xMJ
bx NJ
xOJ
xPJ
bx QJ
xRJ
xSJ
xTJ
bx UJ
xVJ
bx WJ
bx XJ
bx YJ
bx ZJ
bx [J
bx \J
bx ]J
bx ^J
bx _J
bx `J
xaJ
xbJ
xcJ
bx dJ
b0xxxx eJ
xfJ
xgJ
xhJ
bx iJ
bx jJ
bx kJ
bx lJ
bx mJ
bx nJ
bx oJ
bx pJ
bx qJ
bx rJ
xsJ
xtJ
bx uJ
bx vJ
b0 wJ
bx xJ
b0 yJ
1zJ
bx {J
bx |J
x}J
x~J
x!K
x"K
x#K
x$K
x%K
x&K
x'K
x(K
x)K
x*K
x+K
x,K
x-K
x.K
x/K
x0K
x1K
x2K
x3K
x4K
x5K
x6K
x7K
x8K
x9K
x:K
x;K
x<K
x=K
x>K
x?K
x@K
xAK
xBK
xCK
xDK
xEK
xFK
xGK
xHK
bx IK
xPK
xQK
xRK
xSK
xTK
xUK
xVK
xWK
xXK
xYK
x]K
bx ^K
x_K
x`K
bx aK
bx bK
xcK
xdK
0eK
bx fK
xjK
bx kK
bx lK
bx mK
bx qK
xrK
bx sK
xtK
xuK
bx vK
bx wK
xxK
xyK
0zK
bx {K
x!L
bx "L
bx #L
bx $L
b0 (L
x)L
bx *L
x+L
0,L
bx -L
bx .L
x/L
x0L
01L
bx 2L
06L
bx 7L
bx 8L
bx 9L
x=L
bx >L
x?L
x@L
bx AL
bx BL
xCL
xDL
0EL
bx FL
xJL
bx KL
bx LL
bx ML
b100000000000000000000000000000000000000000000000000 QL
xRL
bx SL
xTL
0UL
bx VL
bx WL
xXL
xYL
0ZL
bx [L
0_L
bx `L
bx aL
bx bL
xcL
xdL
xeL
bx fL
bx gL
bx hL
bx iL
$end
#50
1!
1`
#150
1"
1c
0uD
0PG
0+J
0dL
#350
1#
1=!
#750
1$
#800
0!
0`
#900
0"
0c
#1100
0#
0=!
#1500
0$
#1550
1!
1`
#1650
1"
1c
#1850
1#
1=!
#2250
1$
#2300
0!
0`
#2400
0"
0c
#2600
0#
0=!
#3000
0$
#3050
1!
1`
#3150
1"
1c
#3350
1#
1=!
#3750
1$
#3800
0!
0`
#3900
0"
0c
#4100
0#
0=!
#4500
0$
#4550
1!
1`
#4650
1"
1c
#4850
1#
1=!
#5250
1$
#5300
0!
0`
#5400
0"
0c
#5600
0#
0=!
#6000
0$
#6050
1!
1`
#6150
1"
1c
#6350
1#
1=!
#6750
1$
#6800
0!
0`
#6900
0"
0c
#7100
0#
0=!
#7500
0$
#7550
1!
1`
#7650
1"
1c
#7850
1#
1=!
#8250
1$
#8300
0!
0`
#8400
0"
0c
#8600
0#
0=!
#9000
0$
#9050
1!
1`
#9150
1"
1c
#9350
1#
1=!
#9750
1$
#9800
0!
0`
#9900
0"
0c
#10000

$date
    Apr 15, 2024  20:42:10
$end
$version
    TOOL:	ncsim(64)	15.20-s073
$end
$timescale
    1 ns
$end

$scope module testbench $end

$scope module axicb_crossbar_top $end
$var parameter 32 !    AXI_ADDR_W  $end
$var parameter 32 "    AXI_ID_W  $end
$var parameter 32 #    AXI_DATA_W  $end
$var parameter 32 $    MST_NB  $end
$var parameter 32 %    SLV_NB  $end
$var parameter 32 &    MST_PIPELINE  $end
$var parameter 32 '    SLV_PIPELINE  $end
$var parameter 32 (    STRB_MODE  $end
$var parameter 32 )    AXI_SIGNALING  $end
$var parameter 32 *    USER_SUPPORT  $end
$var parameter 32 +    AXI_AUSER_W  $end
$var parameter 32 ,    AXI_WUSER_W  $end
$var parameter 32 -    AXI_BUSER_W  $end
$var parameter 32 .    AXI_RUSER_W  $end
$var parameter 32 /    TIMEOUT_VALUE  $end
$var parameter 32 0    TIMEOUT_ENABLE  $end
$var parameter 32 1    MST0_CDC  $end
$var parameter 32 2    MST0_OSTDREQ_NUM  $end
$var parameter 32 3    MST0_OSTDREQ_SIZE  $end
$var parameter 32 4    MST0_PRIORITY  $end
$var parameter  4 5    MST0_ROUTES [3:0] $end
$var parameter  8 6    MST0_ID_MASK [7:0] $end
$var parameter 32 7    MST0_RW  $end
$var parameter 32 8    MST1_CDC  $end
$var parameter 32 9    MST1_OSTDREQ_NUM  $end
$var parameter 32 :    MST1_OSTDREQ_SIZE  $end
$var parameter 32 ;    MST1_PRIORITY  $end
$var parameter  4 <    MST1_ROUTES [3:0] $end
$var parameter  8 =    MST1_ID_MASK [7:0] $end
$var parameter 32 >    MST1_RW  $end
$var parameter 32 ?    MST2_CDC  $end
$var parameter 32 @    MST2_OSTDREQ_NUM  $end
$var parameter 32 A    MST2_OSTDREQ_SIZE  $end
$var parameter 32 B    MST2_PRIORITY  $end
$var parameter  4 C    MST2_ROUTES [3:0] $end
$var parameter  8 D    MST2_ID_MASK [7:0] $end
$var parameter 32 E    MST2_RW  $end
$var parameter 32 F    MST3_CDC  $end
$var parameter 32 G    MST3_OSTDREQ_NUM  $end
$var parameter 32 H    MST3_OSTDREQ_SIZE  $end
$var parameter 32 I    MST3_PRIORITY  $end
$var parameter  4 J    MST3_ROUTES [3:0] $end
$var parameter  8 K    MST3_ID_MASK [7:0] $end
$var parameter 32 L    MST3_RW  $end
$var parameter 32 M    SLV0_CDC  $end
$var parameter 32 N    SLV0_START_ADDR  $end
$var parameter 32 O    SLV0_END_ADDR  $end
$var parameter 32 P    SLV0_OSTDREQ_NUM  $end
$var parameter 32 Q    SLV0_OSTDREQ_SIZE  $end
$var parameter 32 R    SLV0_KEEP_BASE_ADDR  $end
$var parameter 32 S    SLV1_CDC  $end
$var parameter 32 T    SLV1_START_ADDR  $end
$var parameter 32 U    SLV1_END_ADDR  $end
$var parameter 32 V    SLV1_OSTDREQ_NUM  $end
$var parameter 32 W    SLV1_OSTDREQ_SIZE  $end
$var parameter 32 X    SLV1_KEEP_BASE_ADDR  $end
$var parameter 32 Y    SLV2_CDC  $end
$var parameter 32 Z    SLV2_START_ADDR  $end
$var parameter 32 [    SLV2_END_ADDR  $end
$var parameter 32 \    SLV2_OSTDREQ_NUM  $end
$var parameter 32 ]    SLV2_OSTDREQ_SIZE  $end
$var parameter 32 ^    SLV2_KEEP_BASE_ADDR  $end
$var parameter 32 _    SLV3_CDC  $end
$var parameter 32 `    SLV3_START_ADDR  $end
$var parameter 32 a    SLV3_END_ADDR  $end
$var parameter 32 b    SLV3_OSTDREQ_NUM  $end
$var parameter 32 c    SLV3_OSTDREQ_SIZE  $end
$var parameter 32 d    SLV3_KEEP_BASE_ADDR  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 h    slv0_aclk  $end
$var wire      1 i    slv0_aresetn  $end
$var wire      1 h    slv0_srst  $end
$var wire      1 h    slv0_awvalid  $end
$var reg       1 j    slv0_awready  $end
$var wire     16 k    slv0_awaddr [15:0] $end
$var wire      8 l    slv0_awlen [7:0] $end
$var wire      3 m    slv0_awsize [2:0] $end
$var wire      2 n    slv0_awburst [1:0] $end
$var wire      2 n    slv0_awlock [1:0] $end
$var wire      4 o    slv0_awcache [3:0] $end
$var wire      3 m    slv0_awprot [2:0] $end
$var wire      4 o    slv0_awqos [3:0] $end
$var wire      4 o    slv0_awregion [3:0] $end
$var wire      8 l    slv0_awid [7:0] $end
$var wire      1 h    slv0_awuser [0] $end
$var wire      1 h    slv0_wvalid  $end
$var reg       1 p    slv0_wready  $end
$var wire      1 h    slv0_wlast  $end
$var wire     40 q    slv0_wdata [39:0] $end
$var wire      5 r    slv0_wstrb [4:0] $end
$var wire      1 h    slv0_wuser [0] $end
$var reg       1 s    slv0_bvalid  $end
$var wire      1 h    slv0_bready  $end
$var reg       8 t    slv0_bid [7:0] $end
$var reg       2 u    slv0_bresp [1:0] $end
$var reg       1 v    slv0_buser [0:0] $end
$var wire      1 h    slv0_arvalid  $end
$var reg       1 w    slv0_arready  $end
$var wire     16 x    slv0_araddr [15:0] $end
$var wire      8 l    slv0_arlen [7:0] $end
$var wire      3 m    slv0_arsize [2:0] $end
$var wire      2 n    slv0_arburst [1:0] $end
$var wire      2 n    slv0_arlock [1:0] $end
$var wire      4 o    slv0_arcache [3:0] $end
$var wire      3 m    slv0_arprot [2:0] $end
$var wire      4 o    slv0_arqos [3:0] $end
$var wire      4 o    slv0_arregion [3:0] $end
$var wire      8 l    slv0_arid [7:0] $end
$var wire      1 h    slv0_aruser [0] $end
$var reg       1 y    slv0_rvalid  $end
$var wire      1 h    slv0_rready  $end
$var reg       8 z    slv0_rid [7:0] $end
$var reg       2 {    slv0_rresp [1:0] $end
$var reg      40 |    slv0_rdata [39:0] $end
$var reg       1 }    slv0_rlast  $end
$var reg       1 ~    slv0_ruser [0:0] $end
$var wire      1 h    slv1_aclk  $end
$var wire      1 i    slv1_aresetn  $end
$var wire      1 h    slv1_srst  $end
$var wire      1 h    slv1_awvalid  $end
$var reg       1 !!   slv1_awready  $end
$var wire     16 k    slv1_awaddr [15:0] $end
$var wire      8 l    slv1_awlen [7:0] $end
$var wire      3 m    slv1_awsize [2:0] $end
$var wire      2 n    slv1_awburst [1:0] $end
$var wire      2 n    slv1_awlock [1:0] $end
$var wire      4 o    slv1_awcache [3:0] $end
$var wire      3 m    slv1_awprot [2:0] $end
$var wire      4 o    slv1_awqos [3:0] $end
$var wire      4 o    slv1_awregion [3:0] $end
$var wire      8 l    slv1_awid [7:0] $end
$var wire      1 h    slv1_awuser [0] $end
$var wire      1 h    slv1_wvalid  $end
$var reg       1 "!   slv1_wready  $end
$var wire      1 h    slv1_wlast  $end
$var wire     40 q    slv1_wdata [39:0] $end
$var wire      5 r    slv1_wstrb [4:0] $end
$var wire      1 h    slv1_wuser [0] $end
$var reg       1 #!   slv1_bvalid  $end
$var wire      1 h    slv1_bready  $end
$var reg       8 $!   slv1_bid [7:0] $end
$var reg       2 %!   slv1_bresp [1:0] $end
$var reg       1 &!   slv1_buser [0:0] $end
$var wire      1 h    slv1_arvalid  $end
$var reg       1 '!   slv1_arready  $end
$var wire     16 x    slv1_araddr [15:0] $end
$var wire      8 l    slv1_arlen [7:0] $end
$var wire      3 m    slv1_arsize [2:0] $end
$var wire      2 n    slv1_arburst [1:0] $end
$var wire      2 n    slv1_arlock [1:0] $end
$var wire      4 o    slv1_arcache [3:0] $end
$var wire      3 m    slv1_arprot [2:0] $end
$var wire      4 o    slv1_arqos [3:0] $end
$var wire      4 o    slv1_arregion [3:0] $end
$var wire      8 l    slv1_arid [7:0] $end
$var wire      1 h    slv1_aruser [0] $end
$var reg       1 (!   slv1_rvalid  $end
$var wire      1 h    slv1_rready  $end
$var reg       8 )!   slv1_rid [7:0] $end
$var reg       2 *!   slv1_rresp [1:0] $end
$var reg      40 +!   slv1_rdata [39:0] $end
$var reg       1 ,!   slv1_rlast  $end
$var reg       1 -!   slv1_ruser [0:0] $end
$var wire      1 h    slv2_aclk  $end
$var wire      1 i    slv2_aresetn  $end
$var wire      1 h    slv2_srst  $end
$var wire      1 h    slv2_awvalid  $end
$var reg       1 .!   slv2_awready  $end
$var wire     16 k    slv2_awaddr [15:0] $end
$var wire      8 l    slv2_awlen [7:0] $end
$var wire      3 m    slv2_awsize [2:0] $end
$var wire      2 n    slv2_awburst [1:0] $end
$var wire      2 n    slv2_awlock [1:0] $end
$var wire      4 o    slv2_awcache [3:0] $end
$var wire      3 m    slv2_awprot [2:0] $end
$var wire      4 o    slv2_awqos [3:0] $end
$var wire      4 o    slv2_awregion [3:0] $end
$var wire      8 l    slv2_awid [7:0] $end
$var wire      1 h    slv2_awuser [0] $end
$var wire      1 h    slv2_wvalid  $end
$var reg       1 /!   slv2_wready  $end
$var wire      1 h    slv2_wlast  $end
$var wire     40 q    slv2_wdata [39:0] $end
$var wire      5 r    slv2_wstrb [4:0] $end
$var wire      1 h    slv2_wuser [0] $end
$var reg       1 0!   slv2_bvalid  $end
$var wire      1 h    slv2_bready  $end
$var reg       8 1!   slv2_bid [7:0] $end
$var reg       2 2!   slv2_bresp [1:0] $end
$var reg       1 3!   slv2_buser [0:0] $end
$var wire      1 h    slv2_arvalid  $end
$var reg       1 4!   slv2_arready  $end
$var wire     16 x    slv2_araddr [15:0] $end
$var wire      8 l    slv2_arlen [7:0] $end
$var wire      3 m    slv2_arsize [2:0] $end
$var wire      2 n    slv2_arburst [1:0] $end
$var wire      2 n    slv2_arlock [1:0] $end
$var wire      4 o    slv2_arcache [3:0] $end
$var wire      3 m    slv2_arprot [2:0] $end
$var wire      4 o    slv2_arqos [3:0] $end
$var wire      4 o    slv2_arregion [3:0] $end
$var wire      8 l    slv2_arid [7:0] $end
$var wire      1 h    slv2_aruser [0] $end
$var reg       1 5!   slv2_rvalid  $end
$var wire      1 h    slv2_rready  $end
$var reg       8 6!   slv2_rid [7:0] $end
$var reg       2 7!   slv2_rresp [1:0] $end
$var reg      40 8!   slv2_rdata [39:0] $end
$var reg       1 9!   slv2_rlast  $end
$var reg       1 :!   slv2_ruser [0:0] $end
$var wire      1 h    slv3_aclk  $end
$var wire      1 i    slv3_aresetn  $end
$var wire      1 h    slv3_srst  $end
$var wire      1 h    slv3_awvalid  $end
$var reg       1 ;!   slv3_awready  $end
$var wire     16 k    slv3_awaddr [15:0] $end
$var wire      8 l    slv3_awlen [7:0] $end
$var wire      3 m    slv3_awsize [2:0] $end
$var wire      2 n    slv3_awburst [1:0] $end
$var wire      2 n    slv3_awlock [1:0] $end
$var wire      4 o    slv3_awcache [3:0] $end
$var wire      3 m    slv3_awprot [2:0] $end
$var wire      4 o    slv3_awqos [3:0] $end
$var wire      4 o    slv3_awregion [3:0] $end
$var wire      8 l    slv3_awid [7:0] $end
$var wire      1 h    slv3_awuser [0] $end
$var wire      1 h    slv3_wvalid  $end
$var reg       1 <!   slv3_wready  $end
$var wire      1 h    slv3_wlast  $end
$var wire     40 q    slv3_wdata [39:0] $end
$var wire      5 r    slv3_wstrb [4:0] $end
$var wire      1 h    slv3_wuser [0] $end
$var reg       1 =!   slv3_bvalid  $end
$var wire      1 h    slv3_bready  $end
$var reg       8 >!   slv3_bid [7:0] $end
$var reg       2 ?!   slv3_bresp [1:0] $end
$var reg       1 @!   slv3_buser [0:0] $end
$var wire      1 h    slv3_arvalid  $end
$var reg       1 A!   slv3_arready  $end
$var wire     16 x    slv3_araddr [15:0] $end
$var wire      8 l    slv3_arlen [7:0] $end
$var wire      3 m    slv3_arsize [2:0] $end
$var wire      2 n    slv3_arburst [1:0] $end
$var wire      2 n    slv3_arlock [1:0] $end
$var wire      4 o    slv3_arcache [3:0] $end
$var wire      3 m    slv3_arprot [2:0] $end
$var wire      4 o    slv3_arqos [3:0] $end
$var wire      4 o    slv3_arregion [3:0] $end
$var wire      8 l    slv3_arid [7:0] $end
$var wire      1 h    slv3_aruser [0] $end
$var reg       1 B!   slv3_rvalid  $end
$var wire      1 h    slv3_rready  $end
$var reg       8 C!   slv3_rid [7:0] $end
$var reg       2 D!   slv3_rresp [1:0] $end
$var reg      40 E!   slv3_rdata [39:0] $end
$var reg       1 F!   slv3_rlast  $end
$var reg       1 G!   slv3_ruser [0:0] $end
$var wire      1 i    mst0_aclk  $end
$var wire      1 i    mst0_aresetn  $end
$var wire      1 h    mst0_srst  $end
$var reg       1 H!   mst0_awvalid  $end
$var wire      1 i    mst0_awready  $end
$var reg      16 I!   mst0_awaddr [15:0] $end
$var reg       8 J!   mst0_awlen [7:0] $end
$var reg       3 K!   mst0_awsize [2:0] $end
$var reg       2 L!   mst0_awburst [1:0] $end
$var reg       2 M!   mst0_awlock [1:0] $end
$var reg       4 N!   mst0_awcache [3:0] $end
$var reg       3 O!   mst0_awprot [2:0] $end
$var reg       4 P!   mst0_awqos [3:0] $end
$var reg       4 Q!   mst0_awregion [3:0] $end
$var reg       8 R!   mst0_awid [7:0] $end
$var reg       1 S!   mst0_awuser [0:0] $end
$var reg       1 T!   mst0_wvalid  $end
$var wire      1 h    mst0_wready  $end
$var reg       1 U!   mst0_wlast  $end
$var reg      40 V!   mst0_wdata [39:0] $end
$var reg       5 W!   mst0_wstrb [4:0] $end
$var reg       1 X!   mst0_wuser [0:0] $end
$var wire      1 h    mst0_bvalid  $end
$var reg       1 Y!   mst0_bready  $end
$var wire      8 l    mst0_bid [7:0] $end
$var wire      2 n    mst0_bresp [1:0] $end
$var wire      1 h    mst0_buser [0] $end
$var reg       1 Z!   mst0_arvalid  $end
$var wire      1 h    mst0_arready  $end
$var reg      16 [!   mst0_araddr [15:0] $end
$var reg       8 \!   mst0_arlen [7:0] $end
$var reg       3 ]!   mst0_arsize [2:0] $end
$var reg       2 ^!   mst0_arburst [1:0] $end
$var reg       2 _!   mst0_arlock [1:0] $end
$var reg       4 `!   mst0_arcache [3:0] $end
$var reg       3 a!   mst0_arprot [2:0] $end
$var reg       4 b!   mst0_arqos [3:0] $end
$var reg       4 c!   mst0_arregion [3:0] $end
$var reg       8 d!   mst0_arid [7:0] $end
$var reg       1 e!   mst0_aruser [0:0] $end
$var wire      1 h    mst0_rvalid  $end
$var reg       1 f!   mst0_rready  $end
$var wire      8 l    mst0_rid [7:0] $end
$var wire      2 n    mst0_rresp [1:0] $end
$var wire     40 q    mst0_rdata [39:0] $end
$var wire      1 h    mst0_rlast  $end
$var wire      1 h    mst0_ruser [0] $end
$var wire      1 i    mst1_aclk  $end
$var wire      1 i    mst1_aresetn  $end
$var wire      1 h    mst1_srst  $end
$var reg       1 g!   mst1_awvalid  $end
$var wire      1 i    mst1_awready  $end
$var reg      16 h!   mst1_awaddr [15:0] $end
$var reg       8 i!   mst1_awlen [7:0] $end
$var reg       3 j!   mst1_awsize [2:0] $end
$var reg       2 k!   mst1_awburst [1:0] $end
$var reg       2 l!   mst1_awlock [1:0] $end
$var reg       4 m!   mst1_awcache [3:0] $end
$var reg       3 n!   mst1_awprot [2:0] $end
$var reg       4 o!   mst1_awqos [3:0] $end
$var reg       4 p!   mst1_awregion [3:0] $end
$var reg       8 q!   mst1_awid [7:0] $end
$var reg       1 r!   mst1_awuser [0:0] $end
$var reg       1 s!   mst1_wvalid  $end
$var wire      1 h    mst1_wready  $end
$var reg       1 t!   mst1_wlast  $end
$var reg      40 u!   mst1_wdata [39:0] $end
$var reg       5 v!   mst1_wstrb [4:0] $end
$var reg       1 w!   mst1_wuser [0:0] $end
$var wire      1 h    mst1_bvalid  $end
$var reg       1 x!   mst1_bready  $end
$var wire      8 l    mst1_bid [7:0] $end
$var wire      2 n    mst1_bresp [1:0] $end
$var wire      1 h    mst1_buser [0] $end
$var reg       1 y!   mst1_arvalid  $end
$var wire      1 h    mst1_arready  $end
$var reg      16 z!   mst1_araddr [15:0] $end
$var reg       8 {!   mst1_arlen [7:0] $end
$var reg       3 |!   mst1_arsize [2:0] $end
$var reg       2 }!   mst1_arburst [1:0] $end
$var reg       2 ~!   mst1_arlock [1:0] $end
$var reg       4 !"   mst1_arcache [3:0] $end
$var reg       3 ""   mst1_arprot [2:0] $end
$var reg       4 #"   mst1_arqos [3:0] $end
$var reg       4 $"   mst1_arregion [3:0] $end
$var reg       8 %"   mst1_arid [7:0] $end
$var reg       1 &"   mst1_aruser [0:0] $end
$var wire      1 h    mst1_rvalid  $end
$var reg       1 '"   mst1_rready  $end
$var wire      8 l    mst1_rid [7:0] $end
$var wire      2 n    mst1_rresp [1:0] $end
$var wire     40 q    mst1_rdata [39:0] $end
$var wire      1 h    mst1_rlast  $end
$var wire      1 h    mst1_ruser [0] $end
$var wire      1 i    mst2_aclk  $end
$var wire      1 i    mst2_aresetn  $end
$var wire      1 h    mst2_srst  $end
$var reg       1 ("   mst2_awvalid  $end
$var wire      1 i    mst2_awready  $end
$var reg      16 )"   mst2_awaddr [15:0] $end
$var reg       8 *"   mst2_awlen [7:0] $end
$var reg       3 +"   mst2_awsize [2:0] $end
$var reg       2 ,"   mst2_awburst [1:0] $end
$var reg       2 -"   mst2_awlock [1:0] $end
$var reg       4 ."   mst2_awcache [3:0] $end
$var reg       3 /"   mst2_awprot [2:0] $end
$var reg       4 0"   mst2_awqos [3:0] $end
$var reg       4 1"   mst2_awregion [3:0] $end
$var reg       8 2"   mst2_awid [7:0] $end
$var reg       1 3"   mst2_awuser [0:0] $end
$var reg       1 4"   mst2_wvalid  $end
$var wire      1 h    mst2_wready  $end
$var reg       1 5"   mst2_wlast  $end
$var reg      40 6"   mst2_wdata [39:0] $end
$var reg       5 7"   mst2_wstrb [4:0] $end
$var reg       1 8"   mst2_wuser [0:0] $end
$var wire      1 h    mst2_bvalid  $end
$var reg       1 9"   mst2_bready  $end
$var wire      8 l    mst2_bid [7:0] $end
$var wire      2 n    mst2_bresp [1:0] $end
$var wire      1 h    mst2_buser [0] $end
$var reg       1 :"   mst2_arvalid  $end
$var wire      1 h    mst2_arready  $end
$var reg      16 ;"   mst2_araddr [15:0] $end
$var reg       8 <"   mst2_arlen [7:0] $end
$var reg       3 ="   mst2_arsize [2:0] $end
$var reg       2 >"   mst2_arburst [1:0] $end
$var reg       2 ?"   mst2_arlock [1:0] $end
$var reg       4 @"   mst2_arcache [3:0] $end
$var reg       3 A"   mst2_arprot [2:0] $end
$var reg       4 B"   mst2_arqos [3:0] $end
$var reg       4 C"   mst2_arregion [3:0] $end
$var reg       8 D"   mst2_arid [7:0] $end
$var reg       1 E"   mst2_aruser [0:0] $end
$var wire      1 h    mst2_rvalid  $end
$var reg       1 F"   mst2_rready  $end
$var wire      8 l    mst2_rid [7:0] $end
$var wire      2 n    mst2_rresp [1:0] $end
$var wire     40 q    mst2_rdata [39:0] $end
$var wire      1 h    mst2_rlast  $end
$var wire      1 h    mst2_ruser [0] $end
$var wire      1 i    mst3_aclk  $end
$var wire      1 i    mst3_aresetn  $end
$var wire      1 h    mst3_srst  $end
$var reg       1 G"   mst3_awvalid  $end
$var wire      1 i    mst3_awready  $end
$var reg      16 H"   mst3_awaddr [15:0] $end
$var reg       8 I"   mst3_awlen [7:0] $end
$var reg       3 J"   mst3_awsize [2:0] $end
$var reg       2 K"   mst3_awburst [1:0] $end
$var reg       2 L"   mst3_awlock [1:0] $end
$var reg       4 M"   mst3_awcache [3:0] $end
$var reg       3 N"   mst3_awprot [2:0] $end
$var reg       4 O"   mst3_awqos [3:0] $end
$var reg       4 P"   mst3_awregion [3:0] $end
$var reg       8 Q"   mst3_awid [7:0] $end
$var reg       1 R"   mst3_awuser [0:0] $end
$var reg       1 S"   mst3_wvalid  $end
$var wire      1 h    mst3_wready  $end
$var reg       1 T"   mst3_wlast  $end
$var reg      40 U"   mst3_wdata [39:0] $end
$var reg       5 V"   mst3_wstrb [4:0] $end
$var reg       1 W"   mst3_wuser [0:0] $end
$var wire      1 h    mst3_bvalid  $end
$var reg       1 X"   mst3_bready  $end
$var wire      8 l    mst3_bid [7:0] $end
$var wire      2 n    mst3_bresp [1:0] $end
$var wire      1 h    mst3_buser [0] $end
$var reg       1 Y"   mst3_arvalid  $end
$var wire      1 h    mst3_arready  $end
$var reg      16 Z"   mst3_araddr [15:0] $end
$var reg       8 ["   mst3_arlen [7:0] $end
$var reg       3 \"   mst3_arsize [2:0] $end
$var reg       2 ]"   mst3_arburst [1:0] $end
$var reg       2 ^"   mst3_arlock [1:0] $end
$var reg       4 _"   mst3_arcache [3:0] $end
$var reg       3 `"   mst3_arprot [2:0] $end
$var reg       4 a"   mst3_arqos [3:0] $end
$var reg       4 b"   mst3_arregion [3:0] $end
$var reg       8 c"   mst3_arid [7:0] $end
$var reg       1 d"   mst3_aruser [0:0] $end
$var wire      1 h    mst3_rvalid  $end
$var reg       1 e"   mst3_rready  $end
$var wire      8 l    mst3_rid [7:0] $end
$var wire      2 n    mst3_rresp [1:0] $end
$var wire     40 q    mst3_rdata [39:0] $end
$var wire      1 h    mst3_rlast  $end
$var wire      1 h    mst3_ruser [0] $end
$var parameter 32 f"   AUSER_W  $end
$var parameter 32 g"   WUSER_W  $end
$var parameter 32 h"   BUSER_W  $end
$var parameter 32 i"   RUSER_W  $end
$var parameter 32 j"   AWCH_W  $end
$var parameter 32 k"   WCH_W  $end
$var parameter 32 l"   BCH_W  $end
$var parameter 32 m"   ARCH_W  $end
$var parameter 32 n"   RCH_W  $end
$var parameter 16 o"   MST_ROUTES  $end
$var reg       4 p"   i_awvalid [3:0] $end
$var reg       4 q"   i_awready [3:0] $end
$var reg      108 r"   i_awch [107:0] $end
$var reg       4 s"   i_wvalid [3:0] $end
$var reg       4 t"   i_wready [3:0] $end
$var reg       4 u"   i_wlast [3:0] $end
$var reg      180 v"   i_wch [179:0] $end
$var reg       4 w"   i_bvalid [3:0] $end
$var reg       4 x"   i_bready [3:0] $end
$var reg      40 y"   i_bch [39:0] $end
$var reg       4 z"   i_arvalid [3:0] $end
$var reg       4 {"   i_arready [3:0] $end
$var reg      108 |"   i_arch [107:0] $end
$var reg       4 }"   i_rvalid [3:0] $end
$var reg       4 ~"   i_rready [3:0] $end
$var reg       4 !#   i_rlast [3:0] $end
$var reg      200 "#   i_rch [199:0] $end
$var reg       4 ##   o_awvalid [3:0] $end
$var reg       4 $#   o_awready [3:0] $end
$var reg      108 %#   o_awch [107:0] $end
$var reg       4 &#   o_wvalid [3:0] $end
$var reg       4 '#   o_wready [3:0] $end
$var reg       4 (#   o_wlast [3:0] $end
$var reg      180 )#   o_wch [179:0] $end
$var reg       4 *#   o_bvalid [3:0] $end
$var reg       4 +#   o_bready [3:0] $end
$var reg      40 ,#   o_bch [39:0] $end
$var reg       4 -#   o_arvalid [3:0] $end
$var reg       4 .#   o_arready [3:0] $end
$var reg      108 /#   o_arch [107:0] $end
$var reg       4 0#   o_rvalid [3:0] $end
$var reg       4 1#   o_rready [3:0] $end
$var reg       4 2#   o_rlast [3:0] $end
$var reg      200 3#   o_rch [199:0] $end

$scope module slv0_if $end
$var parameter 32 4#   AXI_ADDR_W  $end
$var parameter 32 5#   AXI_ID_W  $end
$var parameter 32 6#   AXI_DATA_W  $end
$var parameter 32 7#   SLV_NB  $end
$var parameter 32 8#   STRB_MODE  $end
$var parameter 32 9#   AXI_SIGNALING  $end
$var parameter 32 :#   MST_CDC  $end
$var parameter 32 ;#   MST_OSTDREQ_NUM  $end
$var parameter 32 <#   MST_OSTDREQ_SIZE  $end
$var parameter 32 =#   USER_SUPPORT  $end
$var parameter 32 >#   AXI_AUSER_W  $end
$var parameter 32 ?#   AXI_WUSER_W  $end
$var parameter 32 @#   AXI_BUSER_W  $end
$var parameter 32 A#   AXI_RUSER_W  $end
$var parameter 32 B#   AWCH_W  $end
$var parameter 32 C#   WCH_W  $end
$var parameter 32 D#   BCH_W  $end
$var parameter 32 E#   ARCH_W  $end
$var parameter 32 F#   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 h    i_awvalid  $end
$var reg       1 G#   i_awready  $end
$var wire     16 k    i_awaddr [15:0] $end
$var wire      8 l    i_awlen [7:0] $end
$var wire      3 m    i_awsize [2:0] $end
$var wire      2 n    i_awburst [1:0] $end
$var wire      2 n    i_awlock [1:0] $end
$var wire      4 o    i_awcache [3:0] $end
$var wire      3 m    i_awprot [2:0] $end
$var wire      4 o    i_awqos [3:0] $end
$var wire      4 o    i_awregion [3:0] $end
$var wire      8 l    i_awid [7:0] $end
$var wire      1 h    i_awuser [0] $end
$var wire      1 h    i_wvalid  $end
$var reg       1 H#   i_wready  $end
$var wire      1 h    i_wlast  $end
$var wire     40 q    i_wdata [39:0] $end
$var wire      5 r    i_wstrb [4:0] $end
$var wire      1 h    i_wuser [0] $end
$var reg       1 I#   i_bvalid  $end
$var wire      1 h    i_bready  $end
$var reg       8 J#   i_bid [7:0] $end
$var reg       2 K#   i_bresp [1:0] $end
$var reg       1 L#   i_buser [0:0] $end
$var wire      1 h    i_arvalid  $end
$var reg       1 M#   i_arready  $end
$var wire     16 x    i_araddr [15:0] $end
$var wire      8 l    i_arlen [7:0] $end
$var wire      3 m    i_arsize [2:0] $end
$var wire      2 n    i_arburst [1:0] $end
$var wire      2 n    i_arlock [1:0] $end
$var wire      4 o    i_arcache [3:0] $end
$var wire      3 m    i_arprot [2:0] $end
$var wire      4 o    i_arqos [3:0] $end
$var wire      4 o    i_arregion [3:0] $end
$var wire      8 l    i_arid [7:0] $end
$var wire      1 h    i_aruser [0] $end
$var reg       1 N#   i_rvalid  $end
$var wire      1 h    i_rready  $end
$var reg       8 O#   i_rid [7:0] $end
$var reg       2 P#   i_rresp [1:0] $end
$var reg      40 Q#   i_rdata [39:0] $end
$var reg       1 R#   i_rlast  $end
$var reg       1 S#   i_ruser [0:0] $end
$var wire      1 e    o_aclk  $end
$var wire      1 f    o_aresetn  $end
$var wire      1 g    o_srst  $end
$var reg       1 T#   o_awvalid  $end
$var wire      1 U#   o_awready  $end
$var reg      27 V#   o_awch [26:0] $end
$var reg       1 W#   o_wvalid  $end
$var wire      1 X#   o_wready  $end
$var reg       1 Y#   o_wlast  $end
$var reg      45 Z#   o_wch [44:0] $end
$var wire      1 [#   o_bvalid  $end
$var reg       1 \#   o_bready  $end
$var wire     10 ]#   o_bch [9:0] $end
$var reg       1 ^#   o_arvalid  $end
$var wire      1 _#   o_arready  $end
$var reg      27 `#   o_arch [26:0] $end
$var wire      1 a#   o_rvalid  $end
$var reg       1 b#   o_rready  $end
$var wire      1 c#   o_rlast  $end
$var wire     50 d#   o_rch [49:0] $end
$var reg      27 e#   awch [26:0] $end
$var reg      45 f#   wch [44:0] $end
$var reg      10 g#   bch [9:0] $end
$var reg      27 h#   arch [26:0] $end
$var reg      50 i#   rch [49:0] $end
$var reg       1 j#   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 k#   PASS_THRU  $end
$var parameter 32 l#   AW_ASIZE  $end
$var parameter 32 m#   W_ASIZE  $end
$var parameter 32 n#   B_ASIZE  $end
$var parameter 32 o#   AR_ASIZE  $end
$var parameter 32 p#   R_ASIZE  $end
$var reg       1 q#   aw_full  $end
$var reg       1 r#   aw_empty  $end
$var reg       1 s#   w_full  $end
$var reg       1 t#   w_empty  $end
$var reg       1 u#   ar_full  $end
$var reg       1 v#   ar_empty  $end
$var reg       1 w#   r_full  $end
$var reg       1 x#   r_empty  $end
$var reg       1 y#   b_full  $end
$var reg       1 z#   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 {#   PASS_THRU  $end
$var parameter 32 |#   ADDR_WIDTH  $end
$var parameter 32 }#   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 !$   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 "$   full  $end
$var reg      27 #$   data_out [26:0] $end
$var wire      1 U#   pull  $end
$var reg       1 $$   empty  $end
$var reg       1 %$   wr_en  $end
$var reg       3 &$   wrptr [2:0] $end
$var reg       3 '$   rdptr [2:0] $end
$var reg       1 ($   empty_flag  $end
$var reg       1 )$   full_flag  $end
$var reg       1 *$   pass_thru  $end
$var reg      27 +$   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 ,$   ADDR_WIDTH  $end
$var parameter 32 -$   DATA_WIDTH  $end
$var parameter 32 .$   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 /$   wr_en  $end
$var wire      2 0$   addr_in [1:0] $end
$var wire     27 !$   data_in [26:0] $end
$var wire      2 1$   addr_out [1:0] $end
$var reg      27 2$   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 3$   PASS_THRU  $end
$var parameter 32 4$   ADDR_WIDTH  $end
$var parameter 32 5$   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 6$   data_in [45:0] $end
$var wire      1 h    push  $end
$var reg       1 7$   full  $end
$var reg      46 8$   data_out [45:0] $end
$var wire      1 X#   pull  $end
$var reg       1 9$   empty  $end
$var reg       1 :$   wr_en  $end
$var reg       3 ;$   wrptr [2:0] $end
$var reg       3 <$   rdptr [2:0] $end
$var reg       1 =$   empty_flag  $end
$var reg       1 >$   full_flag  $end
$var reg       1 ?$   pass_thru  $end
$var reg      46 @$   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 A$   ADDR_WIDTH  $end
$var parameter 32 B$   DATA_WIDTH  $end
$var parameter 32 C$   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 D$   wr_en  $end
$var wire      2 E$   addr_in [1:0] $end
$var wire     46 6$   data_in [45:0] $end
$var wire      2 F$   addr_out [1:0] $end
$var reg      46 G$   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 H$   PASS_THRU  $end
$var parameter 32 I$   ADDR_WIDTH  $end
$var parameter 32 J$   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 ]#   data_in [9:0] $end
$var wire      1 [#   push  $end
$var reg       1 K$   full  $end
$var reg      10 L$   data_out [9:0] $end
$var wire      1 h    pull  $end
$var reg       1 M$   empty  $end
$var reg       1 N$   wr_en  $end
$var reg       3 O$   wrptr [2:0] $end
$var reg       3 P$   rdptr [2:0] $end
$var reg       1 Q$   empty_flag  $end
$var reg       1 R$   full_flag  $end
$var reg       1 S$   pass_thru  $end
$var reg      10 T$   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 U$   ADDR_WIDTH  $end
$var parameter 32 V$   DATA_WIDTH  $end
$var parameter 32 W$   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 X$   wr_en  $end
$var wire      2 Y$   addr_in [1:0] $end
$var wire     10 ]#   data_in [9:0] $end
$var wire      2 Z$   addr_out [1:0] $end
$var reg      10 [$   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 \$   PASS_THRU  $end
$var parameter 32 ]$   ADDR_WIDTH  $end
$var parameter 32 ^$   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 _$   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 `$   full  $end
$var reg      27 a$   data_out [26:0] $end
$var wire      1 _#   pull  $end
$var reg       1 b$   empty  $end
$var reg       1 c$   wr_en  $end
$var reg       3 d$   wrptr [2:0] $end
$var reg       3 e$   rdptr [2:0] $end
$var reg       1 f$   empty_flag  $end
$var reg       1 g$   full_flag  $end
$var reg       1 h$   pass_thru  $end
$var reg      27 i$   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 j$   ADDR_WIDTH  $end
$var parameter 32 k$   DATA_WIDTH  $end
$var parameter 32 l$   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 m$   wr_en  $end
$var wire      2 n$   addr_in [1:0] $end
$var wire     27 _$   data_in [26:0] $end
$var wire      2 o$   addr_out [1:0] $end
$var reg      27 p$   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 q$   PASS_THRU  $end
$var parameter 32 r$   ADDR_WIDTH  $end
$var parameter 32 s$   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 t$   data_in [50:0] $end
$var wire      1 a#   push  $end
$var reg       1 u$   full  $end
$var reg      51 v$   data_out [50:0] $end
$var wire      1 h    pull  $end
$var reg       1 w$   empty  $end
$var reg       1 x$   wr_en  $end
$var reg       3 y$   wrptr [2:0] $end
$var reg       3 z$   rdptr [2:0] $end
$var reg       1 {$   empty_flag  $end
$var reg       1 |$   full_flag  $end
$var reg       1 }$   pass_thru  $end
$var reg      51 ~$   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 !%   ADDR_WIDTH  $end
$var parameter 32 "%   DATA_WIDTH  $end
$var parameter 32 #%   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 $%   wr_en  $end
$var wire      2 %%   addr_in [1:0] $end
$var wire     51 t$   data_in [50:0] $end
$var wire      2 &%   addr_out [1:0] $end
$var reg      51 '%   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv1_if $end
$var parameter 32 (%   AXI_ADDR_W  $end
$var parameter 32 )%   AXI_ID_W  $end
$var parameter 32 *%   AXI_DATA_W  $end
$var parameter 32 +%   SLV_NB  $end
$var parameter 32 ,%   STRB_MODE  $end
$var parameter 32 -%   AXI_SIGNALING  $end
$var parameter 32 .%   MST_CDC  $end
$var parameter 32 /%   MST_OSTDREQ_NUM  $end
$var parameter 32 0%   MST_OSTDREQ_SIZE  $end
$var parameter 32 1%   USER_SUPPORT  $end
$var parameter 32 2%   AXI_AUSER_W  $end
$var parameter 32 3%   AXI_WUSER_W  $end
$var parameter 32 4%   AXI_BUSER_W  $end
$var parameter 32 5%   AXI_RUSER_W  $end
$var parameter 32 6%   AWCH_W  $end
$var parameter 32 7%   WCH_W  $end
$var parameter 32 8%   BCH_W  $end
$var parameter 32 9%   ARCH_W  $end
$var parameter 32 :%   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 h    i_awvalid  $end
$var reg       1 ;%   i_awready  $end
$var wire     16 k    i_awaddr [15:0] $end
$var wire      8 l    i_awlen [7:0] $end
$var wire      3 m    i_awsize [2:0] $end
$var wire      2 n    i_awburst [1:0] $end
$var wire      2 n    i_awlock [1:0] $end
$var wire      4 o    i_awcache [3:0] $end
$var wire      3 m    i_awprot [2:0] $end
$var wire      4 o    i_awqos [3:0] $end
$var wire      4 o    i_awregion [3:0] $end
$var wire      8 l    i_awid [7:0] $end
$var wire      1 h    i_awuser [0] $end
$var wire      1 h    i_wvalid  $end
$var reg       1 <%   i_wready  $end
$var wire      1 h    i_wlast  $end
$var wire     40 q    i_wdata [39:0] $end
$var wire      5 r    i_wstrb [4:0] $end
$var wire      1 h    i_wuser [0] $end
$var reg       1 =%   i_bvalid  $end
$var wire      1 h    i_bready  $end
$var reg       8 >%   i_bid [7:0] $end
$var reg       2 ?%   i_bresp [1:0] $end
$var reg       1 @%   i_buser [0:0] $end
$var wire      1 h    i_arvalid  $end
$var reg       1 A%   i_arready  $end
$var wire     16 x    i_araddr [15:0] $end
$var wire      8 l    i_arlen [7:0] $end
$var wire      3 m    i_arsize [2:0] $end
$var wire      2 n    i_arburst [1:0] $end
$var wire      2 n    i_arlock [1:0] $end
$var wire      4 o    i_arcache [3:0] $end
$var wire      3 m    i_arprot [2:0] $end
$var wire      4 o    i_arqos [3:0] $end
$var wire      4 o    i_arregion [3:0] $end
$var wire      8 l    i_arid [7:0] $end
$var wire      1 h    i_aruser [0] $end
$var reg       1 B%   i_rvalid  $end
$var wire      1 h    i_rready  $end
$var reg       8 C%   i_rid [7:0] $end
$var reg       2 D%   i_rresp [1:0] $end
$var reg      40 E%   i_rdata [39:0] $end
$var reg       1 F%   i_rlast  $end
$var reg       1 G%   i_ruser [0:0] $end
$var wire      1 e    o_aclk  $end
$var wire      1 f    o_aresetn  $end
$var wire      1 g    o_srst  $end
$var reg       1 H%   o_awvalid  $end
$var wire      1 I%   o_awready  $end
$var reg      27 J%   o_awch [26:0] $end
$var reg       1 K%   o_wvalid  $end
$var wire      1 L%   o_wready  $end
$var reg       1 M%   o_wlast  $end
$var reg      45 N%   o_wch [44:0] $end
$var wire      1 O%   o_bvalid  $end
$var reg       1 P%   o_bready  $end
$var wire     10 Q%   o_bch [9:0] $end
$var reg       1 R%   o_arvalid  $end
$var wire      1 S%   o_arready  $end
$var reg      27 T%   o_arch [26:0] $end
$var wire      1 U%   o_rvalid  $end
$var reg       1 V%   o_rready  $end
$var wire      1 W%   o_rlast  $end
$var wire     50 X%   o_rch [49:0] $end
$var reg      27 Y%   awch [26:0] $end
$var reg      45 Z%   wch [44:0] $end
$var reg      10 [%   bch [9:0] $end
$var reg      27 \%   arch [26:0] $end
$var reg      50 ]%   rch [49:0] $end
$var reg       1 ^%   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 _%   PASS_THRU  $end
$var parameter 32 `%   AW_ASIZE  $end
$var parameter 32 a%   W_ASIZE  $end
$var parameter 32 b%   B_ASIZE  $end
$var parameter 32 c%   AR_ASIZE  $end
$var parameter 32 d%   R_ASIZE  $end
$var reg       1 e%   aw_full  $end
$var reg       1 f%   aw_empty  $end
$var reg       1 g%   w_full  $end
$var reg       1 h%   w_empty  $end
$var reg       1 i%   ar_full  $end
$var reg       1 j%   ar_empty  $end
$var reg       1 k%   r_full  $end
$var reg       1 l%   r_empty  $end
$var reg       1 m%   b_full  $end
$var reg       1 n%   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 o%   PASS_THRU  $end
$var parameter 32 p%   ADDR_WIDTH  $end
$var parameter 32 q%   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 r%   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 s%   full  $end
$var reg      27 t%   data_out [26:0] $end
$var wire      1 I%   pull  $end
$var reg       1 u%   empty  $end
$var reg       1 v%   wr_en  $end
$var reg       3 w%   wrptr [2:0] $end
$var reg       3 x%   rdptr [2:0] $end
$var reg       1 y%   empty_flag  $end
$var reg       1 z%   full_flag  $end
$var reg       1 {%   pass_thru  $end
$var reg      27 |%   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 }%   ADDR_WIDTH  $end
$var parameter 32 ~%   DATA_WIDTH  $end
$var parameter 32 !&   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 "&   wr_en  $end
$var wire      2 #&   addr_in [1:0] $end
$var wire     27 r%   data_in [26:0] $end
$var wire      2 $&   addr_out [1:0] $end
$var reg      27 %&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 &&   PASS_THRU  $end
$var parameter 32 '&   ADDR_WIDTH  $end
$var parameter 32 (&   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 )&   data_in [45:0] $end
$var wire      1 h    push  $end
$var reg       1 *&   full  $end
$var reg      46 +&   data_out [45:0] $end
$var wire      1 L%   pull  $end
$var reg       1 ,&   empty  $end
$var reg       1 -&   wr_en  $end
$var reg       3 .&   wrptr [2:0] $end
$var reg       3 /&   rdptr [2:0] $end
$var reg       1 0&   empty_flag  $end
$var reg       1 1&   full_flag  $end
$var reg       1 2&   pass_thru  $end
$var reg      46 3&   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 4&   ADDR_WIDTH  $end
$var parameter 32 5&   DATA_WIDTH  $end
$var parameter 32 6&   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 7&   wr_en  $end
$var wire      2 8&   addr_in [1:0] $end
$var wire     46 )&   data_in [45:0] $end
$var wire      2 9&   addr_out [1:0] $end
$var reg      46 :&   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 ;&   PASS_THRU  $end
$var parameter 32 <&   ADDR_WIDTH  $end
$var parameter 32 =&   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 Q%   data_in [9:0] $end
$var wire      1 O%   push  $end
$var reg       1 >&   full  $end
$var reg      10 ?&   data_out [9:0] $end
$var wire      1 h    pull  $end
$var reg       1 @&   empty  $end
$var reg       1 A&   wr_en  $end
$var reg       3 B&   wrptr [2:0] $end
$var reg       3 C&   rdptr [2:0] $end
$var reg       1 D&   empty_flag  $end
$var reg       1 E&   full_flag  $end
$var reg       1 F&   pass_thru  $end
$var reg      10 G&   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 H&   ADDR_WIDTH  $end
$var parameter 32 I&   DATA_WIDTH  $end
$var parameter 32 J&   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 K&   wr_en  $end
$var wire      2 L&   addr_in [1:0] $end
$var wire     10 Q%   data_in [9:0] $end
$var wire      2 M&   addr_out [1:0] $end
$var reg      10 N&   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 O&   PASS_THRU  $end
$var parameter 32 P&   ADDR_WIDTH  $end
$var parameter 32 Q&   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 R&   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 S&   full  $end
$var reg      27 T&   data_out [26:0] $end
$var wire      1 S%   pull  $end
$var reg       1 U&   empty  $end
$var reg       1 V&   wr_en  $end
$var reg       3 W&   wrptr [2:0] $end
$var reg       3 X&   rdptr [2:0] $end
$var reg       1 Y&   empty_flag  $end
$var reg       1 Z&   full_flag  $end
$var reg       1 [&   pass_thru  $end
$var reg      27 \&   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 ]&   ADDR_WIDTH  $end
$var parameter 32 ^&   DATA_WIDTH  $end
$var parameter 32 _&   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 `&   wr_en  $end
$var wire      2 a&   addr_in [1:0] $end
$var wire     27 R&   data_in [26:0] $end
$var wire      2 b&   addr_out [1:0] $end
$var reg      27 c&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 d&   PASS_THRU  $end
$var parameter 32 e&   ADDR_WIDTH  $end
$var parameter 32 f&   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 g&   data_in [50:0] $end
$var wire      1 U%   push  $end
$var reg       1 h&   full  $end
$var reg      51 i&   data_out [50:0] $end
$var wire      1 h    pull  $end
$var reg       1 j&   empty  $end
$var reg       1 k&   wr_en  $end
$var reg       3 l&   wrptr [2:0] $end
$var reg       3 m&   rdptr [2:0] $end
$var reg       1 n&   empty_flag  $end
$var reg       1 o&   full_flag  $end
$var reg       1 p&   pass_thru  $end
$var reg      51 q&   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 r&   ADDR_WIDTH  $end
$var parameter 32 s&   DATA_WIDTH  $end
$var parameter 32 t&   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 u&   wr_en  $end
$var wire      2 v&   addr_in [1:0] $end
$var wire     51 g&   data_in [50:0] $end
$var wire      2 w&   addr_out [1:0] $end
$var reg      51 x&   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv2_if $end
$var parameter 32 y&   AXI_ADDR_W  $end
$var parameter 32 z&   AXI_ID_W  $end
$var parameter 32 {&   AXI_DATA_W  $end
$var parameter 32 |&   SLV_NB  $end
$var parameter 32 }&   STRB_MODE  $end
$var parameter 32 ~&   AXI_SIGNALING  $end
$var parameter 32 !'   MST_CDC  $end
$var parameter 32 "'   MST_OSTDREQ_NUM  $end
$var parameter 32 #'   MST_OSTDREQ_SIZE  $end
$var parameter 32 $'   USER_SUPPORT  $end
$var parameter 32 %'   AXI_AUSER_W  $end
$var parameter 32 &'   AXI_WUSER_W  $end
$var parameter 32 ''   AXI_BUSER_W  $end
$var parameter 32 ('   AXI_RUSER_W  $end
$var parameter 32 )'   AWCH_W  $end
$var parameter 32 *'   WCH_W  $end
$var parameter 32 +'   BCH_W  $end
$var parameter 32 ,'   ARCH_W  $end
$var parameter 32 -'   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 h    i_awvalid  $end
$var reg       1 .'   i_awready  $end
$var wire     16 k    i_awaddr [15:0] $end
$var wire      8 l    i_awlen [7:0] $end
$var wire      3 m    i_awsize [2:0] $end
$var wire      2 n    i_awburst [1:0] $end
$var wire      2 n    i_awlock [1:0] $end
$var wire      4 o    i_awcache [3:0] $end
$var wire      3 m    i_awprot [2:0] $end
$var wire      4 o    i_awqos [3:0] $end
$var wire      4 o    i_awregion [3:0] $end
$var wire      8 l    i_awid [7:0] $end
$var wire      1 h    i_awuser [0] $end
$var wire      1 h    i_wvalid  $end
$var reg       1 /'   i_wready  $end
$var wire      1 h    i_wlast  $end
$var wire     40 q    i_wdata [39:0] $end
$var wire      5 r    i_wstrb [4:0] $end
$var wire      1 h    i_wuser [0] $end
$var reg       1 0'   i_bvalid  $end
$var wire      1 h    i_bready  $end
$var reg       8 1'   i_bid [7:0] $end
$var reg       2 2'   i_bresp [1:0] $end
$var reg       1 3'   i_buser [0:0] $end
$var wire      1 h    i_arvalid  $end
$var reg       1 4'   i_arready  $end
$var wire     16 x    i_araddr [15:0] $end
$var wire      8 l    i_arlen [7:0] $end
$var wire      3 m    i_arsize [2:0] $end
$var wire      2 n    i_arburst [1:0] $end
$var wire      2 n    i_arlock [1:0] $end
$var wire      4 o    i_arcache [3:0] $end
$var wire      3 m    i_arprot [2:0] $end
$var wire      4 o    i_arqos [3:0] $end
$var wire      4 o    i_arregion [3:0] $end
$var wire      8 l    i_arid [7:0] $end
$var wire      1 h    i_aruser [0] $end
$var reg       1 5'   i_rvalid  $end
$var wire      1 h    i_rready  $end
$var reg       8 6'   i_rid [7:0] $end
$var reg       2 7'   i_rresp [1:0] $end
$var reg      40 8'   i_rdata [39:0] $end
$var reg       1 9'   i_rlast  $end
$var reg       1 :'   i_ruser [0:0] $end
$var wire      1 e    o_aclk  $end
$var wire      1 f    o_aresetn  $end
$var wire      1 g    o_srst  $end
$var reg       1 ;'   o_awvalid  $end
$var wire      1 <'   o_awready  $end
$var reg      27 ='   o_awch [26:0] $end
$var reg       1 >'   o_wvalid  $end
$var wire      1 ?'   o_wready  $end
$var reg       1 @'   o_wlast  $end
$var reg      45 A'   o_wch [44:0] $end
$var wire      1 B'   o_bvalid  $end
$var reg       1 C'   o_bready  $end
$var wire     10 D'   o_bch [9:0] $end
$var reg       1 E'   o_arvalid  $end
$var wire      1 F'   o_arready  $end
$var reg      27 G'   o_arch [26:0] $end
$var wire      1 H'   o_rvalid  $end
$var reg       1 I'   o_rready  $end
$var wire      1 J'   o_rlast  $end
$var wire     50 K'   o_rch [49:0] $end
$var reg      27 L'   awch [26:0] $end
$var reg      45 M'   wch [44:0] $end
$var reg      10 N'   bch [9:0] $end
$var reg      27 O'   arch [26:0] $end
$var reg      50 P'   rch [49:0] $end
$var reg       1 Q'   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 R'   PASS_THRU  $end
$var parameter 32 S'   AW_ASIZE  $end
$var parameter 32 T'   W_ASIZE  $end
$var parameter 32 U'   B_ASIZE  $end
$var parameter 32 V'   AR_ASIZE  $end
$var parameter 32 W'   R_ASIZE  $end
$var reg       1 X'   aw_full  $end
$var reg       1 Y'   aw_empty  $end
$var reg       1 Z'   w_full  $end
$var reg       1 ['   w_empty  $end
$var reg       1 \'   ar_full  $end
$var reg       1 ]'   ar_empty  $end
$var reg       1 ^'   r_full  $end
$var reg       1 _'   r_empty  $end
$var reg       1 `'   b_full  $end
$var reg       1 a'   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 b'   PASS_THRU  $end
$var parameter 32 c'   ADDR_WIDTH  $end
$var parameter 32 d'   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 e'   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 f'   full  $end
$var reg      27 g'   data_out [26:0] $end
$var wire      1 <'   pull  $end
$var reg       1 h'   empty  $end
$var reg       1 i'   wr_en  $end
$var reg       3 j'   wrptr [2:0] $end
$var reg       3 k'   rdptr [2:0] $end
$var reg       1 l'   empty_flag  $end
$var reg       1 m'   full_flag  $end
$var reg       1 n'   pass_thru  $end
$var reg      27 o'   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 p'   ADDR_WIDTH  $end
$var parameter 32 q'   DATA_WIDTH  $end
$var parameter 32 r'   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 s'   wr_en  $end
$var wire      2 t'   addr_in [1:0] $end
$var wire     27 e'   data_in [26:0] $end
$var wire      2 u'   addr_out [1:0] $end
$var reg      27 v'   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 w'   PASS_THRU  $end
$var parameter 32 x'   ADDR_WIDTH  $end
$var parameter 32 y'   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 z'   data_in [45:0] $end
$var wire      1 h    push  $end
$var reg       1 {'   full  $end
$var reg      46 |'   data_out [45:0] $end
$var wire      1 ?'   pull  $end
$var reg       1 }'   empty  $end
$var reg       1 ~'   wr_en  $end
$var reg       3 !(   wrptr [2:0] $end
$var reg       3 "(   rdptr [2:0] $end
$var reg       1 #(   empty_flag  $end
$var reg       1 $(   full_flag  $end
$var reg       1 %(   pass_thru  $end
$var reg      46 &(   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 '(   ADDR_WIDTH  $end
$var parameter 32 ((   DATA_WIDTH  $end
$var parameter 32 )(   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 *(   wr_en  $end
$var wire      2 +(   addr_in [1:0] $end
$var wire     46 z'   data_in [45:0] $end
$var wire      2 ,(   addr_out [1:0] $end
$var reg      46 -(   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 .(   PASS_THRU  $end
$var parameter 32 /(   ADDR_WIDTH  $end
$var parameter 32 0(   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 D'   data_in [9:0] $end
$var wire      1 B'   push  $end
$var reg       1 1(   full  $end
$var reg      10 2(   data_out [9:0] $end
$var wire      1 h    pull  $end
$var reg       1 3(   empty  $end
$var reg       1 4(   wr_en  $end
$var reg       3 5(   wrptr [2:0] $end
$var reg       3 6(   rdptr [2:0] $end
$var reg       1 7(   empty_flag  $end
$var reg       1 8(   full_flag  $end
$var reg       1 9(   pass_thru  $end
$var reg      10 :(   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 ;(   ADDR_WIDTH  $end
$var parameter 32 <(   DATA_WIDTH  $end
$var parameter 32 =(   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 >(   wr_en  $end
$var wire      2 ?(   addr_in [1:0] $end
$var wire     10 D'   data_in [9:0] $end
$var wire      2 @(   addr_out [1:0] $end
$var reg      10 A(   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 B(   PASS_THRU  $end
$var parameter 32 C(   ADDR_WIDTH  $end
$var parameter 32 D(   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 E(   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 F(   full  $end
$var reg      27 G(   data_out [26:0] $end
$var wire      1 F'   pull  $end
$var reg       1 H(   empty  $end
$var reg       1 I(   wr_en  $end
$var reg       3 J(   wrptr [2:0] $end
$var reg       3 K(   rdptr [2:0] $end
$var reg       1 L(   empty_flag  $end
$var reg       1 M(   full_flag  $end
$var reg       1 N(   pass_thru  $end
$var reg      27 O(   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 P(   ADDR_WIDTH  $end
$var parameter 32 Q(   DATA_WIDTH  $end
$var parameter 32 R(   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 S(   wr_en  $end
$var wire      2 T(   addr_in [1:0] $end
$var wire     27 E(   data_in [26:0] $end
$var wire      2 U(   addr_out [1:0] $end
$var reg      27 V(   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 W(   PASS_THRU  $end
$var parameter 32 X(   ADDR_WIDTH  $end
$var parameter 32 Y(   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 Z(   data_in [50:0] $end
$var wire      1 H'   push  $end
$var reg       1 [(   full  $end
$var reg      51 \(   data_out [50:0] $end
$var wire      1 h    pull  $end
$var reg       1 ](   empty  $end
$var reg       1 ^(   wr_en  $end
$var reg       3 _(   wrptr [2:0] $end
$var reg       3 `(   rdptr [2:0] $end
$var reg       1 a(   empty_flag  $end
$var reg       1 b(   full_flag  $end
$var reg       1 c(   pass_thru  $end
$var reg      51 d(   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 e(   ADDR_WIDTH  $end
$var parameter 32 f(   DATA_WIDTH  $end
$var parameter 32 g(   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 h(   wr_en  $end
$var wire      2 i(   addr_in [1:0] $end
$var wire     51 Z(   data_in [50:0] $end
$var wire      2 j(   addr_out [1:0] $end
$var reg      51 k(   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv3_if $end
$var parameter 32 l(   AXI_ADDR_W  $end
$var parameter 32 m(   AXI_ID_W  $end
$var parameter 32 n(   AXI_DATA_W  $end
$var parameter 32 o(   SLV_NB  $end
$var parameter 32 p(   STRB_MODE  $end
$var parameter 32 q(   AXI_SIGNALING  $end
$var parameter 32 r(   MST_CDC  $end
$var parameter 32 s(   MST_OSTDREQ_NUM  $end
$var parameter 32 t(   MST_OSTDREQ_SIZE  $end
$var parameter 32 u(   USER_SUPPORT  $end
$var parameter 32 v(   AXI_AUSER_W  $end
$var parameter 32 w(   AXI_WUSER_W  $end
$var parameter 32 x(   AXI_BUSER_W  $end
$var parameter 32 y(   AXI_RUSER_W  $end
$var parameter 32 z(   AWCH_W  $end
$var parameter 32 {(   WCH_W  $end
$var parameter 32 |(   BCH_W  $end
$var parameter 32 }(   ARCH_W  $end
$var parameter 32 ~(   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 h    i_awvalid  $end
$var reg       1 !)   i_awready  $end
$var wire     16 k    i_awaddr [15:0] $end
$var wire      8 l    i_awlen [7:0] $end
$var wire      3 m    i_awsize [2:0] $end
$var wire      2 n    i_awburst [1:0] $end
$var wire      2 n    i_awlock [1:0] $end
$var wire      4 o    i_awcache [3:0] $end
$var wire      3 m    i_awprot [2:0] $end
$var wire      4 o    i_awqos [3:0] $end
$var wire      4 o    i_awregion [3:0] $end
$var wire      8 l    i_awid [7:0] $end
$var wire      1 h    i_awuser [0] $end
$var wire      1 h    i_wvalid  $end
$var reg       1 ")   i_wready  $end
$var wire      1 h    i_wlast  $end
$var wire     40 q    i_wdata [39:0] $end
$var wire      5 r    i_wstrb [4:0] $end
$var wire      1 h    i_wuser [0] $end
$var reg       1 #)   i_bvalid  $end
$var wire      1 h    i_bready  $end
$var reg       8 $)   i_bid [7:0] $end
$var reg       2 %)   i_bresp [1:0] $end
$var reg       1 &)   i_buser [0:0] $end
$var wire      1 h    i_arvalid  $end
$var reg       1 ')   i_arready  $end
$var wire     16 x    i_araddr [15:0] $end
$var wire      8 l    i_arlen [7:0] $end
$var wire      3 m    i_arsize [2:0] $end
$var wire      2 n    i_arburst [1:0] $end
$var wire      2 n    i_arlock [1:0] $end
$var wire      4 o    i_arcache [3:0] $end
$var wire      3 m    i_arprot [2:0] $end
$var wire      4 o    i_arqos [3:0] $end
$var wire      4 o    i_arregion [3:0] $end
$var wire      8 l    i_arid [7:0] $end
$var wire      1 h    i_aruser [0] $end
$var reg       1 ()   i_rvalid  $end
$var wire      1 h    i_rready  $end
$var reg       8 ))   i_rid [7:0] $end
$var reg       2 *)   i_rresp [1:0] $end
$var reg      40 +)   i_rdata [39:0] $end
$var reg       1 ,)   i_rlast  $end
$var reg       1 -)   i_ruser [0:0] $end
$var wire      1 e    o_aclk  $end
$var wire      1 f    o_aresetn  $end
$var wire      1 g    o_srst  $end
$var reg       1 .)   o_awvalid  $end
$var wire      1 /)   o_awready  $end
$var reg      27 0)   o_awch [26:0] $end
$var reg       1 1)   o_wvalid  $end
$var wire      1 2)   o_wready  $end
$var reg       1 3)   o_wlast  $end
$var reg      45 4)   o_wch [44:0] $end
$var wire      1 5)   o_bvalid  $end
$var reg       1 6)   o_bready  $end
$var wire     10 7)   o_bch [9:0] $end
$var reg       1 8)   o_arvalid  $end
$var wire      1 9)   o_arready  $end
$var reg      27 :)   o_arch [26:0] $end
$var wire      1 ;)   o_rvalid  $end
$var reg       1 <)   o_rready  $end
$var wire      1 =)   o_rlast  $end
$var wire     50 >)   o_rch [49:0] $end
$var reg      27 ?)   awch [26:0] $end
$var reg      45 @)   wch [44:0] $end
$var reg      10 A)   bch [9:0] $end
$var reg      27 B)   arch [26:0] $end
$var reg      50 C)   rch [49:0] $end
$var reg       1 D)   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 E)   PASS_THRU  $end
$var parameter 32 F)   AW_ASIZE  $end
$var parameter 32 G)   W_ASIZE  $end
$var parameter 32 H)   B_ASIZE  $end
$var parameter 32 I)   AR_ASIZE  $end
$var parameter 32 J)   R_ASIZE  $end
$var reg       1 K)   aw_full  $end
$var reg       1 L)   aw_empty  $end
$var reg       1 M)   w_full  $end
$var reg       1 N)   w_empty  $end
$var reg       1 O)   ar_full  $end
$var reg       1 P)   ar_empty  $end
$var reg       1 Q)   r_full  $end
$var reg       1 R)   r_empty  $end
$var reg       1 S)   b_full  $end
$var reg       1 T)   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 U)   PASS_THRU  $end
$var parameter 32 V)   ADDR_WIDTH  $end
$var parameter 32 W)   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 X)   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 Y)   full  $end
$var reg      27 Z)   data_out [26:0] $end
$var wire      1 /)   pull  $end
$var reg       1 [)   empty  $end
$var reg       1 \)   wr_en  $end
$var reg       3 ])   wrptr [2:0] $end
$var reg       3 ^)   rdptr [2:0] $end
$var reg       1 _)   empty_flag  $end
$var reg       1 `)   full_flag  $end
$var reg       1 a)   pass_thru  $end
$var reg      27 b)   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 c)   ADDR_WIDTH  $end
$var parameter 32 d)   DATA_WIDTH  $end
$var parameter 32 e)   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 f)   wr_en  $end
$var wire      2 g)   addr_in [1:0] $end
$var wire     27 X)   data_in [26:0] $end
$var wire      2 h)   addr_out [1:0] $end
$var reg      27 i)   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 j)   PASS_THRU  $end
$var parameter 32 k)   ADDR_WIDTH  $end
$var parameter 32 l)   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 m)   data_in [45:0] $end
$var wire      1 h    push  $end
$var reg       1 n)   full  $end
$var reg      46 o)   data_out [45:0] $end
$var wire      1 2)   pull  $end
$var reg       1 p)   empty  $end
$var reg       1 q)   wr_en  $end
$var reg       3 r)   wrptr [2:0] $end
$var reg       3 s)   rdptr [2:0] $end
$var reg       1 t)   empty_flag  $end
$var reg       1 u)   full_flag  $end
$var reg       1 v)   pass_thru  $end
$var reg      46 w)   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 x)   ADDR_WIDTH  $end
$var parameter 32 y)   DATA_WIDTH  $end
$var parameter 32 z)   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 {)   wr_en  $end
$var wire      2 |)   addr_in [1:0] $end
$var wire     46 m)   data_in [45:0] $end
$var wire      2 })   addr_out [1:0] $end
$var reg      46 ~)   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 !*   PASS_THRU  $end
$var parameter 32 "*   ADDR_WIDTH  $end
$var parameter 32 #*   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 7)   data_in [9:0] $end
$var wire      1 5)   push  $end
$var reg       1 $*   full  $end
$var reg      10 %*   data_out [9:0] $end
$var wire      1 h    pull  $end
$var reg       1 &*   empty  $end
$var reg       1 '*   wr_en  $end
$var reg       3 (*   wrptr [2:0] $end
$var reg       3 )*   rdptr [2:0] $end
$var reg       1 **   empty_flag  $end
$var reg       1 +*   full_flag  $end
$var reg       1 ,*   pass_thru  $end
$var reg      10 -*   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 .*   ADDR_WIDTH  $end
$var parameter 32 /*   DATA_WIDTH  $end
$var parameter 32 0*   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 1*   wr_en  $end
$var wire      2 2*   addr_in [1:0] $end
$var wire     10 7)   data_in [9:0] $end
$var wire      2 3*   addr_out [1:0] $end
$var reg      10 4*   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 5*   PASS_THRU  $end
$var parameter 32 6*   ADDR_WIDTH  $end
$var parameter 32 7*   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 8*   data_in [26:0] $end
$var wire      1 h    push  $end
$var reg       1 9*   full  $end
$var reg      27 :*   data_out [26:0] $end
$var wire      1 9)   pull  $end
$var reg       1 ;*   empty  $end
$var reg       1 <*   wr_en  $end
$var reg       3 =*   wrptr [2:0] $end
$var reg       3 >*   rdptr [2:0] $end
$var reg       1 ?*   empty_flag  $end
$var reg       1 @*   full_flag  $end
$var reg       1 A*   pass_thru  $end
$var reg      27 B*   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 C*   ADDR_WIDTH  $end
$var parameter 32 D*   DATA_WIDTH  $end
$var parameter 32 E*   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 F*   wr_en  $end
$var wire      2 G*   addr_in [1:0] $end
$var wire     27 8*   data_in [26:0] $end
$var wire      2 H*   addr_out [1:0] $end
$var reg      27 I*   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 J*   PASS_THRU  $end
$var parameter 32 K*   ADDR_WIDTH  $end
$var parameter 32 L*   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 M*   data_in [50:0] $end
$var wire      1 ;)   push  $end
$var reg       1 N*   full  $end
$var reg      51 O*   data_out [50:0] $end
$var wire      1 h    pull  $end
$var reg       1 P*   empty  $end
$var reg       1 Q*   wr_en  $end
$var reg       3 R*   wrptr [2:0] $end
$var reg       3 S*   rdptr [2:0] $end
$var reg       1 T*   empty_flag  $end
$var reg       1 U*   full_flag  $end
$var reg       1 V*   pass_thru  $end
$var reg      51 W*   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 X*   ADDR_WIDTH  $end
$var parameter 32 Y*   DATA_WIDTH  $end
$var parameter 32 Z*   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 [*   wr_en  $end
$var wire      2 \*   addr_in [1:0] $end
$var wire     51 M*   data_in [50:0] $end
$var wire      2 ]*   addr_out [1:0] $end
$var reg      51 ^*   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module switchs $end
$var parameter 32 _*   AXI_ADDR_W  $end
$var parameter 32 `*   AXI_ID_W  $end
$var parameter 32 a*   AXI_DATA_W  $end
$var parameter 32 b*   AXI_SIGNALING  $end
$var parameter 32 c*   MST_NB  $end
$var parameter 32 d*   SLV_NB  $end
$var parameter 32 e*   MST_PIPELINE  $end
$var parameter 32 f*   SLV_PIPELINE  $end
$var parameter 32 g*   TIMEOUT_ENABLE  $end
$var parameter 16 h*   MST_ROUTES [15:0] $end
$var parameter  8 i*   MST0_ID_MASK [7:0] $end
$var parameter  8 j*   MST1_ID_MASK [7:0] $end
$var parameter  8 k*   MST2_ID_MASK [7:0] $end
$var parameter  8 l*   MST3_ID_MASK [7:0] $end
$var parameter 32 m*   MST0_PRIORITY  $end
$var parameter 32 n*   MST1_PRIORITY  $end
$var parameter 32 o*   MST2_PRIORITY  $end
$var parameter 32 p*   MST3_PRIORITY  $end
$var parameter 32 q*   SLV0_START_ADDR  $end
$var parameter 32 r*   SLV0_END_ADDR  $end
$var parameter 32 s*   SLV1_START_ADDR  $end
$var parameter 32 t*   SLV1_END_ADDR  $end
$var parameter 32 u*   SLV2_START_ADDR  $end
$var parameter 32 v*   SLV2_END_ADDR  $end
$var parameter 32 w*   SLV3_START_ADDR  $end
$var parameter 32 x*   SLV3_END_ADDR  $end
$var parameter 32 y*   AWCH_W  $end
$var parameter 32 z*   WCH_W  $end
$var parameter 32 {*   BCH_W  $end
$var parameter 32 |*   ARCH_W  $end
$var parameter 32 }*   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~*   i_awvalid [3] $end
$var wire      1 !+   i_awvalid [2] $end
$var wire      1 "+   i_awvalid [1] $end
$var wire      1 #+   i_awvalid [0] $end
$var reg       4 $+   i_awready [3:0] $end
$var wire     108 %+   i_awch [107:0] $end
$var wire      1 &+   i_wvalid [3] $end
$var wire      1 '+   i_wvalid [2] $end
$var wire      1 (+   i_wvalid [1] $end
$var wire      1 )+   i_wvalid [0] $end
$var reg       4 *+   i_wready [3:0] $end
$var wire      4 ++   i_wlast [3:0] $end
$var wire     180 ,+   i_wch [179:0] $end
$var reg       4 -+   i_bvalid [3:0] $end
$var wire      1 .+   i_bready [3] $end
$var wire      1 /+   i_bready [2] $end
$var wire      1 0+   i_bready [1] $end
$var wire      1 1+   i_bready [0] $end
$var reg      40 2+   i_bch [39:0] $end
$var wire      1 3+   i_arvalid [3] $end
$var wire      1 4+   i_arvalid [2] $end
$var wire      1 5+   i_arvalid [1] $end
$var wire      1 6+   i_arvalid [0] $end
$var reg       4 7+   i_arready [3:0] $end
$var wire     108 8+   i_arch [107:0] $end
$var reg       4 9+   i_rvalid [3:0] $end
$var wire      1 :+   i_rready [3] $end
$var wire      1 ;+   i_rready [2] $end
$var wire      1 <+   i_rready [1] $end
$var wire      1 =+   i_rready [0] $end
$var reg       4 >+   i_rlast [3:0] $end
$var reg      200 ?+   i_rch [199:0] $end
$var reg       4 @+   o_awvalid [3:0] $end
$var wire      1 A+   o_awready [3] $end
$var wire      1 B+   o_awready [2] $end
$var wire      1 C+   o_awready [1] $end
$var wire      1 D+   o_awready [0] $end
$var reg      108 E+   o_awch [107:0] $end
$var reg       4 F+   o_wvalid [3:0] $end
$var wire      1 G+   o_wready [3] $end
$var wire      1 H+   o_wready [2] $end
$var wire      1 I+   o_wready [1] $end
$var wire      1 J+   o_wready [0] $end
$var reg       4 K+   o_wlast [3:0] $end
$var reg      180 L+   o_wch [179:0] $end
$var wire      1 M+   o_bvalid [3] $end
$var wire      1 N+   o_bvalid [2] $end
$var wire      1 O+   o_bvalid [1] $end
$var wire      1 P+   o_bvalid [0] $end
$var reg       4 Q+   o_bready [3:0] $end
$var wire     40 R+   o_bch [39:0] $end
$var reg       4 S+   o_arvalid [3:0] $end
$var wire      1 T+   o_arready [3] $end
$var wire      1 U+   o_arready [2] $end
$var wire      1 V+   o_arready [1] $end
$var wire      1 W+   o_arready [0] $end
$var reg      108 X+   o_arch [107:0] $end
$var wire      1 Y+   o_rvalid [3] $end
$var wire      1 Z+   o_rvalid [2] $end
$var wire      1 [+   o_rvalid [1] $end
$var wire      1 \+   o_rvalid [0] $end
$var reg       4 ]+   o_rready [3:0] $end
$var wire      4 ^+   o_rlast [3:0] $end
$var wire     200 _+   o_rch [199:0] $end
$var reg      16 `+   slv_awvalid [15:0] $end
$var reg      16 a+   slv_awready [15:0] $end
$var reg      108 b+   awch [107:0] $end
$var reg      16 c+   slv_wvalid [15:0] $end
$var reg      16 d+   slv_wready [15:0] $end
$var reg      16 e+   slv_wlast [15:0] $end
$var reg      180 f+   wch [179:0] $end
$var reg      16 g+   slv_bvalid [15:0] $end
$var reg      16 h+   slv_bready [15:0] $end
$var reg      16 i+   slv_arvalid [15:0] $end
$var reg      16 j+   slv_arready [15:0] $end
$var reg      108 k+   arch [107:0] $end
$var reg      16 l+   slv_rvalid [15:0] $end
$var reg      16 m+   slv_rready [15:0] $end
$var reg      16 n+   slv_rlast [15:0] $end
$var reg      16 o+   mst_awvalid [15:0] $end
$var reg      16 p+   mst_awready [15:0] $end
$var reg      16 q+   mst_wvalid [15:0] $end
$var reg      16 r+   mst_wready [15:0] $end
$var reg      16 s+   mst_wlast [15:0] $end
$var reg      16 t+   mst_bvalid [15:0] $end
$var reg      16 u+   mst_bready [15:0] $end
$var reg      40 v+   bch [39:0] $end
$var reg      16 w+   mst_arvalid [15:0] $end
$var reg      16 x+   mst_arready [15:0] $end
$var reg      16 y+   mst_rvalid [15:0] $end
$var reg      16 z+   mst_rready [15:0] $end
$var reg      16 {+   mst_rlast [15:0] $end
$var reg      200 |+   rch [199:0] $end

$scope begin SLV_SWITCHS_GEN[0] $end
$var parameter 32 }+   i [31:0] $end
$var reg       1 ~+   pipe_awvalid  $end
$var reg       1 !,   pipe_awready  $end
$var reg      27 ",   pipe_awch [26:0] $end
$var reg       1 #,   pipe_wvalid  $end
$var reg       1 $,   pipe_wready  $end
$var reg       1 %,   pipe_wlast  $end
$var reg      45 &,   pipe_wch [44:0] $end
$var reg       1 ',   pipe_bvalid  $end
$var reg       1 (,   pipe_bready  $end
$var reg      10 ),   pipe_bch [9:0] $end
$var reg       1 *,   pipe_arvalid  $end
$var reg       1 +,   pipe_arready  $end
$var reg      27 ,,   pipe_arch [26:0] $end
$var reg       1 -,   pipe_rvalid  $end
$var reg       1 .,   pipe_rready  $end
$var reg       1 /,   pipe_rlast  $end
$var reg      50 0,   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 1,   DATA_BUS_W  $end
$var parameter 32 2,   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 #+   i_valid  $end
$var reg       1 3,   i_ready  $end
$var wire     27 4,   i_data [26:0] $end
$var reg       1 5,   o_valid  $end
$var wire      1 6,   o_ready  $end
$var reg      27 7,   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 8,   DATA_BUS_W  $end
$var parameter 32 9,   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 )+   i_valid  $end
$var reg       1 :,   i_ready  $end
$var wire     46 ;,   i_data [45:0] $end
$var reg       1 <,   o_valid  $end
$var wire      1 =,   o_ready  $end
$var reg      46 >,   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 ?,   DATA_BUS_W  $end
$var parameter 32 @,   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 A,   i_valid  $end
$var reg       1 B,   i_ready  $end
$var wire     10 C,   i_data [9:0] $end
$var reg       1 D,   o_valid  $end
$var wire      1 1+   o_ready  $end
$var reg      10 E,   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 F,   DATA_BUS_W  $end
$var parameter 32 G,   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 6+   i_valid  $end
$var reg       1 H,   i_ready  $end
$var wire     27 I,   i_data [26:0] $end
$var reg       1 J,   o_valid  $end
$var wire      1 K,   o_ready  $end
$var reg      27 L,   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 M,   DATA_BUS_W  $end
$var parameter 32 N,   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 O,   i_valid  $end
$var reg       1 P,   i_ready  $end
$var wire     51 Q,   i_data [50:0] $end
$var reg       1 R,   o_valid  $end
$var wire      1 =+   o_ready  $end
$var reg      51 S,   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 T,   AXI_ADDR_W  $end
$var parameter 32 U,   AXI_ID_W  $end
$var parameter 32 V,   AXI_SIGNALING  $end
$var parameter 32 W,   SLV_NB  $end
$var parameter 32 X,   TIMEOUT_ENABLE  $end
$var parameter  4 Y,   MST_ROUTES  $end
$var parameter 32 Z,   SLV0_START_ADDR  $end
$var parameter 32 [,   SLV0_END_ADDR  $end
$var parameter 32 \,   SLV1_START_ADDR  $end
$var parameter 32 ],   SLV1_END_ADDR  $end
$var parameter 32 ^,   SLV2_START_ADDR  $end
$var parameter 32 _,   SLV2_END_ADDR  $end
$var parameter 32 `,   SLV3_START_ADDR  $end
$var parameter 32 a,   SLV3_END_ADDR  $end
$var parameter 32 b,   AWCH_W  $end
$var parameter 32 c,   WCH_W  $end
$var parameter 32 d,   BCH_W  $end
$var parameter 32 e,   ARCH_W  $end
$var parameter 32 f,   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 g,   i_awvalid  $end
$var reg       1 h,   i_awready  $end
$var wire     27 i,   i_awch [26:0] $end
$var wire      1 j,   i_wvalid  $end
$var reg       1 k,   i_wready  $end
$var wire      1 l,   i_wlast  $end
$var wire     45 m,   i_wch [44:0] $end
$var reg       1 n,   i_bvalid  $end
$var wire      1 o,   i_bready  $end
$var reg      10 p,   i_bch [9:0] $end
$var wire      1 q,   i_arvalid  $end
$var reg       1 r,   i_arready  $end
$var wire     27 s,   i_arch [26:0] $end
$var reg       1 t,   i_rvalid  $end
$var wire      1 u,   i_rready  $end
$var reg       1 v,   i_rlast  $end
$var reg      50 w,   i_rch [49:0] $end
$var reg       4 x,   o_awvalid [3:0] $end
$var wire      4 y,   o_awready [3:0] $end
$var reg      27 z,   o_awch [26:0] $end
$var reg       4 {,   o_wvalid [3:0] $end
$var wire      4 |,   o_wready [3:0] $end
$var reg       4 },   o_wlast [3:0] $end
$var reg      45 ~,   o_wch [44:0] $end
$var wire      4 !-   o_bvalid [3:0] $end
$var reg       4 "-   o_bready [3:0] $end
$var wire     40 #-   o_bch [39:0] $end
$var reg       4 $-   o_arvalid [3:0] $end
$var wire      4 %-   o_arready [3:0] $end
$var reg      27 &-   o_arch [26:0] $end
$var wire      4 '-   o_rvalid [3:0] $end
$var reg       4 (-   o_rready [3:0] $end
$var wire      4 )-   o_rlast [3:0] $end
$var wire     200 *-   o_rch [199:0] $end
$var reg       1 +-   wch_full  $end
$var reg       1 ,-   wch_empty  $end
$var reg       4 --   slv_aw_targeted [3:0] $end
$var reg       4 .-   slv_w_targeted [3:0] $end
$var reg       4 /-   slv_ar_targeted [3:0] $end
$var reg       1 0-   bch_en  $end
$var reg       4 1-   bch_req [3:0] $end
$var reg       4 2-   bch_grant [3:0] $end
$var reg       1 3-   rch_en  $end
$var reg       4 4-   rch_req [3:0] $end
$var reg       4 5-   rch_grant [3:0] $end
$var reg      16 6-   slv0_start_addr [15:0] $end
$var reg      16 7-   slv0_end_addr [15:0] $end
$var reg      16 8-   slv1_start_addr [15:0] $end
$var reg      16 9-   slv1_end_addr [15:0] $end
$var reg      16 :-   slv2_start_addr [15:0] $end
$var reg      16 ;-   slv2_end_addr [15:0] $end
$var reg      16 <-   slv3_start_addr [15:0] $end
$var reg      16 =-   slv3_end_addr [15:0] $end
$var reg       1 >-   w_misrouting  $end
$var reg       1 ?-   r_misrouting  $end
$var reg       1 @-   bch_mr_full  $end
$var reg       1 A-   bch_mr_empty  $end
$var reg       8 B-   bch_mr_id [7:0] $end
$var reg       1 C-   rch_mr_full  $end
$var reg       1 D-   rch_mr_empty  $end
$var reg      16 E-   rch_mr_info [15:0] $end
$var reg       8 F-   rch_mr_id [7:0] $end
$var reg       8 G-   rch_mr_len [7:0] $end
$var reg       8 H-   rlen [7:0] $end
$var reg       1 I-   rch_running  $end
$var reg       4 J-   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 K-   PASS_THRU  $end
$var parameter 32 L-   ADDR_WIDTH  $end
$var parameter 32 M-   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 N-   data_in [3:0] $end
$var wire      1 O-   push  $end
$var reg       1 P-   full  $end
$var reg       4 Q-   data_out [3:0] $end
$var wire      1 R-   pull  $end
$var reg       1 S-   empty  $end
$var reg       1 T-   wr_en  $end
$var reg       9 U-   wrptr [8:0] $end
$var reg       9 V-   rdptr [8:0] $end
$var reg       1 W-   empty_flag  $end
$var reg       1 X-   full_flag  $end
$var reg       1 Y-   pass_thru  $end
$var reg       4 Z-   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 [-   ADDR_WIDTH  $end
$var parameter 32 \-   DATA_WIDTH  $end
$var parameter 32 ]-   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 ^-   wr_en  $end
$var wire      8 _-   addr_in [7:0] $end
$var wire      4 N-   data_in [3:0] $end
$var wire      8 `-   addr_out [7:0] $end
$var reg       4 a-   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 b-   PASS_THRU  $end
$var parameter 32 c-   ADDR_WIDTH  $end
$var parameter 32 d-   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      8 e-   data_in [7:0] $end
$var wire      1 f-   push  $end
$var reg       1 g-   full  $end
$var reg       8 h-   data_out [7:0] $end
$var wire      1 i-   pull  $end
$var reg       1 j-   empty  $end
$var reg       1 k-   wr_en  $end
$var reg       3 l-   wrptr [2:0] $end
$var reg       3 m-   rdptr [2:0] $end
$var reg       1 n-   empty_flag  $end
$var reg       1 o-   full_flag  $end
$var reg       1 p-   pass_thru  $end
$var reg       8 q-   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 r-   ADDR_WIDTH  $end
$var parameter 32 s-   DATA_WIDTH  $end
$var parameter 32 t-   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 u-   wr_en  $end
$var wire      2 v-   addr_in [1:0] $end
$var wire      8 e-   data_in [7:0] $end
$var wire      2 w-   addr_out [1:0] $end
$var reg       8 x-   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 y-   REQ_NB  $end
$var parameter 32 z-   REQ0_PRIORITY  $end
$var parameter 32 {-   REQ1_PRIORITY  $end
$var parameter 32 |-   REQ2_PRIORITY  $end
$var parameter 32 }-   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~-   en  $end
$var wire      4 !.   req [3:0] $end
$var reg       4 ".   grant [3:0] $end
$var reg       1 #.   p0_active  $end
$var reg       1 $.   p1_active  $end
$var reg       1 %.   p2_active  $end
$var reg       1 &.   p3_active  $end
$var reg       4 '.   req_p0 [3:0] $end
$var reg       4 (.   req_p1 [3:0] $end
$var reg       4 ).   req_p2 [3:0] $end
$var reg       4 *.   req_p3 [3:0] $end
$var reg       4 +.   grant_p0 [3:0] $end
$var reg       4 ,.   grant_p1 [3:0] $end
$var reg       4 -.   grant_p2 [3:0] $end
$var reg       4 ..   grant_p3 [3:0] $end
$var reg       1 /.   p0  $end
$var reg       1 0.   p1  $end
$var reg       1 1.   p2  $end
$var reg       1 2.   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 3.   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 4.   en  $end
$var wire      4 5.   req [3:0] $end
$var reg       4 6.   grant [3:0] $end
$var reg       4 7.   mask [3:0] $end
$var reg       4 8.   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 9.   PASS_THRU  $end
$var parameter 32 :.   ADDR_WIDTH  $end
$var parameter 32 ;.   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     16 <.   data_in [15:0] $end
$var wire      1 =.   push  $end
$var reg       1 >.   full  $end
$var reg      16 ?.   data_out [15:0] $end
$var wire      1 @.   pull  $end
$var reg       1 A.   empty  $end
$var reg       1 B.   wr_en  $end
$var reg       5 C.   wrptr [4:0] $end
$var reg       5 D.   rdptr [4:0] $end
$var reg       1 E.   empty_flag  $end
$var reg       1 F.   full_flag  $end
$var reg       1 G.   pass_thru  $end
$var reg      16 H.   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 I.   ADDR_WIDTH  $end
$var parameter 32 J.   DATA_WIDTH  $end
$var parameter 32 K.   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 L.   wr_en  $end
$var wire      4 M.   addr_in [3:0] $end
$var wire     16 <.   data_in [15:0] $end
$var wire      4 N.   addr_out [3:0] $end
$var reg      16 O.   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 P.   REQ_NB  $end
$var parameter 32 Q.   REQ0_PRIORITY  $end
$var parameter 32 R.   REQ1_PRIORITY  $end
$var parameter 32 S.   REQ2_PRIORITY  $end
$var parameter 32 T.   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 U.   en  $end
$var wire      4 V.   req [3:0] $end
$var reg       4 W.   grant [3:0] $end
$var reg       1 X.   p0_active  $end
$var reg       1 Y.   p1_active  $end
$var reg       1 Z.   p2_active  $end
$var reg       1 [.   p3_active  $end
$var reg       4 \.   req_p0 [3:0] $end
$var reg       4 ].   req_p1 [3:0] $end
$var reg       4 ^.   req_p2 [3:0] $end
$var reg       4 _.   req_p3 [3:0] $end
$var reg       4 `.   grant_p0 [3:0] $end
$var reg       4 a.   grant_p1 [3:0] $end
$var reg       4 b.   grant_p2 [3:0] $end
$var reg       4 c.   grant_p3 [3:0] $end
$var reg       1 d.   p0  $end
$var reg       1 e.   p1  $end
$var reg       1 f.   p2  $end
$var reg       1 g.   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 h.   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 i.   en  $end
$var wire      4 j.   req [3:0] $end
$var reg       4 k.   grant [3:0] $end
$var reg       4 l.   mask [3:0] $end
$var reg       4 m.   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[1] $end
$var parameter 32 n.   i [31:0] $end
$var reg       1 o.   pipe_awvalid  $end
$var reg       1 p.   pipe_awready  $end
$var reg      27 q.   pipe_awch [26:0] $end
$var reg       1 r.   pipe_wvalid  $end
$var reg       1 s.   pipe_wready  $end
$var reg       1 t.   pipe_wlast  $end
$var reg      45 u.   pipe_wch [44:0] $end
$var reg       1 v.   pipe_bvalid  $end
$var reg       1 w.   pipe_bready  $end
$var reg      10 x.   pipe_bch [9:0] $end
$var reg       1 y.   pipe_arvalid  $end
$var reg       1 z.   pipe_arready  $end
$var reg      27 {.   pipe_arch [26:0] $end
$var reg       1 |.   pipe_rvalid  $end
$var reg       1 }.   pipe_rready  $end
$var reg       1 ~.   pipe_rlast  $end
$var reg      50 !/   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 "/   DATA_BUS_W  $end
$var parameter 32 #/   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 "+   i_valid  $end
$var reg       1 $/   i_ready  $end
$var wire     27 %/   i_data [26:0] $end
$var reg       1 &/   o_valid  $end
$var wire      1 '/   o_ready  $end
$var reg      27 (/   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 )/   DATA_BUS_W  $end
$var parameter 32 */   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 (+   i_valid  $end
$var reg       1 +/   i_ready  $end
$var wire     46 ,/   i_data [45:0] $end
$var reg       1 -/   o_valid  $end
$var wire      1 ./   o_ready  $end
$var reg      46 //   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 0/   DATA_BUS_W  $end
$var parameter 32 1/   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 2/   i_valid  $end
$var reg       1 3/   i_ready  $end
$var wire     10 4/   i_data [9:0] $end
$var reg       1 5/   o_valid  $end
$var wire      1 0+   o_ready  $end
$var reg      10 6/   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 7/   DATA_BUS_W  $end
$var parameter 32 8/   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 5+   i_valid  $end
$var reg       1 9/   i_ready  $end
$var wire     27 :/   i_data [26:0] $end
$var reg       1 ;/   o_valid  $end
$var wire      1 </   o_ready  $end
$var reg      27 =/   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 >/   DATA_BUS_W  $end
$var parameter 32 ?/   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 @/   i_valid  $end
$var reg       1 A/   i_ready  $end
$var wire     51 B/   i_data [50:0] $end
$var reg       1 C/   o_valid  $end
$var wire      1 <+   o_ready  $end
$var reg      51 D/   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 E/   AXI_ADDR_W  $end
$var parameter 32 F/   AXI_ID_W  $end
$var parameter 32 G/   AXI_SIGNALING  $end
$var parameter 32 H/   SLV_NB  $end
$var parameter 32 I/   TIMEOUT_ENABLE  $end
$var parameter  4 J/   MST_ROUTES  $end
$var parameter 32 K/   SLV0_START_ADDR  $end
$var parameter 32 L/   SLV0_END_ADDR  $end
$var parameter 32 M/   SLV1_START_ADDR  $end
$var parameter 32 N/   SLV1_END_ADDR  $end
$var parameter 32 O/   SLV2_START_ADDR  $end
$var parameter 32 P/   SLV2_END_ADDR  $end
$var parameter 32 Q/   SLV3_START_ADDR  $end
$var parameter 32 R/   SLV3_END_ADDR  $end
$var parameter 32 S/   AWCH_W  $end
$var parameter 32 T/   WCH_W  $end
$var parameter 32 U/   BCH_W  $end
$var parameter 32 V/   ARCH_W  $end
$var parameter 32 W/   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 X/   i_awvalid  $end
$var reg       1 Y/   i_awready  $end
$var wire     27 Z/   i_awch [26:0] $end
$var wire      1 [/   i_wvalid  $end
$var reg       1 \/   i_wready  $end
$var wire      1 ]/   i_wlast  $end
$var wire     45 ^/   i_wch [44:0] $end
$var reg       1 _/   i_bvalid  $end
$var wire      1 `/   i_bready  $end
$var reg      10 a/   i_bch [9:0] $end
$var wire      1 b/   i_arvalid  $end
$var reg       1 c/   i_arready  $end
$var wire     27 d/   i_arch [26:0] $end
$var reg       1 e/   i_rvalid  $end
$var wire      1 f/   i_rready  $end
$var reg       1 g/   i_rlast  $end
$var reg      50 h/   i_rch [49:0] $end
$var reg       4 i/   o_awvalid [3:0] $end
$var wire      4 j/   o_awready [3:0] $end
$var reg      27 k/   o_awch [26:0] $end
$var reg       4 l/   o_wvalid [3:0] $end
$var wire      4 m/   o_wready [3:0] $end
$var reg       4 n/   o_wlast [3:0] $end
$var reg      45 o/   o_wch [44:0] $end
$var wire      4 p/   o_bvalid [3:0] $end
$var reg       4 q/   o_bready [3:0] $end
$var wire     40 r/   o_bch [39:0] $end
$var reg       4 s/   o_arvalid [3:0] $end
$var wire      4 t/   o_arready [3:0] $end
$var reg      27 u/   o_arch [26:0] $end
$var wire      4 v/   o_rvalid [3:0] $end
$var reg       4 w/   o_rready [3:0] $end
$var wire      4 x/   o_rlast [3:0] $end
$var wire     200 y/   o_rch [199:0] $end
$var reg       1 z/   wch_full  $end
$var reg       1 {/   wch_empty  $end
$var reg       4 |/   slv_aw_targeted [3:0] $end
$var reg       4 }/   slv_w_targeted [3:0] $end
$var reg       4 ~/   slv_ar_targeted [3:0] $end
$var reg       1 !0   bch_en  $end
$var reg       4 "0   bch_req [3:0] $end
$var reg       4 #0   bch_grant [3:0] $end
$var reg       1 $0   rch_en  $end
$var reg       4 %0   rch_req [3:0] $end
$var reg       4 &0   rch_grant [3:0] $end
$var reg      16 '0   slv0_start_addr [15:0] $end
$var reg      16 (0   slv0_end_addr [15:0] $end
$var reg      16 )0   slv1_start_addr [15:0] $end
$var reg      16 *0   slv1_end_addr [15:0] $end
$var reg      16 +0   slv2_start_addr [15:0] $end
$var reg      16 ,0   slv2_end_addr [15:0] $end
$var reg      16 -0   slv3_start_addr [15:0] $end
$var reg      16 .0   slv3_end_addr [15:0] $end
$var reg       1 /0   w_misrouting  $end
$var reg       1 00   r_misrouting  $end
$var reg       1 10   bch_mr_full  $end
$var reg       1 20   bch_mr_empty  $end
$var reg       8 30   bch_mr_id [7:0] $end
$var reg       1 40   rch_mr_full  $end
$var reg       1 50   rch_mr_empty  $end
$var reg      16 60   rch_mr_info [15:0] $end
$var reg       8 70   rch_mr_id [7:0] $end
$var reg       8 80   rch_mr_len [7:0] $end
$var reg       8 90   rlen [7:0] $end
$var reg       1 :0   rch_running  $end
$var reg       4 ;0   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 <0   PASS_THRU  $end
$var parameter 32 =0   ADDR_WIDTH  $end
$var parameter 32 >0   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 ?0   data_in [3:0] $end
$var wire      1 @0   push  $end
$var reg       1 A0   full  $end
$var reg       4 B0   data_out [3:0] $end
$var wire      1 C0   pull  $end
$var reg       1 D0   empty  $end
$var reg       1 E0   wr_en  $end
$var reg       9 F0   wrptr [8:0] $end
$var reg       9 G0   rdptr [8:0] $end
$var reg       1 H0   empty_flag  $end
$var reg       1 I0   full_flag  $end
$var reg       1 J0   pass_thru  $end
$var reg       4 K0   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 L0   ADDR_WIDTH  $end
$var parameter 32 M0   DATA_WIDTH  $end
$var parameter 32 N0   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 O0   wr_en  $end
$var wire      8 P0   addr_in [7:0] $end
$var wire      4 ?0   data_in [3:0] $end
$var wire      8 Q0   addr_out [7:0] $end
$var reg       4 R0   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 S0   PASS_THRU  $end
$var parameter 32 T0   ADDR_WIDTH  $end
$var parameter 32 U0   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      8 V0   data_in [7:0] $end
$var wire      1 W0   push  $end
$var reg       1 X0   full  $end
$var reg       8 Y0   data_out [7:0] $end
$var wire      1 Z0   pull  $end
$var reg       1 [0   empty  $end
$var reg       1 \0   wr_en  $end
$var reg       3 ]0   wrptr [2:0] $end
$var reg       3 ^0   rdptr [2:0] $end
$var reg       1 _0   empty_flag  $end
$var reg       1 `0   full_flag  $end
$var reg       1 a0   pass_thru  $end
$var reg       8 b0   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 c0   ADDR_WIDTH  $end
$var parameter 32 d0   DATA_WIDTH  $end
$var parameter 32 e0   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 f0   wr_en  $end
$var wire      2 g0   addr_in [1:0] $end
$var wire      8 V0   data_in [7:0] $end
$var wire      2 h0   addr_out [1:0] $end
$var reg       8 i0   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 j0   REQ_NB  $end
$var parameter 32 k0   REQ0_PRIORITY  $end
$var parameter 32 l0   REQ1_PRIORITY  $end
$var parameter 32 m0   REQ2_PRIORITY  $end
$var parameter 32 n0   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 o0   en  $end
$var wire      4 p0   req [3:0] $end
$var reg       4 q0   grant [3:0] $end
$var reg       1 r0   p0_active  $end
$var reg       1 s0   p1_active  $end
$var reg       1 t0   p2_active  $end
$var reg       1 u0   p3_active  $end
$var reg       4 v0   req_p0 [3:0] $end
$var reg       4 w0   req_p1 [3:0] $end
$var reg       4 x0   req_p2 [3:0] $end
$var reg       4 y0   req_p3 [3:0] $end
$var reg       4 z0   grant_p0 [3:0] $end
$var reg       4 {0   grant_p1 [3:0] $end
$var reg       4 |0   grant_p2 [3:0] $end
$var reg       4 }0   grant_p3 [3:0] $end
$var reg       1 ~0   p0  $end
$var reg       1 !1   p1  $end
$var reg       1 "1   p2  $end
$var reg       1 #1   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 $1   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 %1   en  $end
$var wire      4 &1   req [3:0] $end
$var reg       4 '1   grant [3:0] $end
$var reg       4 (1   mask [3:0] $end
$var reg       4 )1   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 *1   PASS_THRU  $end
$var parameter 32 +1   ADDR_WIDTH  $end
$var parameter 32 ,1   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     16 -1   data_in [15:0] $end
$var wire      1 .1   push  $end
$var reg       1 /1   full  $end
$var reg      16 01   data_out [15:0] $end
$var wire      1 11   pull  $end
$var reg       1 21   empty  $end
$var reg       1 31   wr_en  $end
$var reg       5 41   wrptr [4:0] $end
$var reg       5 51   rdptr [4:0] $end
$var reg       1 61   empty_flag  $end
$var reg       1 71   full_flag  $end
$var reg       1 81   pass_thru  $end
$var reg      16 91   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 :1   ADDR_WIDTH  $end
$var parameter 32 ;1   DATA_WIDTH  $end
$var parameter 32 <1   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 =1   wr_en  $end
$var wire      4 >1   addr_in [3:0] $end
$var wire     16 -1   data_in [15:0] $end
$var wire      4 ?1   addr_out [3:0] $end
$var reg      16 @1   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 A1   REQ_NB  $end
$var parameter 32 B1   REQ0_PRIORITY  $end
$var parameter 32 C1   REQ1_PRIORITY  $end
$var parameter 32 D1   REQ2_PRIORITY  $end
$var parameter 32 E1   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 F1   en  $end
$var wire      4 G1   req [3:0] $end
$var reg       4 H1   grant [3:0] $end
$var reg       1 I1   p0_active  $end
$var reg       1 J1   p1_active  $end
$var reg       1 K1   p2_active  $end
$var reg       1 L1   p3_active  $end
$var reg       4 M1   req_p0 [3:0] $end
$var reg       4 N1   req_p1 [3:0] $end
$var reg       4 O1   req_p2 [3:0] $end
$var reg       4 P1   req_p3 [3:0] $end
$var reg       4 Q1   grant_p0 [3:0] $end
$var reg       4 R1   grant_p1 [3:0] $end
$var reg       4 S1   grant_p2 [3:0] $end
$var reg       4 T1   grant_p3 [3:0] $end
$var reg       1 U1   p0  $end
$var reg       1 V1   p1  $end
$var reg       1 W1   p2  $end
$var reg       1 X1   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 Y1   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 Z1   en  $end
$var wire      4 [1   req [3:0] $end
$var reg       4 \1   grant [3:0] $end
$var reg       4 ]1   mask [3:0] $end
$var reg       4 ^1   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[2] $end
$var parameter 32 _1   i [31:0] $end
$var reg       1 `1   pipe_awvalid  $end
$var reg       1 a1   pipe_awready  $end
$var reg      27 b1   pipe_awch [26:0] $end
$var reg       1 c1   pipe_wvalid  $end
$var reg       1 d1   pipe_wready  $end
$var reg       1 e1   pipe_wlast  $end
$var reg      45 f1   pipe_wch [44:0] $end
$var reg       1 g1   pipe_bvalid  $end
$var reg       1 h1   pipe_bready  $end
$var reg      10 i1   pipe_bch [9:0] $end
$var reg       1 j1   pipe_arvalid  $end
$var reg       1 k1   pipe_arready  $end
$var reg      27 l1   pipe_arch [26:0] $end
$var reg       1 m1   pipe_rvalid  $end
$var reg       1 n1   pipe_rready  $end
$var reg       1 o1   pipe_rlast  $end
$var reg      50 p1   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 q1   DATA_BUS_W  $end
$var parameter 32 r1   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 !+   i_valid  $end
$var reg       1 s1   i_ready  $end
$var wire     27 t1   i_data [26:0] $end
$var reg       1 u1   o_valid  $end
$var wire      1 v1   o_ready  $end
$var reg      27 w1   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 x1   DATA_BUS_W  $end
$var parameter 32 y1   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 '+   i_valid  $end
$var reg       1 z1   i_ready  $end
$var wire     46 {1   i_data [45:0] $end
$var reg       1 |1   o_valid  $end
$var wire      1 }1   o_ready  $end
$var reg      46 ~1   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 !2   DATA_BUS_W  $end
$var parameter 32 "2   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 #2   i_valid  $end
$var reg       1 $2   i_ready  $end
$var wire     10 %2   i_data [9:0] $end
$var reg       1 &2   o_valid  $end
$var wire      1 /+   o_ready  $end
$var reg      10 '2   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 (2   DATA_BUS_W  $end
$var parameter 32 )2   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 4+   i_valid  $end
$var reg       1 *2   i_ready  $end
$var wire     27 +2   i_data [26:0] $end
$var reg       1 ,2   o_valid  $end
$var wire      1 -2   o_ready  $end
$var reg      27 .2   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 /2   DATA_BUS_W  $end
$var parameter 32 02   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 12   i_valid  $end
$var reg       1 22   i_ready  $end
$var wire     51 32   i_data [50:0] $end
$var reg       1 42   o_valid  $end
$var wire      1 ;+   o_ready  $end
$var reg      51 52   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 62   AXI_ADDR_W  $end
$var parameter 32 72   AXI_ID_W  $end
$var parameter 32 82   AXI_SIGNALING  $end
$var parameter 32 92   SLV_NB  $end
$var parameter 32 :2   TIMEOUT_ENABLE  $end
$var parameter  4 ;2   MST_ROUTES  $end
$var parameter 32 <2   SLV0_START_ADDR  $end
$var parameter 32 =2   SLV0_END_ADDR  $end
$var parameter 32 >2   SLV1_START_ADDR  $end
$var parameter 32 ?2   SLV1_END_ADDR  $end
$var parameter 32 @2   SLV2_START_ADDR  $end
$var parameter 32 A2   SLV2_END_ADDR  $end
$var parameter 32 B2   SLV3_START_ADDR  $end
$var parameter 32 C2   SLV3_END_ADDR  $end
$var parameter 32 D2   AWCH_W  $end
$var parameter 32 E2   WCH_W  $end
$var parameter 32 F2   BCH_W  $end
$var parameter 32 G2   ARCH_W  $end
$var parameter 32 H2   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 I2   i_awvalid  $end
$var reg       1 J2   i_awready  $end
$var wire     27 K2   i_awch [26:0] $end
$var wire      1 L2   i_wvalid  $end
$var reg       1 M2   i_wready  $end
$var wire      1 N2   i_wlast  $end
$var wire     45 O2   i_wch [44:0] $end
$var reg       1 P2   i_bvalid  $end
$var wire      1 Q2   i_bready  $end
$var reg      10 R2   i_bch [9:0] $end
$var wire      1 S2   i_arvalid  $end
$var reg       1 T2   i_arready  $end
$var wire     27 U2   i_arch [26:0] $end
$var reg       1 V2   i_rvalid  $end
$var wire      1 W2   i_rready  $end
$var reg       1 X2   i_rlast  $end
$var reg      50 Y2   i_rch [49:0] $end
$var reg       4 Z2   o_awvalid [3:0] $end
$var wire      4 [2   o_awready [3:0] $end
$var reg      27 \2   o_awch [26:0] $end
$var reg       4 ]2   o_wvalid [3:0] $end
$var wire      4 ^2   o_wready [3:0] $end
$var reg       4 _2   o_wlast [3:0] $end
$var reg      45 `2   o_wch [44:0] $end
$var wire      4 a2   o_bvalid [3:0] $end
$var reg       4 b2   o_bready [3:0] $end
$var wire     40 c2   o_bch [39:0] $end
$var reg       4 d2   o_arvalid [3:0] $end
$var wire      4 e2   o_arready [3:0] $end
$var reg      27 f2   o_arch [26:0] $end
$var wire      4 g2   o_rvalid [3:0] $end
$var reg       4 h2   o_rready [3:0] $end
$var wire      4 i2   o_rlast [3:0] $end
$var wire     200 j2   o_rch [199:0] $end
$var reg       1 k2   wch_full  $end
$var reg       1 l2   wch_empty  $end
$var reg       4 m2   slv_aw_targeted [3:0] $end
$var reg       4 n2   slv_w_targeted [3:0] $end
$var reg       4 o2   slv_ar_targeted [3:0] $end
$var reg       1 p2   bch_en  $end
$var reg       4 q2   bch_req [3:0] $end
$var reg       4 r2   bch_grant [3:0] $end
$var reg       1 s2   rch_en  $end
$var reg       4 t2   rch_req [3:0] $end
$var reg       4 u2   rch_grant [3:0] $end
$var reg      16 v2   slv0_start_addr [15:0] $end
$var reg      16 w2   slv0_end_addr [15:0] $end
$var reg      16 x2   slv1_start_addr [15:0] $end
$var reg      16 y2   slv1_end_addr [15:0] $end
$var reg      16 z2   slv2_start_addr [15:0] $end
$var reg      16 {2   slv2_end_addr [15:0] $end
$var reg      16 |2   slv3_start_addr [15:0] $end
$var reg      16 }2   slv3_end_addr [15:0] $end
$var reg       1 ~2   w_misrouting  $end
$var reg       1 !3   r_misrouting  $end
$var reg       1 "3   bch_mr_full  $end
$var reg       1 #3   bch_mr_empty  $end
$var reg       8 $3   bch_mr_id [7:0] $end
$var reg       1 %3   rch_mr_full  $end
$var reg       1 &3   rch_mr_empty  $end
$var reg      16 '3   rch_mr_info [15:0] $end
$var reg       8 (3   rch_mr_id [7:0] $end
$var reg       8 )3   rch_mr_len [7:0] $end
$var reg       8 *3   rlen [7:0] $end
$var reg       1 +3   rch_running  $end
$var reg       4 ,3   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 -3   PASS_THRU  $end
$var parameter 32 .3   ADDR_WIDTH  $end
$var parameter 32 /3   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 03   data_in [3:0] $end
$var wire      1 13   push  $end
$var reg       1 23   full  $end
$var reg       4 33   data_out [3:0] $end
$var wire      1 43   pull  $end
$var reg       1 53   empty  $end
$var reg       1 63   wr_en  $end
$var reg       9 73   wrptr [8:0] $end
$var reg       9 83   rdptr [8:0] $end
$var reg       1 93   empty_flag  $end
$var reg       1 :3   full_flag  $end
$var reg       1 ;3   pass_thru  $end
$var reg       4 <3   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 =3   ADDR_WIDTH  $end
$var parameter 32 >3   DATA_WIDTH  $end
$var parameter 32 ?3   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 @3   wr_en  $end
$var wire      8 A3   addr_in [7:0] $end
$var wire      4 03   data_in [3:0] $end
$var wire      8 B3   addr_out [7:0] $end
$var reg       4 C3   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 D3   PASS_THRU  $end
$var parameter 32 E3   ADDR_WIDTH  $end
$var parameter 32 F3   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      8 G3   data_in [7:0] $end
$var wire      1 H3   push  $end
$var reg       1 I3   full  $end
$var reg       8 J3   data_out [7:0] $end
$var wire      1 K3   pull  $end
$var reg       1 L3   empty  $end
$var reg       1 M3   wr_en  $end
$var reg       3 N3   wrptr [2:0] $end
$var reg       3 O3   rdptr [2:0] $end
$var reg       1 P3   empty_flag  $end
$var reg       1 Q3   full_flag  $end
$var reg       1 R3   pass_thru  $end
$var reg       8 S3   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 T3   ADDR_WIDTH  $end
$var parameter 32 U3   DATA_WIDTH  $end
$var parameter 32 V3   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 W3   wr_en  $end
$var wire      2 X3   addr_in [1:0] $end
$var wire      8 G3   data_in [7:0] $end
$var wire      2 Y3   addr_out [1:0] $end
$var reg       8 Z3   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 [3   REQ_NB  $end
$var parameter 32 \3   REQ0_PRIORITY  $end
$var parameter 32 ]3   REQ1_PRIORITY  $end
$var parameter 32 ^3   REQ2_PRIORITY  $end
$var parameter 32 _3   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 `3   en  $end
$var wire      4 a3   req [3:0] $end
$var reg       4 b3   grant [3:0] $end
$var reg       1 c3   p0_active  $end
$var reg       1 d3   p1_active  $end
$var reg       1 e3   p2_active  $end
$var reg       1 f3   p3_active  $end
$var reg       4 g3   req_p0 [3:0] $end
$var reg       4 h3   req_p1 [3:0] $end
$var reg       4 i3   req_p2 [3:0] $end
$var reg       4 j3   req_p3 [3:0] $end
$var reg       4 k3   grant_p0 [3:0] $end
$var reg       4 l3   grant_p1 [3:0] $end
$var reg       4 m3   grant_p2 [3:0] $end
$var reg       4 n3   grant_p3 [3:0] $end
$var reg       1 o3   p0  $end
$var reg       1 p3   p1  $end
$var reg       1 q3   p2  $end
$var reg       1 r3   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 s3   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 t3   en  $end
$var wire      4 u3   req [3:0] $end
$var reg       4 v3   grant [3:0] $end
$var reg       4 w3   mask [3:0] $end
$var reg       4 x3   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 y3   PASS_THRU  $end
$var parameter 32 z3   ADDR_WIDTH  $end
$var parameter 32 {3   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     16 |3   data_in [15:0] $end
$var wire      1 }3   push  $end
$var reg       1 ~3   full  $end
$var reg      16 !4   data_out [15:0] $end
$var wire      1 "4   pull  $end
$var reg       1 #4   empty  $end
$var reg       1 $4   wr_en  $end
$var reg       5 %4   wrptr [4:0] $end
$var reg       5 &4   rdptr [4:0] $end
$var reg       1 '4   empty_flag  $end
$var reg       1 (4   full_flag  $end
$var reg       1 )4   pass_thru  $end
$var reg      16 *4   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 +4   ADDR_WIDTH  $end
$var parameter 32 ,4   DATA_WIDTH  $end
$var parameter 32 -4   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 .4   wr_en  $end
$var wire      4 /4   addr_in [3:0] $end
$var wire     16 |3   data_in [15:0] $end
$var wire      4 04   addr_out [3:0] $end
$var reg      16 14   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 24   REQ_NB  $end
$var parameter 32 34   REQ0_PRIORITY  $end
$var parameter 32 44   REQ1_PRIORITY  $end
$var parameter 32 54   REQ2_PRIORITY  $end
$var parameter 32 64   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 74   en  $end
$var wire      4 84   req [3:0] $end
$var reg       4 94   grant [3:0] $end
$var reg       1 :4   p0_active  $end
$var reg       1 ;4   p1_active  $end
$var reg       1 <4   p2_active  $end
$var reg       1 =4   p3_active  $end
$var reg       4 >4   req_p0 [3:0] $end
$var reg       4 ?4   req_p1 [3:0] $end
$var reg       4 @4   req_p2 [3:0] $end
$var reg       4 A4   req_p3 [3:0] $end
$var reg       4 B4   grant_p0 [3:0] $end
$var reg       4 C4   grant_p1 [3:0] $end
$var reg       4 D4   grant_p2 [3:0] $end
$var reg       4 E4   grant_p3 [3:0] $end
$var reg       1 F4   p0  $end
$var reg       1 G4   p1  $end
$var reg       1 H4   p2  $end
$var reg       1 I4   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 J4   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 K4   en  $end
$var wire      4 L4   req [3:0] $end
$var reg       4 M4   grant [3:0] $end
$var reg       4 N4   mask [3:0] $end
$var reg       4 O4   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[3] $end
$var parameter 32 P4   i [31:0] $end
$var reg       1 Q4   pipe_awvalid  $end
$var reg       1 R4   pipe_awready  $end
$var reg      27 S4   pipe_awch [26:0] $end
$var reg       1 T4   pipe_wvalid  $end
$var reg       1 U4   pipe_wready  $end
$var reg       1 V4   pipe_wlast  $end
$var reg      45 W4   pipe_wch [44:0] $end
$var reg       1 X4   pipe_bvalid  $end
$var reg       1 Y4   pipe_bready  $end
$var reg      10 Z4   pipe_bch [9:0] $end
$var reg       1 [4   pipe_arvalid  $end
$var reg       1 \4   pipe_arready  $end
$var reg      27 ]4   pipe_arch [26:0] $end
$var reg       1 ^4   pipe_rvalid  $end
$var reg       1 _4   pipe_rready  $end
$var reg       1 `4   pipe_rlast  $end
$var reg      50 a4   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 b4   DATA_BUS_W  $end
$var parameter 32 c4   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~*   i_valid  $end
$var reg       1 d4   i_ready  $end
$var wire     27 e4   i_data [26:0] $end
$var reg       1 f4   o_valid  $end
$var wire      1 g4   o_ready  $end
$var reg      27 h4   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 i4   DATA_BUS_W  $end
$var parameter 32 j4   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 &+   i_valid  $end
$var reg       1 k4   i_ready  $end
$var wire     46 l4   i_data [45:0] $end
$var reg       1 m4   o_valid  $end
$var wire      1 n4   o_ready  $end
$var reg      46 o4   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 p4   DATA_BUS_W  $end
$var parameter 32 q4   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 r4   i_valid  $end
$var reg       1 s4   i_ready  $end
$var wire     10 t4   i_data [9:0] $end
$var reg       1 u4   o_valid  $end
$var wire      1 .+   o_ready  $end
$var reg      10 v4   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 w4   DATA_BUS_W  $end
$var parameter 32 x4   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 3+   i_valid  $end
$var reg       1 y4   i_ready  $end
$var wire     27 z4   i_data [26:0] $end
$var reg       1 {4   o_valid  $end
$var wire      1 |4   o_ready  $end
$var reg      27 }4   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 ~4   DATA_BUS_W  $end
$var parameter 32 !5   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 "5   i_valid  $end
$var reg       1 #5   i_ready  $end
$var wire     51 $5   i_data [50:0] $end
$var reg       1 %5   o_valid  $end
$var wire      1 :+   o_ready  $end
$var reg      51 &5   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 '5   AXI_ADDR_W  $end
$var parameter 32 (5   AXI_ID_W  $end
$var parameter 32 )5   AXI_SIGNALING  $end
$var parameter 32 *5   SLV_NB  $end
$var parameter 32 +5   TIMEOUT_ENABLE  $end
$var parameter  4 ,5   MST_ROUTES  $end
$var parameter 32 -5   SLV0_START_ADDR  $end
$var parameter 32 .5   SLV0_END_ADDR  $end
$var parameter 32 /5   SLV1_START_ADDR  $end
$var parameter 32 05   SLV1_END_ADDR  $end
$var parameter 32 15   SLV2_START_ADDR  $end
$var parameter 32 25   SLV2_END_ADDR  $end
$var parameter 32 35   SLV3_START_ADDR  $end
$var parameter 32 45   SLV3_END_ADDR  $end
$var parameter 32 55   AWCH_W  $end
$var parameter 32 65   WCH_W  $end
$var parameter 32 75   BCH_W  $end
$var parameter 32 85   ARCH_W  $end
$var parameter 32 95   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 :5   i_awvalid  $end
$var reg       1 ;5   i_awready  $end
$var wire     27 <5   i_awch [26:0] $end
$var wire      1 =5   i_wvalid  $end
$var reg       1 >5   i_wready  $end
$var wire      1 ?5   i_wlast  $end
$var wire     45 @5   i_wch [44:0] $end
$var reg       1 A5   i_bvalid  $end
$var wire      1 B5   i_bready  $end
$var reg      10 C5   i_bch [9:0] $end
$var wire      1 D5   i_arvalid  $end
$var reg       1 E5   i_arready  $end
$var wire     27 F5   i_arch [26:0] $end
$var reg       1 G5   i_rvalid  $end
$var wire      1 H5   i_rready  $end
$var reg       1 I5   i_rlast  $end
$var reg      50 J5   i_rch [49:0] $end
$var reg       4 K5   o_awvalid [3:0] $end
$var wire      4 L5   o_awready [3:0] $end
$var reg      27 M5   o_awch [26:0] $end
$var reg       4 N5   o_wvalid [3:0] $end
$var wire      4 O5   o_wready [3:0] $end
$var reg       4 P5   o_wlast [3:0] $end
$var reg      45 Q5   o_wch [44:0] $end
$var wire      4 R5   o_bvalid [3:0] $end
$var reg       4 S5   o_bready [3:0] $end
$var wire     40 T5   o_bch [39:0] $end
$var reg       4 U5   o_arvalid [3:0] $end
$var wire      4 V5   o_arready [3:0] $end
$var reg      27 W5   o_arch [26:0] $end
$var wire      4 X5   o_rvalid [3:0] $end
$var reg       4 Y5   o_rready [3:0] $end
$var wire      4 Z5   o_rlast [3:0] $end
$var wire     200 [5   o_rch [199:0] $end
$var reg       1 \5   wch_full  $end
$var reg       1 ]5   wch_empty  $end
$var reg       4 ^5   slv_aw_targeted [3:0] $end
$var reg       4 _5   slv_w_targeted [3:0] $end
$var reg       4 `5   slv_ar_targeted [3:0] $end
$var reg       1 a5   bch_en  $end
$var reg       4 b5   bch_req [3:0] $end
$var reg       4 c5   bch_grant [3:0] $end
$var reg       1 d5   rch_en  $end
$var reg       4 e5   rch_req [3:0] $end
$var reg       4 f5   rch_grant [3:0] $end
$var reg      16 g5   slv0_start_addr [15:0] $end
$var reg      16 h5   slv0_end_addr [15:0] $end
$var reg      16 i5   slv1_start_addr [15:0] $end
$var reg      16 j5   slv1_end_addr [15:0] $end
$var reg      16 k5   slv2_start_addr [15:0] $end
$var reg      16 l5   slv2_end_addr [15:0] $end
$var reg      16 m5   slv3_start_addr [15:0] $end
$var reg      16 n5   slv3_end_addr [15:0] $end
$var reg       1 o5   w_misrouting  $end
$var reg       1 p5   r_misrouting  $end
$var reg       1 q5   bch_mr_full  $end
$var reg       1 r5   bch_mr_empty  $end
$var reg       8 s5   bch_mr_id [7:0] $end
$var reg       1 t5   rch_mr_full  $end
$var reg       1 u5   rch_mr_empty  $end
$var reg      16 v5   rch_mr_info [15:0] $end
$var reg       8 w5   rch_mr_id [7:0] $end
$var reg       8 x5   rch_mr_len [7:0] $end
$var reg       8 y5   rlen [7:0] $end
$var reg       1 z5   rch_running  $end
$var reg       4 {5   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 |5   PASS_THRU  $end
$var parameter 32 }5   ADDR_WIDTH  $end
$var parameter 32 ~5   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 !6   data_in [3:0] $end
$var wire      1 "6   push  $end
$var reg       1 #6   full  $end
$var reg       4 $6   data_out [3:0] $end
$var wire      1 %6   pull  $end
$var reg       1 &6   empty  $end
$var reg       1 '6   wr_en  $end
$var reg       9 (6   wrptr [8:0] $end
$var reg       9 )6   rdptr [8:0] $end
$var reg       1 *6   empty_flag  $end
$var reg       1 +6   full_flag  $end
$var reg       1 ,6   pass_thru  $end
$var reg       4 -6   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 .6   ADDR_WIDTH  $end
$var parameter 32 /6   DATA_WIDTH  $end
$var parameter 32 06   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 16   wr_en  $end
$var wire      8 26   addr_in [7:0] $end
$var wire      4 !6   data_in [3:0] $end
$var wire      8 36   addr_out [7:0] $end
$var reg       4 46   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 56   PASS_THRU  $end
$var parameter 32 66   ADDR_WIDTH  $end
$var parameter 32 76   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      8 86   data_in [7:0] $end
$var wire      1 96   push  $end
$var reg       1 :6   full  $end
$var reg       8 ;6   data_out [7:0] $end
$var wire      1 <6   pull  $end
$var reg       1 =6   empty  $end
$var reg       1 >6   wr_en  $end
$var reg       3 ?6   wrptr [2:0] $end
$var reg       3 @6   rdptr [2:0] $end
$var reg       1 A6   empty_flag  $end
$var reg       1 B6   full_flag  $end
$var reg       1 C6   pass_thru  $end
$var reg       8 D6   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 E6   ADDR_WIDTH  $end
$var parameter 32 F6   DATA_WIDTH  $end
$var parameter 32 G6   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 H6   wr_en  $end
$var wire      2 I6   addr_in [1:0] $end
$var wire      8 86   data_in [7:0] $end
$var wire      2 J6   addr_out [1:0] $end
$var reg       8 K6   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 L6   REQ_NB  $end
$var parameter 32 M6   REQ0_PRIORITY  $end
$var parameter 32 N6   REQ1_PRIORITY  $end
$var parameter 32 O6   REQ2_PRIORITY  $end
$var parameter 32 P6   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 Q6   en  $end
$var wire      4 R6   req [3:0] $end
$var reg       4 S6   grant [3:0] $end
$var reg       1 T6   p0_active  $end
$var reg       1 U6   p1_active  $end
$var reg       1 V6   p2_active  $end
$var reg       1 W6   p3_active  $end
$var reg       4 X6   req_p0 [3:0] $end
$var reg       4 Y6   req_p1 [3:0] $end
$var reg       4 Z6   req_p2 [3:0] $end
$var reg       4 [6   req_p3 [3:0] $end
$var reg       4 \6   grant_p0 [3:0] $end
$var reg       4 ]6   grant_p1 [3:0] $end
$var reg       4 ^6   grant_p2 [3:0] $end
$var reg       4 _6   grant_p3 [3:0] $end
$var reg       1 `6   p0  $end
$var reg       1 a6   p1  $end
$var reg       1 b6   p2  $end
$var reg       1 c6   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 d6   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 e6   en  $end
$var wire      4 f6   req [3:0] $end
$var reg       4 g6   grant [3:0] $end
$var reg       4 h6   mask [3:0] $end
$var reg       4 i6   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 j6   PASS_THRU  $end
$var parameter 32 k6   ADDR_WIDTH  $end
$var parameter 32 l6   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire     16 m6   data_in [15:0] $end
$var wire      1 n6   push  $end
$var reg       1 o6   full  $end
$var reg      16 p6   data_out [15:0] $end
$var wire      1 q6   pull  $end
$var reg       1 r6   empty  $end
$var reg       1 s6   wr_en  $end
$var reg       5 t6   wrptr [4:0] $end
$var reg       5 u6   rdptr [4:0] $end
$var reg       1 v6   empty_flag  $end
$var reg       1 w6   full_flag  $end
$var reg       1 x6   pass_thru  $end
$var reg      16 y6   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 z6   ADDR_WIDTH  $end
$var parameter 32 {6   DATA_WIDTH  $end
$var parameter 32 |6   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 }6   wr_en  $end
$var wire      4 ~6   addr_in [3:0] $end
$var wire     16 m6   data_in [15:0] $end
$var wire      4 !7   addr_out [3:0] $end
$var reg      16 "7   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 #7   REQ_NB  $end
$var parameter 32 $7   REQ0_PRIORITY  $end
$var parameter 32 %7   REQ1_PRIORITY  $end
$var parameter 32 &7   REQ2_PRIORITY  $end
$var parameter 32 '7   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 (7   en  $end
$var wire      4 )7   req [3:0] $end
$var reg       4 *7   grant [3:0] $end
$var reg       1 +7   p0_active  $end
$var reg       1 ,7   p1_active  $end
$var reg       1 -7   p2_active  $end
$var reg       1 .7   p3_active  $end
$var reg       4 /7   req_p0 [3:0] $end
$var reg       4 07   req_p1 [3:0] $end
$var reg       4 17   req_p2 [3:0] $end
$var reg       4 27   req_p3 [3:0] $end
$var reg       4 37   grant_p0 [3:0] $end
$var reg       4 47   grant_p1 [3:0] $end
$var reg       4 57   grant_p2 [3:0] $end
$var reg       4 67   grant_p3 [3:0] $end
$var reg       1 77   p0  $end
$var reg       1 87   p1  $end
$var reg       1 97   p2  $end
$var reg       1 :7   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 ;7   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 <7   en  $end
$var wire      4 =7   req [3:0] $end
$var reg       4 >7   grant [3:0] $end
$var reg       4 ?7   mask [3:0] $end
$var reg       4 @7   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[0] $end
$var parameter 32 A7   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 B7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 C7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 D7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 E7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[1] $end
$var parameter 32 F7   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 G7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 H7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 I7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 J7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[2] $end
$var parameter 32 K7   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 L7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 M7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 N7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 O7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[3] $end
$var parameter 32 P7   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 Q7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 R7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 S7   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 T7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[0] $end
$var parameter 32 U7   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 V7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 W7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 X7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 Y7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[1] $end
$var parameter 32 Z7   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 [7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 \7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 ]7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 ^7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[2] $end
$var parameter 32 _7   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 `7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 a7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 b7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 c7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[3] $end
$var parameter 32 d7   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 e7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 f7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 g7   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 h7   j [31:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[0] $end
$var parameter 32 i7   i [31:0] $end
$var reg       1 j7   pipe_awvalid  $end
$var reg       1 k7   pipe_awready  $end
$var reg      27 l7   pipe_awch [26:0] $end
$var reg       1 m7   pipe_wvalid  $end
$var reg       1 n7   pipe_wready  $end
$var reg       1 o7   pipe_wlast  $end
$var reg      45 p7   pipe_wch [44:0] $end
$var reg       1 q7   pipe_bvalid  $end
$var reg       1 r7   pipe_bready  $end
$var reg      10 s7   pipe_bch [9:0] $end
$var reg       1 t7   pipe_arvalid  $end
$var reg       1 u7   pipe_arready  $end
$var reg      27 v7   pipe_arch [26:0] $end
$var reg       1 w7   pipe_rvalid  $end
$var reg       1 x7   pipe_rready  $end
$var reg       1 y7   pipe_rlast  $end
$var reg      50 z7   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 {7   AXI_ID_W  $end
$var parameter 32 |7   AXI_DATA_W  $end
$var parameter 32 }7   MST_NB  $end
$var parameter 32 ~7   TIMEOUT_ENABLE  $end
$var parameter  8 !8   MST0_ID_MASK [7:0] $end
$var parameter  8 "8   MST1_ID_MASK [7:0] $end
$var parameter  8 #8   MST2_ID_MASK [7:0] $end
$var parameter  8 $8   MST3_ID_MASK [7:0] $end
$var parameter 32 %8   MST0_PRIORITY  $end
$var parameter 32 &8   MST1_PRIORITY  $end
$var parameter 32 '8   MST2_PRIORITY  $end
$var parameter 32 (8   MST3_PRIORITY  $end
$var parameter 32 )8   AWCH_W  $end
$var parameter 32 *8   WCH_W  $end
$var parameter 32 +8   BCH_W  $end
$var parameter 32 ,8   ARCH_W  $end
$var parameter 32 -8   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      4 .8   i_awvalid [3:0] $end
$var reg       4 /8   i_awready [3:0] $end
$var wire     108 08   i_awch [107:0] $end
$var wire      4 18   i_wvalid [3:0] $end
$var reg       4 28   i_wready [3:0] $end
$var wire      4 38   i_wlast [3:0] $end
$var wire     180 48   i_wch [179:0] $end
$var reg       4 58   i_bvalid [3:0] $end
$var wire      4 68   i_bready [3:0] $end
$var reg      10 78   i_bch [9:0] $end
$var wire      4 88   i_arvalid [3:0] $end
$var reg       4 98   i_arready [3:0] $end
$var wire     108 :8   i_arch [107:0] $end
$var reg       4 ;8   i_rvalid [3:0] $end
$var wire      4 <8   i_rready [3:0] $end
$var reg       4 =8   i_rlast [3:0] $end
$var reg      50 >8   i_rch [49:0] $end
$var reg       1 ?8   o_awvalid  $end
$var wire      1 @8   o_awready  $end
$var reg      27 A8   o_awch [26:0] $end
$var reg       1 B8   o_wvalid  $end
$var wire      1 C8   o_wready  $end
$var reg       1 D8   o_wlast  $end
$var reg      45 E8   o_wch [44:0] $end
$var wire      1 F8   o_bvalid  $end
$var reg       1 G8   o_bready  $end
$var wire     10 H8   o_bch [9:0] $end
$var reg       1 I8   o_arvalid  $end
$var wire      1 J8   o_arready  $end
$var reg      27 K8   o_arch [26:0] $end
$var wire      1 L8   o_rvalid  $end
$var reg       1 M8   o_rready  $end
$var wire      1 N8   o_rlast  $end
$var wire     50 O8   o_rch [49:0] $end
$var reg       1 P8   awch_en  $end
$var reg       4 Q8   awch_req [3:0] $end
$var reg       4 R8   awch_grant [3:0] $end
$var reg       4 S8   wch_grant [3:0] $end
$var reg       1 T8   arch_en  $end
$var reg       4 U8   arch_req [3:0] $end
$var reg       4 V8   arch_grant [3:0] $end
$var reg       1 W8   mst0_bch_targeted  $end
$var reg       1 X8   mst1_bch_targeted  $end
$var reg       1 Y8   mst2_bch_targeted  $end
$var reg       1 Z8   mst3_bch_targeted  $end
$var reg       1 [8   mst0_rch_targeted  $end
$var reg       1 \8   mst1_rch_targeted  $end
$var reg       1 ]8   mst2_rch_targeted  $end
$var reg       1 ^8   mst3_rch_targeted  $end
$var reg       1 _8   wch_full  $end
$var reg       1 `8   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 a8   REQ_NB  $end
$var parameter 32 b8   REQ0_PRIORITY  $end
$var parameter 32 c8   REQ1_PRIORITY  $end
$var parameter 32 d8   REQ2_PRIORITY  $end
$var parameter 32 e8   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 f8   en  $end
$var wire      4 g8   req [3:0] $end
$var reg       4 h8   grant [3:0] $end
$var reg       1 i8   p0_active  $end
$var reg       1 j8   p1_active  $end
$var reg       1 k8   p2_active  $end
$var reg       1 l8   p3_active  $end
$var reg       4 m8   req_p0 [3:0] $end
$var reg       4 n8   req_p1 [3:0] $end
$var reg       4 o8   req_p2 [3:0] $end
$var reg       4 p8   req_p3 [3:0] $end
$var reg       4 q8   grant_p0 [3:0] $end
$var reg       4 r8   grant_p1 [3:0] $end
$var reg       4 s8   grant_p2 [3:0] $end
$var reg       4 t8   grant_p3 [3:0] $end
$var reg       1 u8   p0  $end
$var reg       1 v8   p1  $end
$var reg       1 w8   p2  $end
$var reg       1 x8   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 y8   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 z8   en  $end
$var wire      4 {8   req [3:0] $end
$var reg       4 |8   grant [3:0] $end
$var reg       4 }8   mask [3:0] $end
$var reg       4 ~8   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 !9   PASS_THRU  $end
$var parameter 32 "9   ADDR_WIDTH  $end
$var parameter 32 #9   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 $9   data_in [3:0] $end
$var wire      1 %9   push  $end
$var reg       1 &9   full  $end
$var reg       4 '9   data_out [3:0] $end
$var wire      1 (9   pull  $end
$var reg       1 )9   empty  $end
$var reg       1 *9   wr_en  $end
$var reg       9 +9   wrptr [8:0] $end
$var reg       9 ,9   rdptr [8:0] $end
$var reg       1 -9   empty_flag  $end
$var reg       1 .9   full_flag  $end
$var reg       1 /9   pass_thru  $end
$var reg       4 09   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 19   ADDR_WIDTH  $end
$var parameter 32 29   DATA_WIDTH  $end
$var parameter 32 39   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 49   wr_en  $end
$var wire      8 59   addr_in [7:0] $end
$var wire      4 $9   data_in [3:0] $end
$var wire      8 69   addr_out [7:0] $end
$var reg       4 79   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 89   REQ_NB  $end
$var parameter 32 99   REQ0_PRIORITY  $end
$var parameter 32 :9   REQ1_PRIORITY  $end
$var parameter 32 ;9   REQ2_PRIORITY  $end
$var parameter 32 <9   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 =9   en  $end
$var wire      4 >9   req [3:0] $end
$var reg       4 ?9   grant [3:0] $end
$var reg       1 @9   p0_active  $end
$var reg       1 A9   p1_active  $end
$var reg       1 B9   p2_active  $end
$var reg       1 C9   p3_active  $end
$var reg       4 D9   req_p0 [3:0] $end
$var reg       4 E9   req_p1 [3:0] $end
$var reg       4 F9   req_p2 [3:0] $end
$var reg       4 G9   req_p3 [3:0] $end
$var reg       4 H9   grant_p0 [3:0] $end
$var reg       4 I9   grant_p1 [3:0] $end
$var reg       4 J9   grant_p2 [3:0] $end
$var reg       4 K9   grant_p3 [3:0] $end
$var reg       1 L9   p0  $end
$var reg       1 M9   p1  $end
$var reg       1 N9   p2  $end
$var reg       1 O9   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 P9   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 Q9   en  $end
$var wire      4 R9   req [3:0] $end
$var reg       4 S9   grant [3:0] $end
$var reg       4 T9   mask [3:0] $end
$var reg       4 U9   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 V9   DATA_BUS_W  $end
$var parameter 32 W9   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 X9   i_valid  $end
$var reg       1 Y9   i_ready  $end
$var wire     27 Z9   i_data [26:0] $end
$var reg       1 [9   o_valid  $end
$var wire      1 D+   o_ready  $end
$var reg      27 \9   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 ]9   DATA_BUS_W  $end
$var parameter 32 ^9   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 _9   i_valid  $end
$var reg       1 `9   i_ready  $end
$var wire     46 a9   i_data [45:0] $end
$var reg       1 b9   o_valid  $end
$var wire      1 J+   o_ready  $end
$var reg      46 c9   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 d9   DATA_BUS_W  $end
$var parameter 32 e9   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 P+   i_valid  $end
$var reg       1 f9   i_ready  $end
$var wire     10 g9   i_data [9:0] $end
$var reg       1 h9   o_valid  $end
$var wire      1 i9   o_ready  $end
$var reg      10 j9   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 k9   DATA_BUS_W  $end
$var parameter 32 l9   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 m9   i_valid  $end
$var reg       1 n9   i_ready  $end
$var wire     27 o9   i_data [26:0] $end
$var reg       1 p9   o_valid  $end
$var wire      1 W+   o_ready  $end
$var reg      27 q9   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 r9   DATA_BUS_W  $end
$var parameter 32 s9   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 \+   i_valid  $end
$var reg       1 t9   i_ready  $end
$var wire     51 u9   i_data [50:0] $end
$var reg       1 v9   o_valid  $end
$var wire      1 w9   o_ready  $end
$var reg      51 x9   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[1] $end
$var parameter 32 y9   i [31:0] $end
$var reg       1 z9   pipe_awvalid  $end
$var reg       1 {9   pipe_awready  $end
$var reg      27 |9   pipe_awch [26:0] $end
$var reg       1 }9   pipe_wvalid  $end
$var reg       1 ~9   pipe_wready  $end
$var reg       1 !:   pipe_wlast  $end
$var reg      45 ":   pipe_wch [44:0] $end
$var reg       1 #:   pipe_bvalid  $end
$var reg       1 $:   pipe_bready  $end
$var reg      10 %:   pipe_bch [9:0] $end
$var reg       1 &:   pipe_arvalid  $end
$var reg       1 ':   pipe_arready  $end
$var reg      27 (:   pipe_arch [26:0] $end
$var reg       1 ):   pipe_rvalid  $end
$var reg       1 *:   pipe_rready  $end
$var reg       1 +:   pipe_rlast  $end
$var reg      50 ,:   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 -:   AXI_ID_W  $end
$var parameter 32 .:   AXI_DATA_W  $end
$var parameter 32 /:   MST_NB  $end
$var parameter 32 0:   TIMEOUT_ENABLE  $end
$var parameter  8 1:   MST0_ID_MASK [7:0] $end
$var parameter  8 2:   MST1_ID_MASK [7:0] $end
$var parameter  8 3:   MST2_ID_MASK [7:0] $end
$var parameter  8 4:   MST3_ID_MASK [7:0] $end
$var parameter 32 5:   MST0_PRIORITY  $end
$var parameter 32 6:   MST1_PRIORITY  $end
$var parameter 32 7:   MST2_PRIORITY  $end
$var parameter 32 8:   MST3_PRIORITY  $end
$var parameter 32 9:   AWCH_W  $end
$var parameter 32 ::   WCH_W  $end
$var parameter 32 ;:   BCH_W  $end
$var parameter 32 <:   ARCH_W  $end
$var parameter 32 =:   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      4 >:   i_awvalid [3:0] $end
$var reg       4 ?:   i_awready [3:0] $end
$var wire     108 @:   i_awch [107:0] $end
$var wire      4 A:   i_wvalid [3:0] $end
$var reg       4 B:   i_wready [3:0] $end
$var wire      4 C:   i_wlast [3:0] $end
$var wire     180 D:   i_wch [179:0] $end
$var reg       4 E:   i_bvalid [3:0] $end
$var wire      4 F:   i_bready [3:0] $end
$var reg      10 G:   i_bch [9:0] $end
$var wire      4 H:   i_arvalid [3:0] $end
$var reg       4 I:   i_arready [3:0] $end
$var wire     108 J:   i_arch [107:0] $end
$var reg       4 K:   i_rvalid [3:0] $end
$var wire      4 L:   i_rready [3:0] $end
$var reg       4 M:   i_rlast [3:0] $end
$var reg      50 N:   i_rch [49:0] $end
$var reg       1 O:   o_awvalid  $end
$var wire      1 P:   o_awready  $end
$var reg      27 Q:   o_awch [26:0] $end
$var reg       1 R:   o_wvalid  $end
$var wire      1 S:   o_wready  $end
$var reg       1 T:   o_wlast  $end
$var reg      45 U:   o_wch [44:0] $end
$var wire      1 V:   o_bvalid  $end
$var reg       1 W:   o_bready  $end
$var wire     10 X:   o_bch [9:0] $end
$var reg       1 Y:   o_arvalid  $end
$var wire      1 Z:   o_arready  $end
$var reg      27 [:   o_arch [26:0] $end
$var wire      1 \:   o_rvalid  $end
$var reg       1 ]:   o_rready  $end
$var wire      1 ^:   o_rlast  $end
$var wire     50 _:   o_rch [49:0] $end
$var reg       1 `:   awch_en  $end
$var reg       4 a:   awch_req [3:0] $end
$var reg       4 b:   awch_grant [3:0] $end
$var reg       4 c:   wch_grant [3:0] $end
$var reg       1 d:   arch_en  $end
$var reg       4 e:   arch_req [3:0] $end
$var reg       4 f:   arch_grant [3:0] $end
$var reg       1 g:   mst0_bch_targeted  $end
$var reg       1 h:   mst1_bch_targeted  $end
$var reg       1 i:   mst2_bch_targeted  $end
$var reg       1 j:   mst3_bch_targeted  $end
$var reg       1 k:   mst0_rch_targeted  $end
$var reg       1 l:   mst1_rch_targeted  $end
$var reg       1 m:   mst2_rch_targeted  $end
$var reg       1 n:   mst3_rch_targeted  $end
$var reg       1 o:   wch_full  $end
$var reg       1 p:   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 q:   REQ_NB  $end
$var parameter 32 r:   REQ0_PRIORITY  $end
$var parameter 32 s:   REQ1_PRIORITY  $end
$var parameter 32 t:   REQ2_PRIORITY  $end
$var parameter 32 u:   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 v:   en  $end
$var wire      4 w:   req [3:0] $end
$var reg       4 x:   grant [3:0] $end
$var reg       1 y:   p0_active  $end
$var reg       1 z:   p1_active  $end
$var reg       1 {:   p2_active  $end
$var reg       1 |:   p3_active  $end
$var reg       4 }:   req_p0 [3:0] $end
$var reg       4 ~:   req_p1 [3:0] $end
$var reg       4 !;   req_p2 [3:0] $end
$var reg       4 ";   req_p3 [3:0] $end
$var reg       4 #;   grant_p0 [3:0] $end
$var reg       4 $;   grant_p1 [3:0] $end
$var reg       4 %;   grant_p2 [3:0] $end
$var reg       4 &;   grant_p3 [3:0] $end
$var reg       1 ';   p0  $end
$var reg       1 (;   p1  $end
$var reg       1 );   p2  $end
$var reg       1 *;   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 +;   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ,;   en  $end
$var wire      4 -;   req [3:0] $end
$var reg       4 .;   grant [3:0] $end
$var reg       4 /;   mask [3:0] $end
$var reg       4 0;   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 1;   PASS_THRU  $end
$var parameter 32 2;   ADDR_WIDTH  $end
$var parameter 32 3;   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 4;   data_in [3:0] $end
$var wire      1 5;   push  $end
$var reg       1 6;   full  $end
$var reg       4 7;   data_out [3:0] $end
$var wire      1 8;   pull  $end
$var reg       1 9;   empty  $end
$var reg       1 :;   wr_en  $end
$var reg       9 ;;   wrptr [8:0] $end
$var reg       9 <;   rdptr [8:0] $end
$var reg       1 =;   empty_flag  $end
$var reg       1 >;   full_flag  $end
$var reg       1 ?;   pass_thru  $end
$var reg       4 @;   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 A;   ADDR_WIDTH  $end
$var parameter 32 B;   DATA_WIDTH  $end
$var parameter 32 C;   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 D;   wr_en  $end
$var wire      8 E;   addr_in [7:0] $end
$var wire      4 4;   data_in [3:0] $end
$var wire      8 F;   addr_out [7:0] $end
$var reg       4 G;   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 H;   REQ_NB  $end
$var parameter 32 I;   REQ0_PRIORITY  $end
$var parameter 32 J;   REQ1_PRIORITY  $end
$var parameter 32 K;   REQ2_PRIORITY  $end
$var parameter 32 L;   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 M;   en  $end
$var wire      4 N;   req [3:0] $end
$var reg       4 O;   grant [3:0] $end
$var reg       1 P;   p0_active  $end
$var reg       1 Q;   p1_active  $end
$var reg       1 R;   p2_active  $end
$var reg       1 S;   p3_active  $end
$var reg       4 T;   req_p0 [3:0] $end
$var reg       4 U;   req_p1 [3:0] $end
$var reg       4 V;   req_p2 [3:0] $end
$var reg       4 W;   req_p3 [3:0] $end
$var reg       4 X;   grant_p0 [3:0] $end
$var reg       4 Y;   grant_p1 [3:0] $end
$var reg       4 Z;   grant_p2 [3:0] $end
$var reg       4 [;   grant_p3 [3:0] $end
$var reg       1 \;   p0  $end
$var reg       1 ];   p1  $end
$var reg       1 ^;   p2  $end
$var reg       1 _;   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 `;   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 a;   en  $end
$var wire      4 b;   req [3:0] $end
$var reg       4 c;   grant [3:0] $end
$var reg       4 d;   mask [3:0] $end
$var reg       4 e;   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 f;   DATA_BUS_W  $end
$var parameter 32 g;   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 h;   i_valid  $end
$var reg       1 i;   i_ready  $end
$var wire     27 j;   i_data [26:0] $end
$var reg       1 k;   o_valid  $end
$var wire      1 C+   o_ready  $end
$var reg      27 l;   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 m;   DATA_BUS_W  $end
$var parameter 32 n;   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 o;   i_valid  $end
$var reg       1 p;   i_ready  $end
$var wire     46 q;   i_data [45:0] $end
$var reg       1 r;   o_valid  $end
$var wire      1 I+   o_ready  $end
$var reg      46 s;   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 t;   DATA_BUS_W  $end
$var parameter 32 u;   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 O+   i_valid  $end
$var reg       1 v;   i_ready  $end
$var wire     10 w;   i_data [9:0] $end
$var reg       1 x;   o_valid  $end
$var wire      1 y;   o_ready  $end
$var reg      10 z;   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 {;   DATA_BUS_W  $end
$var parameter 32 |;   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 };   i_valid  $end
$var reg       1 ~;   i_ready  $end
$var wire     27 !<   i_data [26:0] $end
$var reg       1 "<   o_valid  $end
$var wire      1 V+   o_ready  $end
$var reg      27 #<   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 $<   DATA_BUS_W  $end
$var parameter 32 %<   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 [+   i_valid  $end
$var reg       1 &<   i_ready  $end
$var wire     51 '<   i_data [50:0] $end
$var reg       1 (<   o_valid  $end
$var wire      1 )<   o_ready  $end
$var reg      51 *<   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[2] $end
$var parameter 32 +<   i [31:0] $end
$var reg       1 ,<   pipe_awvalid  $end
$var reg       1 -<   pipe_awready  $end
$var reg      27 .<   pipe_awch [26:0] $end
$var reg       1 /<   pipe_wvalid  $end
$var reg       1 0<   pipe_wready  $end
$var reg       1 1<   pipe_wlast  $end
$var reg      45 2<   pipe_wch [44:0] $end
$var reg       1 3<   pipe_bvalid  $end
$var reg       1 4<   pipe_bready  $end
$var reg      10 5<   pipe_bch [9:0] $end
$var reg       1 6<   pipe_arvalid  $end
$var reg       1 7<   pipe_arready  $end
$var reg      27 8<   pipe_arch [26:0] $end
$var reg       1 9<   pipe_rvalid  $end
$var reg       1 :<   pipe_rready  $end
$var reg       1 ;<   pipe_rlast  $end
$var reg      50 <<   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 =<   AXI_ID_W  $end
$var parameter 32 ><   AXI_DATA_W  $end
$var parameter 32 ?<   MST_NB  $end
$var parameter 32 @<   TIMEOUT_ENABLE  $end
$var parameter  8 A<   MST0_ID_MASK [7:0] $end
$var parameter  8 B<   MST1_ID_MASK [7:0] $end
$var parameter  8 C<   MST2_ID_MASK [7:0] $end
$var parameter  8 D<   MST3_ID_MASK [7:0] $end
$var parameter 32 E<   MST0_PRIORITY  $end
$var parameter 32 F<   MST1_PRIORITY  $end
$var parameter 32 G<   MST2_PRIORITY  $end
$var parameter 32 H<   MST3_PRIORITY  $end
$var parameter 32 I<   AWCH_W  $end
$var parameter 32 J<   WCH_W  $end
$var parameter 32 K<   BCH_W  $end
$var parameter 32 L<   ARCH_W  $end
$var parameter 32 M<   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      4 N<   i_awvalid [3:0] $end
$var reg       4 O<   i_awready [3:0] $end
$var wire     108 P<   i_awch [107:0] $end
$var wire      4 Q<   i_wvalid [3:0] $end
$var reg       4 R<   i_wready [3:0] $end
$var wire      4 S<   i_wlast [3:0] $end
$var wire     180 T<   i_wch [179:0] $end
$var reg       4 U<   i_bvalid [3:0] $end
$var wire      4 V<   i_bready [3:0] $end
$var reg      10 W<   i_bch [9:0] $end
$var wire      4 X<   i_arvalid [3:0] $end
$var reg       4 Y<   i_arready [3:0] $end
$var wire     108 Z<   i_arch [107:0] $end
$var reg       4 [<   i_rvalid [3:0] $end
$var wire      4 \<   i_rready [3:0] $end
$var reg       4 ]<   i_rlast [3:0] $end
$var reg      50 ^<   i_rch [49:0] $end
$var reg       1 _<   o_awvalid  $end
$var wire      1 `<   o_awready  $end
$var reg      27 a<   o_awch [26:0] $end
$var reg       1 b<   o_wvalid  $end
$var wire      1 c<   o_wready  $end
$var reg       1 d<   o_wlast  $end
$var reg      45 e<   o_wch [44:0] $end
$var wire      1 f<   o_bvalid  $end
$var reg       1 g<   o_bready  $end
$var wire     10 h<   o_bch [9:0] $end
$var reg       1 i<   o_arvalid  $end
$var wire      1 j<   o_arready  $end
$var reg      27 k<   o_arch [26:0] $end
$var wire      1 l<   o_rvalid  $end
$var reg       1 m<   o_rready  $end
$var wire      1 n<   o_rlast  $end
$var wire     50 o<   o_rch [49:0] $end
$var reg       1 p<   awch_en  $end
$var reg       4 q<   awch_req [3:0] $end
$var reg       4 r<   awch_grant [3:0] $end
$var reg       4 s<   wch_grant [3:0] $end
$var reg       1 t<   arch_en  $end
$var reg       4 u<   arch_req [3:0] $end
$var reg       4 v<   arch_grant [3:0] $end
$var reg       1 w<   mst0_bch_targeted  $end
$var reg       1 x<   mst1_bch_targeted  $end
$var reg       1 y<   mst2_bch_targeted  $end
$var reg       1 z<   mst3_bch_targeted  $end
$var reg       1 {<   mst0_rch_targeted  $end
$var reg       1 |<   mst1_rch_targeted  $end
$var reg       1 }<   mst2_rch_targeted  $end
$var reg       1 ~<   mst3_rch_targeted  $end
$var reg       1 !=   wch_full  $end
$var reg       1 "=   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 #=   REQ_NB  $end
$var parameter 32 $=   REQ0_PRIORITY  $end
$var parameter 32 %=   REQ1_PRIORITY  $end
$var parameter 32 &=   REQ2_PRIORITY  $end
$var parameter 32 '=   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 (=   en  $end
$var wire      4 )=   req [3:0] $end
$var reg       4 *=   grant [3:0] $end
$var reg       1 +=   p0_active  $end
$var reg       1 ,=   p1_active  $end
$var reg       1 -=   p2_active  $end
$var reg       1 .=   p3_active  $end
$var reg       4 /=   req_p0 [3:0] $end
$var reg       4 0=   req_p1 [3:0] $end
$var reg       4 1=   req_p2 [3:0] $end
$var reg       4 2=   req_p3 [3:0] $end
$var reg       4 3=   grant_p0 [3:0] $end
$var reg       4 4=   grant_p1 [3:0] $end
$var reg       4 5=   grant_p2 [3:0] $end
$var reg       4 6=   grant_p3 [3:0] $end
$var reg       1 7=   p0  $end
$var reg       1 8=   p1  $end
$var reg       1 9=   p2  $end
$var reg       1 :=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 ;=   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 <=   en  $end
$var wire      4 ==   req [3:0] $end
$var reg       4 >=   grant [3:0] $end
$var reg       4 ?=   mask [3:0] $end
$var reg       4 @=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 A=   PASS_THRU  $end
$var parameter 32 B=   ADDR_WIDTH  $end
$var parameter 32 C=   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 D=   data_in [3:0] $end
$var wire      1 E=   push  $end
$var reg       1 F=   full  $end
$var reg       4 G=   data_out [3:0] $end
$var wire      1 H=   pull  $end
$var reg       1 I=   empty  $end
$var reg       1 J=   wr_en  $end
$var reg       9 K=   wrptr [8:0] $end
$var reg       9 L=   rdptr [8:0] $end
$var reg       1 M=   empty_flag  $end
$var reg       1 N=   full_flag  $end
$var reg       1 O=   pass_thru  $end
$var reg       4 P=   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 Q=   ADDR_WIDTH  $end
$var parameter 32 R=   DATA_WIDTH  $end
$var parameter 32 S=   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 T=   wr_en  $end
$var wire      8 U=   addr_in [7:0] $end
$var wire      4 D=   data_in [3:0] $end
$var wire      8 V=   addr_out [7:0] $end
$var reg       4 W=   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 X=   REQ_NB  $end
$var parameter 32 Y=   REQ0_PRIORITY  $end
$var parameter 32 Z=   REQ1_PRIORITY  $end
$var parameter 32 [=   REQ2_PRIORITY  $end
$var parameter 32 \=   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ]=   en  $end
$var wire      4 ^=   req [3:0] $end
$var reg       4 _=   grant [3:0] $end
$var reg       1 `=   p0_active  $end
$var reg       1 a=   p1_active  $end
$var reg       1 b=   p2_active  $end
$var reg       1 c=   p3_active  $end
$var reg       4 d=   req_p0 [3:0] $end
$var reg       4 e=   req_p1 [3:0] $end
$var reg       4 f=   req_p2 [3:0] $end
$var reg       4 g=   req_p3 [3:0] $end
$var reg       4 h=   grant_p0 [3:0] $end
$var reg       4 i=   grant_p1 [3:0] $end
$var reg       4 j=   grant_p2 [3:0] $end
$var reg       4 k=   grant_p3 [3:0] $end
$var reg       1 l=   p0  $end
$var reg       1 m=   p1  $end
$var reg       1 n=   p2  $end
$var reg       1 o=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 p=   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 q=   en  $end
$var wire      4 r=   req [3:0] $end
$var reg       4 s=   grant [3:0] $end
$var reg       4 t=   mask [3:0] $end
$var reg       4 u=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 v=   DATA_BUS_W  $end
$var parameter 32 w=   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 x=   i_valid  $end
$var reg       1 y=   i_ready  $end
$var wire     27 z=   i_data [26:0] $end
$var reg       1 {=   o_valid  $end
$var wire      1 B+   o_ready  $end
$var reg      27 |=   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 }=   DATA_BUS_W  $end
$var parameter 32 ~=   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 !>   i_valid  $end
$var reg       1 ">   i_ready  $end
$var wire     46 #>   i_data [45:0] $end
$var reg       1 $>   o_valid  $end
$var wire      1 H+   o_ready  $end
$var reg      46 %>   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 &>   DATA_BUS_W  $end
$var parameter 32 '>   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 N+   i_valid  $end
$var reg       1 (>   i_ready  $end
$var wire     10 )>   i_data [9:0] $end
$var reg       1 *>   o_valid  $end
$var wire      1 +>   o_ready  $end
$var reg      10 ,>   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 ->   DATA_BUS_W  $end
$var parameter 32 .>   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 />   i_valid  $end
$var reg       1 0>   i_ready  $end
$var wire     27 1>   i_data [26:0] $end
$var reg       1 2>   o_valid  $end
$var wire      1 U+   o_ready  $end
$var reg      27 3>   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 4>   DATA_BUS_W  $end
$var parameter 32 5>   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 Z+   i_valid  $end
$var reg       1 6>   i_ready  $end
$var wire     51 7>   i_data [50:0] $end
$var reg       1 8>   o_valid  $end
$var wire      1 9>   o_ready  $end
$var reg      51 :>   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[3] $end
$var parameter 32 ;>   i [31:0] $end
$var reg       1 <>   pipe_awvalid  $end
$var reg       1 =>   pipe_awready  $end
$var reg      27 >>   pipe_awch [26:0] $end
$var reg       1 ?>   pipe_wvalid  $end
$var reg       1 @>   pipe_wready  $end
$var reg       1 A>   pipe_wlast  $end
$var reg      45 B>   pipe_wch [44:0] $end
$var reg       1 C>   pipe_bvalid  $end
$var reg       1 D>   pipe_bready  $end
$var reg      10 E>   pipe_bch [9:0] $end
$var reg       1 F>   pipe_arvalid  $end
$var reg       1 G>   pipe_arready  $end
$var reg      27 H>   pipe_arch [26:0] $end
$var reg       1 I>   pipe_rvalid  $end
$var reg       1 J>   pipe_rready  $end
$var reg       1 K>   pipe_rlast  $end
$var reg      50 L>   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 M>   AXI_ID_W  $end
$var parameter 32 N>   AXI_DATA_W  $end
$var parameter 32 O>   MST_NB  $end
$var parameter 32 P>   TIMEOUT_ENABLE  $end
$var parameter  8 Q>   MST0_ID_MASK [7:0] $end
$var parameter  8 R>   MST1_ID_MASK [7:0] $end
$var parameter  8 S>   MST2_ID_MASK [7:0] $end
$var parameter  8 T>   MST3_ID_MASK [7:0] $end
$var parameter 32 U>   MST0_PRIORITY  $end
$var parameter 32 V>   MST1_PRIORITY  $end
$var parameter 32 W>   MST2_PRIORITY  $end
$var parameter 32 X>   MST3_PRIORITY  $end
$var parameter 32 Y>   AWCH_W  $end
$var parameter 32 Z>   WCH_W  $end
$var parameter 32 [>   BCH_W  $end
$var parameter 32 \>   ARCH_W  $end
$var parameter 32 ]>   RCH_W  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      4 ^>   i_awvalid [3:0] $end
$var reg       4 _>   i_awready [3:0] $end
$var wire     108 `>   i_awch [107:0] $end
$var wire      4 a>   i_wvalid [3:0] $end
$var reg       4 b>   i_wready [3:0] $end
$var wire      4 c>   i_wlast [3:0] $end
$var wire     180 d>   i_wch [179:0] $end
$var reg       4 e>   i_bvalid [3:0] $end
$var wire      4 f>   i_bready [3:0] $end
$var reg      10 g>   i_bch [9:0] $end
$var wire      4 h>   i_arvalid [3:0] $end
$var reg       4 i>   i_arready [3:0] $end
$var wire     108 j>   i_arch [107:0] $end
$var reg       4 k>   i_rvalid [3:0] $end
$var wire      4 l>   i_rready [3:0] $end
$var reg       4 m>   i_rlast [3:0] $end
$var reg      50 n>   i_rch [49:0] $end
$var reg       1 o>   o_awvalid  $end
$var wire      1 p>   o_awready  $end
$var reg      27 q>   o_awch [26:0] $end
$var reg       1 r>   o_wvalid  $end
$var wire      1 s>   o_wready  $end
$var reg       1 t>   o_wlast  $end
$var reg      45 u>   o_wch [44:0] $end
$var wire      1 v>   o_bvalid  $end
$var reg       1 w>   o_bready  $end
$var wire     10 x>   o_bch [9:0] $end
$var reg       1 y>   o_arvalid  $end
$var wire      1 z>   o_arready  $end
$var reg      27 {>   o_arch [26:0] $end
$var wire      1 |>   o_rvalid  $end
$var reg       1 }>   o_rready  $end
$var wire      1 ~>   o_rlast  $end
$var wire     50 !?   o_rch [49:0] $end
$var reg       1 "?   awch_en  $end
$var reg       4 #?   awch_req [3:0] $end
$var reg       4 $?   awch_grant [3:0] $end
$var reg       4 %?   wch_grant [3:0] $end
$var reg       1 &?   arch_en  $end
$var reg       4 '?   arch_req [3:0] $end
$var reg       4 (?   arch_grant [3:0] $end
$var reg       1 )?   mst0_bch_targeted  $end
$var reg       1 *?   mst1_bch_targeted  $end
$var reg       1 +?   mst2_bch_targeted  $end
$var reg       1 ,?   mst3_bch_targeted  $end
$var reg       1 -?   mst0_rch_targeted  $end
$var reg       1 .?   mst1_rch_targeted  $end
$var reg       1 /?   mst2_rch_targeted  $end
$var reg       1 0?   mst3_rch_targeted  $end
$var reg       1 1?   wch_full  $end
$var reg       1 2?   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 3?   REQ_NB  $end
$var parameter 32 4?   REQ0_PRIORITY  $end
$var parameter 32 5?   REQ1_PRIORITY  $end
$var parameter 32 6?   REQ2_PRIORITY  $end
$var parameter 32 7?   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 8?   en  $end
$var wire      4 9?   req [3:0] $end
$var reg       4 :?   grant [3:0] $end
$var reg       1 ;?   p0_active  $end
$var reg       1 <?   p1_active  $end
$var reg       1 =?   p2_active  $end
$var reg       1 >?   p3_active  $end
$var reg       4 ??   req_p0 [3:0] $end
$var reg       4 @?   req_p1 [3:0] $end
$var reg       4 A?   req_p2 [3:0] $end
$var reg       4 B?   req_p3 [3:0] $end
$var reg       4 C?   grant_p0 [3:0] $end
$var reg       4 D?   grant_p1 [3:0] $end
$var reg       4 E?   grant_p2 [3:0] $end
$var reg       4 F?   grant_p3 [3:0] $end
$var reg       1 G?   p0  $end
$var reg       1 H?   p1  $end
$var reg       1 I?   p2  $end
$var reg       1 J?   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 K?   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 L?   en  $end
$var wire      4 M?   req [3:0] $end
$var reg       4 N?   grant [3:0] $end
$var reg       4 O?   mask [3:0] $end
$var reg       4 P?   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 Q?   PASS_THRU  $end
$var parameter 32 R?   ADDR_WIDTH  $end
$var parameter 32 S?   DATA_WIDTH  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ~#   flush  $end
$var wire      4 T?   data_in [3:0] $end
$var wire      1 U?   push  $end
$var reg       1 V?   full  $end
$var reg       4 W?   data_out [3:0] $end
$var wire      1 X?   pull  $end
$var reg       1 Y?   empty  $end
$var reg       1 Z?   wr_en  $end
$var reg       9 [?   wrptr [8:0] $end
$var reg       9 \?   rdptr [8:0] $end
$var reg       1 ]?   empty_flag  $end
$var reg       1 ^?   full_flag  $end
$var reg       1 _?   pass_thru  $end
$var reg       4 `?   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 a?   ADDR_WIDTH  $end
$var parameter 32 b?   DATA_WIDTH  $end
$var parameter 32 c?   FFD_EN  $end
$var wire      1 e    aclk  $end
$var wire      1 d?   wr_en  $end
$var wire      8 e?   addr_in [7:0] $end
$var wire      4 T?   data_in [3:0] $end
$var wire      8 f?   addr_out [7:0] $end
$var reg       4 g?   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 h?   REQ_NB  $end
$var parameter 32 i?   REQ0_PRIORITY  $end
$var parameter 32 j?   REQ1_PRIORITY  $end
$var parameter 32 k?   REQ2_PRIORITY  $end
$var parameter 32 l?   REQ3_PRIORITY  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 m?   en  $end
$var wire      4 n?   req [3:0] $end
$var reg       4 o?   grant [3:0] $end
$var reg       1 p?   p0_active  $end
$var reg       1 q?   p1_active  $end
$var reg       1 r?   p2_active  $end
$var reg       1 s?   p3_active  $end
$var reg       4 t?   req_p0 [3:0] $end
$var reg       4 u?   req_p1 [3:0] $end
$var reg       4 v?   req_p2 [3:0] $end
$var reg       4 w?   req_p3 [3:0] $end
$var reg       4 x?   grant_p0 [3:0] $end
$var reg       4 y?   grant_p1 [3:0] $end
$var reg       4 z?   grant_p2 [3:0] $end
$var reg       4 {?   grant_p3 [3:0] $end
$var reg       1 |?   p0  $end
$var reg       1 }?   p1  $end
$var reg       1 ~?   p2  $end
$var reg       1 !@   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 "@   REQ_NB  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 #@   en  $end
$var wire      4 $@   req [3:0] $end
$var reg       4 %@   grant [3:0] $end
$var reg       4 &@   mask [3:0] $end
$var reg       4 '@   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 (@   DATA_BUS_W  $end
$var parameter 32 )@   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 *@   i_valid  $end
$var reg       1 +@   i_ready  $end
$var wire     27 ,@   i_data [26:0] $end
$var reg       1 -@   o_valid  $end
$var wire      1 A+   o_ready  $end
$var reg      27 .@   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 /@   DATA_BUS_W  $end
$var parameter 32 0@   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 1@   i_valid  $end
$var reg       1 2@   i_ready  $end
$var wire     46 3@   i_data [45:0] $end
$var reg       1 4@   o_valid  $end
$var wire      1 G+   o_ready  $end
$var reg      46 5@   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 6@   DATA_BUS_W  $end
$var parameter 32 7@   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 M+   i_valid  $end
$var reg       1 8@   i_ready  $end
$var wire     10 9@   i_data [9:0] $end
$var reg       1 :@   o_valid  $end
$var wire      1 ;@   o_ready  $end
$var reg      10 <@   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 =@   DATA_BUS_W  $end
$var parameter 32 >@   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 ?@   i_valid  $end
$var reg       1 @@   i_ready  $end
$var wire     27 A@   i_data [26:0] $end
$var reg       1 B@   o_valid  $end
$var wire      1 T+   o_ready  $end
$var reg      27 C@   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 D@   DATA_BUS_W  $end
$var parameter 32 E@   NB_PIPELINE  $end
$var wire      1 e    aclk  $end
$var wire      1 f    aresetn  $end
$var wire      1 g    srst  $end
$var wire      1 Y+   i_valid  $end
$var reg       1 F@   i_ready  $end
$var wire     51 G@   i_data [50:0] $end
$var reg       1 H@   o_valid  $end
$var wire      1 I@   o_ready  $end
$var reg      51 J@   o_data [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module mst0_if $end
$var parameter 32 K@   AXI_ADDR_W  $end
$var parameter 32 L@   AXI_ID_W  $end
$var parameter 32 M@   AXI_DATA_W  $end
$var parameter 32 N@   STRB_MODE  $end
$var parameter 32 O@   AXI_SIGNALING  $end
$var parameter 32 P@   KEEP_BASE_ADDR  $end
$var parameter 32 Q@   BASE_ADDR  $end
$var parameter 32 R@   SLV_CDC  $end
$var parameter 32 S@   SLV_OSTDREQ_NUM  $end
$var parameter 32 T@   SLV_OSTDREQ_SIZE  $end
$var parameter 32 U@   USER_SUPPORT  $end
$var parameter 32 V@   AXI_AUSER_W  $end
$var parameter 32 W@   AXI_WUSER_W  $end
$var parameter 32 X@   AXI_BUSER_W  $end
$var parameter 32 Y@   AXI_RUSER_W  $end
$var parameter 32 Z@   AWCH_W  $end
$var parameter 32 [@   WCH_W  $end
$var parameter 32 \@   BCH_W  $end
$var parameter 32 ]@   ARCH_W  $end
$var parameter 32 ^@   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 _@   i_awvalid  $end
$var reg       1 `@   i_awready  $end
$var wire     27 a@   i_awch [26:0] $end
$var wire      1 b@   i_wvalid  $end
$var reg       1 c@   i_wready  $end
$var wire      1 d@   i_wlast  $end
$var wire     45 e@   i_wch [44:0] $end
$var reg       1 f@   i_bvalid  $end
$var wire      1 g@   i_bready  $end
$var reg      10 h@   i_bch [9:0] $end
$var wire      1 i@   i_arvalid  $end
$var reg       1 j@   i_arready  $end
$var wire     27 k@   i_arch [26:0] $end
$var reg       1 l@   i_rvalid  $end
$var wire      1 m@   i_rready  $end
$var reg       1 n@   i_rlast  $end
$var reg      50 o@   i_rch [49:0] $end
$var wire      1 i    o_aclk  $end
$var wire      1 i    o_aresetn  $end
$var wire      1 h    o_srst  $end
$var reg       1 p@   o_awvalid  $end
$var wire      1 i    o_awready  $end
$var reg      16 q@   o_awaddr [15:0] $end
$var reg       8 r@   o_awlen [7:0] $end
$var reg       3 s@   o_awsize [2:0] $end
$var reg       2 t@   o_awburst [1:0] $end
$var reg       2 u@   o_awlock [1:0] $end
$var reg       4 v@   o_awcache [3:0] $end
$var reg       3 w@   o_awprot [2:0] $end
$var reg       4 x@   o_awqos [3:0] $end
$var reg       4 y@   o_awregion [3:0] $end
$var reg       8 z@   o_awid [7:0] $end
$var reg       1 {@   o_awuser [0:0] $end
$var reg       1 |@   o_wvalid  $end
$var wire      1 h    o_wready  $end
$var reg       1 }@   o_wlast  $end
$var reg      40 ~@   o_wdata [39:0] $end
$var reg       5 !A   o_wstrb [4:0] $end
$var reg       1 "A   o_wuser [0:0] $end
$var wire      1 h    o_bvalid  $end
$var reg       1 #A   o_bready  $end
$var wire      8 l    o_bid [7:0] $end
$var wire      2 n    o_bresp [1:0] $end
$var wire      1 h    o_buser [0] $end
$var reg       1 $A   o_arvalid  $end
$var wire      1 h    o_arready  $end
$var reg      16 %A   o_araddr [15:0] $end
$var reg       8 &A   o_arlen [7:0] $end
$var reg       3 'A   o_arsize [2:0] $end
$var reg       2 (A   o_arburst [1:0] $end
$var reg       2 )A   o_arlock [1:0] $end
$var reg       4 *A   o_arcache [3:0] $end
$var reg       3 +A   o_arprot [2:0] $end
$var reg       4 ,A   o_arqos [3:0] $end
$var reg       4 -A   o_arregion [3:0] $end
$var reg       8 .A   o_arid [7:0] $end
$var reg       1 /A   o_aruser [0:0] $end
$var wire      1 h    o_rvalid  $end
$var reg       1 0A   o_rready  $end
$var wire      8 l    o_rid [7:0] $end
$var wire      2 n    o_rresp [1:0] $end
$var wire     40 q    o_rdata [39:0] $end
$var wire      1 h    o_rlast  $end
$var wire      1 h    o_ruser [0] $end
$var reg      27 1A   awch [26:0] $end
$var reg      45 2A   wch [44:0] $end
$var reg      10 3A   bch [9:0] $end
$var reg      27 4A   arch [26:0] $end
$var reg      50 5A   rch [49:0] $end
$var reg       1 6A   rlast  $end
$var reg      16 7A   awaddr [15:0] $end
$var reg      16 8A   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 9A   PASS_THRU  $end
$var parameter 32 :A   AW_ASIZE  $end
$var parameter 32 ;A   W_ASIZE  $end
$var parameter 32 <A   B_ASIZE  $end
$var parameter 32 =A   AR_ASIZE  $end
$var parameter 32 >A   R_ASIZE  $end
$var reg       1 ?A   aw_full  $end
$var reg       1 @A   aw_empty  $end
$var reg       1 AA   w_full  $end
$var reg       1 BA   w_empty  $end
$var reg       1 CA   ar_full  $end
$var reg       1 DA   ar_empty  $end
$var reg       1 EA   r_full  $end
$var reg       1 FA   r_empty  $end
$var reg       1 GA   b_full  $end
$var reg       1 HA   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 IA   PASS_THRU  $end
$var parameter 32 JA   ADDR_WIDTH  $end
$var parameter 32 KA   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 a@   data_in [26:0] $end
$var wire      1 _@   push  $end
$var reg       1 LA   full  $end
$var reg      27 MA   data_out [26:0] $end
$var wire      1 i    pull  $end
$var reg       1 NA   empty  $end
$var reg       1 OA   wr_en  $end
$var reg       3 PA   wrptr [2:0] $end
$var reg       3 QA   rdptr [2:0] $end
$var reg       1 RA   empty_flag  $end
$var reg       1 SA   full_flag  $end
$var reg       1 TA   pass_thru  $end
$var reg      27 UA   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 VA   ADDR_WIDTH  $end
$var parameter 32 WA   DATA_WIDTH  $end
$var parameter 32 XA   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 YA   wr_en  $end
$var wire      2 ZA   addr_in [1:0] $end
$var wire     27 a@   data_in [26:0] $end
$var wire      2 [A   addr_out [1:0] $end
$var reg      27 \A   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 ]A   PASS_THRU  $end
$var parameter 32 ^A   ADDR_WIDTH  $end
$var parameter 32 _A   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 `A   data_in [45:0] $end
$var wire      1 b@   push  $end
$var reg       1 aA   full  $end
$var reg      46 bA   data_out [45:0] $end
$var wire      1 h    pull  $end
$var reg       1 cA   empty  $end
$var reg       1 dA   wr_en  $end
$var reg       3 eA   wrptr [2:0] $end
$var reg       3 fA   rdptr [2:0] $end
$var reg       1 gA   empty_flag  $end
$var reg       1 hA   full_flag  $end
$var reg       1 iA   pass_thru  $end
$var reg      46 jA   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 kA   ADDR_WIDTH  $end
$var parameter 32 lA   DATA_WIDTH  $end
$var parameter 32 mA   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 nA   wr_en  $end
$var wire      2 oA   addr_in [1:0] $end
$var wire     46 `A   data_in [45:0] $end
$var wire      2 pA   addr_out [1:0] $end
$var reg      46 qA   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 rA   PASS_THRU  $end
$var parameter 32 sA   ADDR_WIDTH  $end
$var parameter 32 tA   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 uA   data_in [9:0] $end
$var wire      1 h    push  $end
$var reg       1 vA   full  $end
$var reg      10 wA   data_out [9:0] $end
$var wire      1 g@   pull  $end
$var reg       1 xA   empty  $end
$var reg       1 yA   wr_en  $end
$var reg       3 zA   wrptr [2:0] $end
$var reg       3 {A   rdptr [2:0] $end
$var reg       1 |A   empty_flag  $end
$var reg       1 }A   full_flag  $end
$var reg       1 ~A   pass_thru  $end
$var reg      10 !B   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 "B   ADDR_WIDTH  $end
$var parameter 32 #B   DATA_WIDTH  $end
$var parameter 32 $B   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 %B   wr_en  $end
$var wire      2 &B   addr_in [1:0] $end
$var wire     10 uA   data_in [9:0] $end
$var wire      2 'B   addr_out [1:0] $end
$var reg      10 (B   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 )B   PASS_THRU  $end
$var parameter 32 *B   ADDR_WIDTH  $end
$var parameter 32 +B   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 k@   data_in [26:0] $end
$var wire      1 i@   push  $end
$var reg       1 ,B   full  $end
$var reg      27 -B   data_out [26:0] $end
$var wire      1 h    pull  $end
$var reg       1 .B   empty  $end
$var reg       1 /B   wr_en  $end
$var reg       3 0B   wrptr [2:0] $end
$var reg       3 1B   rdptr [2:0] $end
$var reg       1 2B   empty_flag  $end
$var reg       1 3B   full_flag  $end
$var reg       1 4B   pass_thru  $end
$var reg      27 5B   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 6B   ADDR_WIDTH  $end
$var parameter 32 7B   DATA_WIDTH  $end
$var parameter 32 8B   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 9B   wr_en  $end
$var wire      2 :B   addr_in [1:0] $end
$var wire     27 k@   data_in [26:0] $end
$var wire      2 ;B   addr_out [1:0] $end
$var reg      27 <B   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 =B   PASS_THRU  $end
$var parameter 32 >B   ADDR_WIDTH  $end
$var parameter 32 ?B   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 @B   data_in [50:0] $end
$var wire      1 h    push  $end
$var reg       1 AB   full  $end
$var reg      51 BB   data_out [50:0] $end
$var wire      1 m@   pull  $end
$var reg       1 CB   empty  $end
$var reg       1 DB   wr_en  $end
$var reg       3 EB   wrptr [2:0] $end
$var reg       3 FB   rdptr [2:0] $end
$var reg       1 GB   empty_flag  $end
$var reg       1 HB   full_flag  $end
$var reg       1 IB   pass_thru  $end
$var reg      51 JB   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 KB   ADDR_WIDTH  $end
$var parameter 32 LB   DATA_WIDTH  $end
$var parameter 32 MB   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 NB   wr_en  $end
$var wire      2 OB   addr_in [1:0] $end
$var wire     51 @B   data_in [50:0] $end
$var wire      2 PB   addr_out [1:0] $end
$var reg      51 QB   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module mst1_if $end
$var parameter 32 RB   AXI_ADDR_W  $end
$var parameter 32 SB   AXI_ID_W  $end
$var parameter 32 TB   AXI_DATA_W  $end
$var parameter 32 UB   STRB_MODE  $end
$var parameter 32 VB   AXI_SIGNALING  $end
$var parameter 32 WB   KEEP_BASE_ADDR  $end
$var parameter 32 XB   BASE_ADDR  $end
$var parameter 32 YB   SLV_CDC  $end
$var parameter 32 ZB   SLV_OSTDREQ_NUM  $end
$var parameter 32 [B   SLV_OSTDREQ_SIZE  $end
$var parameter 32 \B   USER_SUPPORT  $end
$var parameter 32 ]B   AXI_AUSER_W  $end
$var parameter 32 ^B   AXI_WUSER_W  $end
$var parameter 32 _B   AXI_BUSER_W  $end
$var parameter 32 `B   AXI_RUSER_W  $end
$var parameter 32 aB   AWCH_W  $end
$var parameter 32 bB   WCH_W  $end
$var parameter 32 cB   BCH_W  $end
$var parameter 32 dB   ARCH_W  $end
$var parameter 32 eB   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 fB   i_awvalid  $end
$var reg       1 gB   i_awready  $end
$var wire     27 hB   i_awch [26:0] $end
$var wire      1 iB   i_wvalid  $end
$var reg       1 jB   i_wready  $end
$var wire      1 kB   i_wlast  $end
$var wire     45 lB   i_wch [44:0] $end
$var reg       1 mB   i_bvalid  $end
$var wire      1 nB   i_bready  $end
$var reg      10 oB   i_bch [9:0] $end
$var wire      1 pB   i_arvalid  $end
$var reg       1 qB   i_arready  $end
$var wire     27 rB   i_arch [26:0] $end
$var reg       1 sB   i_rvalid  $end
$var wire      1 tB   i_rready  $end
$var reg       1 uB   i_rlast  $end
$var reg      50 vB   i_rch [49:0] $end
$var wire      1 i    o_aclk  $end
$var wire      1 i    o_aresetn  $end
$var wire      1 h    o_srst  $end
$var reg       1 wB   o_awvalid  $end
$var wire      1 i    o_awready  $end
$var reg      16 xB   o_awaddr [15:0] $end
$var reg       8 yB   o_awlen [7:0] $end
$var reg       3 zB   o_awsize [2:0] $end
$var reg       2 {B   o_awburst [1:0] $end
$var reg       2 |B   o_awlock [1:0] $end
$var reg       4 }B   o_awcache [3:0] $end
$var reg       3 ~B   o_awprot [2:0] $end
$var reg       4 !C   o_awqos [3:0] $end
$var reg       4 "C   o_awregion [3:0] $end
$var reg       8 #C   o_awid [7:0] $end
$var reg       1 $C   o_awuser [0:0] $end
$var reg       1 %C   o_wvalid  $end
$var wire      1 h    o_wready  $end
$var reg       1 &C   o_wlast  $end
$var reg      40 'C   o_wdata [39:0] $end
$var reg       5 (C   o_wstrb [4:0] $end
$var reg       1 )C   o_wuser [0:0] $end
$var wire      1 h    o_bvalid  $end
$var reg       1 *C   o_bready  $end
$var wire      8 l    o_bid [7:0] $end
$var wire      2 n    o_bresp [1:0] $end
$var wire      1 h    o_buser [0] $end
$var reg       1 +C   o_arvalid  $end
$var wire      1 h    o_arready  $end
$var reg      16 ,C   o_araddr [15:0] $end
$var reg       8 -C   o_arlen [7:0] $end
$var reg       3 .C   o_arsize [2:0] $end
$var reg       2 /C   o_arburst [1:0] $end
$var reg       2 0C   o_arlock [1:0] $end
$var reg       4 1C   o_arcache [3:0] $end
$var reg       3 2C   o_arprot [2:0] $end
$var reg       4 3C   o_arqos [3:0] $end
$var reg       4 4C   o_arregion [3:0] $end
$var reg       8 5C   o_arid [7:0] $end
$var reg       1 6C   o_aruser [0:0] $end
$var wire      1 h    o_rvalid  $end
$var reg       1 7C   o_rready  $end
$var wire      8 l    o_rid [7:0] $end
$var wire      2 n    o_rresp [1:0] $end
$var wire     40 q    o_rdata [39:0] $end
$var wire      1 h    o_rlast  $end
$var wire      1 h    o_ruser [0] $end
$var reg      27 8C   awch [26:0] $end
$var reg      45 9C   wch [44:0] $end
$var reg      10 :C   bch [9:0] $end
$var reg      27 ;C   arch [26:0] $end
$var reg      50 <C   rch [49:0] $end
$var reg       1 =C   rlast  $end
$var reg      16 >C   awaddr [15:0] $end
$var reg      16 ?C   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 @C   PASS_THRU  $end
$var parameter 32 AC   AW_ASIZE  $end
$var parameter 32 BC   W_ASIZE  $end
$var parameter 32 CC   B_ASIZE  $end
$var parameter 32 DC   AR_ASIZE  $end
$var parameter 32 EC   R_ASIZE  $end
$var reg       1 FC   aw_full  $end
$var reg       1 GC   aw_empty  $end
$var reg       1 HC   w_full  $end
$var reg       1 IC   w_empty  $end
$var reg       1 JC   ar_full  $end
$var reg       1 KC   ar_empty  $end
$var reg       1 LC   r_full  $end
$var reg       1 MC   r_empty  $end
$var reg       1 NC   b_full  $end
$var reg       1 OC   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 PC   PASS_THRU  $end
$var parameter 32 QC   ADDR_WIDTH  $end
$var parameter 32 RC   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 hB   data_in [26:0] $end
$var wire      1 fB   push  $end
$var reg       1 SC   full  $end
$var reg      27 TC   data_out [26:0] $end
$var wire      1 i    pull  $end
$var reg       1 UC   empty  $end
$var reg       1 VC   wr_en  $end
$var reg       3 WC   wrptr [2:0] $end
$var reg       3 XC   rdptr [2:0] $end
$var reg       1 YC   empty_flag  $end
$var reg       1 ZC   full_flag  $end
$var reg       1 [C   pass_thru  $end
$var reg      27 \C   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 ]C   ADDR_WIDTH  $end
$var parameter 32 ^C   DATA_WIDTH  $end
$var parameter 32 _C   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 `C   wr_en  $end
$var wire      2 aC   addr_in [1:0] $end
$var wire     27 hB   data_in [26:0] $end
$var wire      2 bC   addr_out [1:0] $end
$var reg      27 cC   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 dC   PASS_THRU  $end
$var parameter 32 eC   ADDR_WIDTH  $end
$var parameter 32 fC   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 gC   data_in [45:0] $end
$var wire      1 iB   push  $end
$var reg       1 hC   full  $end
$var reg      46 iC   data_out [45:0] $end
$var wire      1 h    pull  $end
$var reg       1 jC   empty  $end
$var reg       1 kC   wr_en  $end
$var reg       3 lC   wrptr [2:0] $end
$var reg       3 mC   rdptr [2:0] $end
$var reg       1 nC   empty_flag  $end
$var reg       1 oC   full_flag  $end
$var reg       1 pC   pass_thru  $end
$var reg      46 qC   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 rC   ADDR_WIDTH  $end
$var parameter 32 sC   DATA_WIDTH  $end
$var parameter 32 tC   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 uC   wr_en  $end
$var wire      2 vC   addr_in [1:0] $end
$var wire     46 gC   data_in [45:0] $end
$var wire      2 wC   addr_out [1:0] $end
$var reg      46 xC   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 yC   PASS_THRU  $end
$var parameter 32 zC   ADDR_WIDTH  $end
$var parameter 32 {C   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 |C   data_in [9:0] $end
$var wire      1 h    push  $end
$var reg       1 }C   full  $end
$var reg      10 ~C   data_out [9:0] $end
$var wire      1 nB   pull  $end
$var reg       1 !D   empty  $end
$var reg       1 "D   wr_en  $end
$var reg       3 #D   wrptr [2:0] $end
$var reg       3 $D   rdptr [2:0] $end
$var reg       1 %D   empty_flag  $end
$var reg       1 &D   full_flag  $end
$var reg       1 'D   pass_thru  $end
$var reg      10 (D   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 )D   ADDR_WIDTH  $end
$var parameter 32 *D   DATA_WIDTH  $end
$var parameter 32 +D   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 ,D   wr_en  $end
$var wire      2 -D   addr_in [1:0] $end
$var wire     10 |C   data_in [9:0] $end
$var wire      2 .D   addr_out [1:0] $end
$var reg      10 /D   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 0D   PASS_THRU  $end
$var parameter 32 1D   ADDR_WIDTH  $end
$var parameter 32 2D   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 rB   data_in [26:0] $end
$var wire      1 pB   push  $end
$var reg       1 3D   full  $end
$var reg      27 4D   data_out [26:0] $end
$var wire      1 h    pull  $end
$var reg       1 5D   empty  $end
$var reg       1 6D   wr_en  $end
$var reg       3 7D   wrptr [2:0] $end
$var reg       3 8D   rdptr [2:0] $end
$var reg       1 9D   empty_flag  $end
$var reg       1 :D   full_flag  $end
$var reg       1 ;D   pass_thru  $end
$var reg      27 <D   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 =D   ADDR_WIDTH  $end
$var parameter 32 >D   DATA_WIDTH  $end
$var parameter 32 ?D   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 @D   wr_en  $end
$var wire      2 AD   addr_in [1:0] $end
$var wire     27 rB   data_in [26:0] $end
$var wire      2 BD   addr_out [1:0] $end
$var reg      27 CD   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 DD   PASS_THRU  $end
$var parameter 32 ED   ADDR_WIDTH  $end
$var parameter 32 FD   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 GD   data_in [50:0] $end
$var wire      1 h    push  $end
$var reg       1 HD   full  $end
$var reg      51 ID   data_out [50:0] $end
$var wire      1 tB   pull  $end
$var reg       1 JD   empty  $end
$var reg       1 KD   wr_en  $end
$var reg       3 LD   wrptr [2:0] $end
$var reg       3 MD   rdptr [2:0] $end
$var reg       1 ND   empty_flag  $end
$var reg       1 OD   full_flag  $end
$var reg       1 PD   pass_thru  $end
$var reg      51 QD   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 RD   ADDR_WIDTH  $end
$var parameter 32 SD   DATA_WIDTH  $end
$var parameter 32 TD   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 UD   wr_en  $end
$var wire      2 VD   addr_in [1:0] $end
$var wire     51 GD   data_in [50:0] $end
$var wire      2 WD   addr_out [1:0] $end
$var reg      51 XD   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module mst2_if $end
$var parameter 32 YD   AXI_ADDR_W  $end
$var parameter 32 ZD   AXI_ID_W  $end
$var parameter 32 [D   AXI_DATA_W  $end
$var parameter 32 \D   STRB_MODE  $end
$var parameter 32 ]D   AXI_SIGNALING  $end
$var parameter 32 ^D   KEEP_BASE_ADDR  $end
$var parameter 32 _D   BASE_ADDR  $end
$var parameter 32 `D   SLV_CDC  $end
$var parameter 32 aD   SLV_OSTDREQ_NUM  $end
$var parameter 32 bD   SLV_OSTDREQ_SIZE  $end
$var parameter 32 cD   USER_SUPPORT  $end
$var parameter 32 dD   AXI_AUSER_W  $end
$var parameter 32 eD   AXI_WUSER_W  $end
$var parameter 32 fD   AXI_BUSER_W  $end
$var parameter 32 gD   AXI_RUSER_W  $end
$var parameter 32 hD   AWCH_W  $end
$var parameter 32 iD   WCH_W  $end
$var parameter 32 jD   BCH_W  $end
$var parameter 32 kD   ARCH_W  $end
$var parameter 32 lD   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 mD   i_awvalid  $end
$var reg       1 nD   i_awready  $end
$var wire     27 oD   i_awch [26:0] $end
$var wire      1 pD   i_wvalid  $end
$var reg       1 qD   i_wready  $end
$var wire      1 rD   i_wlast  $end
$var wire     45 sD   i_wch [44:0] $end
$var reg       1 tD   i_bvalid  $end
$var wire      1 uD   i_bready  $end
$var reg      10 vD   i_bch [9:0] $end
$var wire      1 wD   i_arvalid  $end
$var reg       1 xD   i_arready  $end
$var wire     27 yD   i_arch [26:0] $end
$var reg       1 zD   i_rvalid  $end
$var wire      1 {D   i_rready  $end
$var reg       1 |D   i_rlast  $end
$var reg      50 }D   i_rch [49:0] $end
$var wire      1 i    o_aclk  $end
$var wire      1 i    o_aresetn  $end
$var wire      1 h    o_srst  $end
$var reg       1 ~D   o_awvalid  $end
$var wire      1 i    o_awready  $end
$var reg      16 !E   o_awaddr [15:0] $end
$var reg       8 "E   o_awlen [7:0] $end
$var reg       3 #E   o_awsize [2:0] $end
$var reg       2 $E   o_awburst [1:0] $end
$var reg       2 %E   o_awlock [1:0] $end
$var reg       4 &E   o_awcache [3:0] $end
$var reg       3 'E   o_awprot [2:0] $end
$var reg       4 (E   o_awqos [3:0] $end
$var reg       4 )E   o_awregion [3:0] $end
$var reg       8 *E   o_awid [7:0] $end
$var reg       1 +E   o_awuser [0:0] $end
$var reg       1 ,E   o_wvalid  $end
$var wire      1 h    o_wready  $end
$var reg       1 -E   o_wlast  $end
$var reg      40 .E   o_wdata [39:0] $end
$var reg       5 /E   o_wstrb [4:0] $end
$var reg       1 0E   o_wuser [0:0] $end
$var wire      1 h    o_bvalid  $end
$var reg       1 1E   o_bready  $end
$var wire      8 l    o_bid [7:0] $end
$var wire      2 n    o_bresp [1:0] $end
$var wire      1 h    o_buser [0] $end
$var reg       1 2E   o_arvalid  $end
$var wire      1 h    o_arready  $end
$var reg      16 3E   o_araddr [15:0] $end
$var reg       8 4E   o_arlen [7:0] $end
$var reg       3 5E   o_arsize [2:0] $end
$var reg       2 6E   o_arburst [1:0] $end
$var reg       2 7E   o_arlock [1:0] $end
$var reg       4 8E   o_arcache [3:0] $end
$var reg       3 9E   o_arprot [2:0] $end
$var reg       4 :E   o_arqos [3:0] $end
$var reg       4 ;E   o_arregion [3:0] $end
$var reg       8 <E   o_arid [7:0] $end
$var reg       1 =E   o_aruser [0:0] $end
$var wire      1 h    o_rvalid  $end
$var reg       1 >E   o_rready  $end
$var wire      8 l    o_rid [7:0] $end
$var wire      2 n    o_rresp [1:0] $end
$var wire     40 q    o_rdata [39:0] $end
$var wire      1 h    o_rlast  $end
$var wire      1 h    o_ruser [0] $end
$var reg      27 ?E   awch [26:0] $end
$var reg      45 @E   wch [44:0] $end
$var reg      10 AE   bch [9:0] $end
$var reg      27 BE   arch [26:0] $end
$var reg      50 CE   rch [49:0] $end
$var reg       1 DE   rlast  $end
$var reg      16 EE   awaddr [15:0] $end
$var reg      16 FE   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 GE   PASS_THRU  $end
$var parameter 32 HE   AW_ASIZE  $end
$var parameter 32 IE   W_ASIZE  $end
$var parameter 32 JE   B_ASIZE  $end
$var parameter 32 KE   AR_ASIZE  $end
$var parameter 32 LE   R_ASIZE  $end
$var reg       1 ME   aw_full  $end
$var reg       1 NE   aw_empty  $end
$var reg       1 OE   w_full  $end
$var reg       1 PE   w_empty  $end
$var reg       1 QE   ar_full  $end
$var reg       1 RE   ar_empty  $end
$var reg       1 SE   r_full  $end
$var reg       1 TE   r_empty  $end
$var reg       1 UE   b_full  $end
$var reg       1 VE   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 WE   PASS_THRU  $end
$var parameter 32 XE   ADDR_WIDTH  $end
$var parameter 32 YE   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 oD   data_in [26:0] $end
$var wire      1 mD   push  $end
$var reg       1 ZE   full  $end
$var reg      27 [E   data_out [26:0] $end
$var wire      1 i    pull  $end
$var reg       1 \E   empty  $end
$var reg       1 ]E   wr_en  $end
$var reg       3 ^E   wrptr [2:0] $end
$var reg       3 _E   rdptr [2:0] $end
$var reg       1 `E   empty_flag  $end
$var reg       1 aE   full_flag  $end
$var reg       1 bE   pass_thru  $end
$var reg      27 cE   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 dE   ADDR_WIDTH  $end
$var parameter 32 eE   DATA_WIDTH  $end
$var parameter 32 fE   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 gE   wr_en  $end
$var wire      2 hE   addr_in [1:0] $end
$var wire     27 oD   data_in [26:0] $end
$var wire      2 iE   addr_out [1:0] $end
$var reg      27 jE   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 kE   PASS_THRU  $end
$var parameter 32 lE   ADDR_WIDTH  $end
$var parameter 32 mE   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 nE   data_in [45:0] $end
$var wire      1 pD   push  $end
$var reg       1 oE   full  $end
$var reg      46 pE   data_out [45:0] $end
$var wire      1 h    pull  $end
$var reg       1 qE   empty  $end
$var reg       1 rE   wr_en  $end
$var reg       3 sE   wrptr [2:0] $end
$var reg       3 tE   rdptr [2:0] $end
$var reg       1 uE   empty_flag  $end
$var reg       1 vE   full_flag  $end
$var reg       1 wE   pass_thru  $end
$var reg      46 xE   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 yE   ADDR_WIDTH  $end
$var parameter 32 zE   DATA_WIDTH  $end
$var parameter 32 {E   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 |E   wr_en  $end
$var wire      2 }E   addr_in [1:0] $end
$var wire     46 nE   data_in [45:0] $end
$var wire      2 ~E   addr_out [1:0] $end
$var reg      46 !F   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 "F   PASS_THRU  $end
$var parameter 32 #F   ADDR_WIDTH  $end
$var parameter 32 $F   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 %F   data_in [9:0] $end
$var wire      1 h    push  $end
$var reg       1 &F   full  $end
$var reg      10 'F   data_out [9:0] $end
$var wire      1 uD   pull  $end
$var reg       1 (F   empty  $end
$var reg       1 )F   wr_en  $end
$var reg       3 *F   wrptr [2:0] $end
$var reg       3 +F   rdptr [2:0] $end
$var reg       1 ,F   empty_flag  $end
$var reg       1 -F   full_flag  $end
$var reg       1 .F   pass_thru  $end
$var reg      10 /F   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 0F   ADDR_WIDTH  $end
$var parameter 32 1F   DATA_WIDTH  $end
$var parameter 32 2F   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 3F   wr_en  $end
$var wire      2 4F   addr_in [1:0] $end
$var wire     10 %F   data_in [9:0] $end
$var wire      2 5F   addr_out [1:0] $end
$var reg      10 6F   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 7F   PASS_THRU  $end
$var parameter 32 8F   ADDR_WIDTH  $end
$var parameter 32 9F   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 yD   data_in [26:0] $end
$var wire      1 wD   push  $end
$var reg       1 :F   full  $end
$var reg      27 ;F   data_out [26:0] $end
$var wire      1 h    pull  $end
$var reg       1 <F   empty  $end
$var reg       1 =F   wr_en  $end
$var reg       3 >F   wrptr [2:0] $end
$var reg       3 ?F   rdptr [2:0] $end
$var reg       1 @F   empty_flag  $end
$var reg       1 AF   full_flag  $end
$var reg       1 BF   pass_thru  $end
$var reg      27 CF   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 DF   ADDR_WIDTH  $end
$var parameter 32 EF   DATA_WIDTH  $end
$var parameter 32 FF   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 GF   wr_en  $end
$var wire      2 HF   addr_in [1:0] $end
$var wire     27 yD   data_in [26:0] $end
$var wire      2 IF   addr_out [1:0] $end
$var reg      27 JF   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 KF   PASS_THRU  $end
$var parameter 32 LF   ADDR_WIDTH  $end
$var parameter 32 MF   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 NF   data_in [50:0] $end
$var wire      1 h    push  $end
$var reg       1 OF   full  $end
$var reg      51 PF   data_out [50:0] $end
$var wire      1 {D   pull  $end
$var reg       1 QF   empty  $end
$var reg       1 RF   wr_en  $end
$var reg       3 SF   wrptr [2:0] $end
$var reg       3 TF   rdptr [2:0] $end
$var reg       1 UF   empty_flag  $end
$var reg       1 VF   full_flag  $end
$var reg       1 WF   pass_thru  $end
$var reg      51 XF   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 YF   ADDR_WIDTH  $end
$var parameter 32 ZF   DATA_WIDTH  $end
$var parameter 32 [F   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 \F   wr_en  $end
$var wire      2 ]F   addr_in [1:0] $end
$var wire     51 NF   data_in [50:0] $end
$var wire      2 ^F   addr_out [1:0] $end
$var reg      51 _F   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module mst3_if $end
$var parameter 32 `F   AXI_ADDR_W  $end
$var parameter 32 aF   AXI_ID_W  $end
$var parameter 32 bF   AXI_DATA_W  $end
$var parameter 32 cF   STRB_MODE  $end
$var parameter 32 dF   AXI_SIGNALING  $end
$var parameter 32 eF   KEEP_BASE_ADDR  $end
$var parameter 32 fF   BASE_ADDR  $end
$var parameter 32 gF   SLV_CDC  $end
$var parameter 32 hF   SLV_OSTDREQ_NUM  $end
$var parameter 32 iF   SLV_OSTDREQ_SIZE  $end
$var parameter 32 jF   USER_SUPPORT  $end
$var parameter 32 kF   AXI_AUSER_W  $end
$var parameter 32 lF   AXI_WUSER_W  $end
$var parameter 32 mF   AXI_BUSER_W  $end
$var parameter 32 nF   AXI_RUSER_W  $end
$var parameter 32 oF   AWCH_W  $end
$var parameter 32 pF   WCH_W  $end
$var parameter 32 qF   BCH_W  $end
$var parameter 32 rF   ARCH_W  $end
$var parameter 32 sF   RCH_W  $end
$var wire      1 h    i_aclk  $end
$var wire      1 i    i_aresetn  $end
$var wire      1 h    i_srst  $end
$var wire      1 tF   i_awvalid  $end
$var reg       1 uF   i_awready  $end
$var wire     27 vF   i_awch [26:0] $end
$var wire      1 wF   i_wvalid  $end
$var reg       1 xF   i_wready  $end
$var wire      1 yF   i_wlast  $end
$var wire     45 zF   i_wch [44:0] $end
$var reg       1 {F   i_bvalid  $end
$var wire      1 |F   i_bready  $end
$var reg      10 }F   i_bch [9:0] $end
$var wire      1 ~F   i_arvalid  $end
$var reg       1 !G   i_arready  $end
$var wire     27 "G   i_arch [26:0] $end
$var reg       1 #G   i_rvalid  $end
$var wire      1 $G   i_rready  $end
$var reg       1 %G   i_rlast  $end
$var reg      50 &G   i_rch [49:0] $end
$var wire      1 i    o_aclk  $end
$var wire      1 i    o_aresetn  $end
$var wire      1 h    o_srst  $end
$var reg       1 'G   o_awvalid  $end
$var wire      1 i    o_awready  $end
$var reg      16 (G   o_awaddr [15:0] $end
$var reg       8 )G   o_awlen [7:0] $end
$var reg       3 *G   o_awsize [2:0] $end
$var reg       2 +G   o_awburst [1:0] $end
$var reg       2 ,G   o_awlock [1:0] $end
$var reg       4 -G   o_awcache [3:0] $end
$var reg       3 .G   o_awprot [2:0] $end
$var reg       4 /G   o_awqos [3:0] $end
$var reg       4 0G   o_awregion [3:0] $end
$var reg       8 1G   o_awid [7:0] $end
$var reg       1 2G   o_awuser [0:0] $end
$var reg       1 3G   o_wvalid  $end
$var wire      1 h    o_wready  $end
$var reg       1 4G   o_wlast  $end
$var reg      40 5G   o_wdata [39:0] $end
$var reg       5 6G   o_wstrb [4:0] $end
$var reg       1 7G   o_wuser [0:0] $end
$var wire      1 h    o_bvalid  $end
$var reg       1 8G   o_bready  $end
$var wire      8 l    o_bid [7:0] $end
$var wire      2 n    o_bresp [1:0] $end
$var wire      1 h    o_buser [0] $end
$var reg       1 9G   o_arvalid  $end
$var wire      1 h    o_arready  $end
$var reg      16 :G   o_araddr [15:0] $end
$var reg       8 ;G   o_arlen [7:0] $end
$var reg       3 <G   o_arsize [2:0] $end
$var reg       2 =G   o_arburst [1:0] $end
$var reg       2 >G   o_arlock [1:0] $end
$var reg       4 ?G   o_arcache [3:0] $end
$var reg       3 @G   o_arprot [2:0] $end
$var reg       4 AG   o_arqos [3:0] $end
$var reg       4 BG   o_arregion [3:0] $end
$var reg       8 CG   o_arid [7:0] $end
$var reg       1 DG   o_aruser [0:0] $end
$var wire      1 h    o_rvalid  $end
$var reg       1 EG   o_rready  $end
$var wire      8 l    o_rid [7:0] $end
$var wire      2 n    o_rresp [1:0] $end
$var wire     40 q    o_rdata [39:0] $end
$var wire      1 h    o_rlast  $end
$var wire      1 h    o_ruser [0] $end
$var reg      27 FG   awch [26:0] $end
$var reg      45 GG   wch [44:0] $end
$var reg      10 HG   bch [9:0] $end
$var reg      27 IG   arch [26:0] $end
$var reg      50 JG   rch [49:0] $end
$var reg       1 KG   rlast  $end
$var reg      16 LG   awaddr [15:0] $end
$var reg      16 MG   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 NG   PASS_THRU  $end
$var parameter 32 OG   AW_ASIZE  $end
$var parameter 32 PG   W_ASIZE  $end
$var parameter 32 QG   B_ASIZE  $end
$var parameter 32 RG   AR_ASIZE  $end
$var parameter 32 SG   R_ASIZE  $end
$var reg       1 TG   aw_full  $end
$var reg       1 UG   aw_empty  $end
$var reg       1 VG   w_full  $end
$var reg       1 WG   w_empty  $end
$var reg       1 XG   ar_full  $end
$var reg       1 YG   ar_empty  $end
$var reg       1 ZG   r_full  $end
$var reg       1 [G   r_empty  $end
$var reg       1 \G   b_full  $end
$var reg       1 ]G   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 ^G   PASS_THRU  $end
$var parameter 32 _G   ADDR_WIDTH  $end
$var parameter 32 `G   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 vF   data_in [26:0] $end
$var wire      1 tF   push  $end
$var reg       1 aG   full  $end
$var reg      27 bG   data_out [26:0] $end
$var wire      1 i    pull  $end
$var reg       1 cG   empty  $end
$var reg       1 dG   wr_en  $end
$var reg       3 eG   wrptr [2:0] $end
$var reg       3 fG   rdptr [2:0] $end
$var reg       1 gG   empty_flag  $end
$var reg       1 hG   full_flag  $end
$var reg       1 iG   pass_thru  $end
$var reg      27 jG   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 kG   ADDR_WIDTH  $end
$var parameter 32 lG   DATA_WIDTH  $end
$var parameter 32 mG   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 nG   wr_en  $end
$var wire      2 oG   addr_in [1:0] $end
$var wire     27 vF   data_in [26:0] $end
$var wire      2 pG   addr_out [1:0] $end
$var reg      27 qG   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 rG   PASS_THRU  $end
$var parameter 32 sG   ADDR_WIDTH  $end
$var parameter 32 tG   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     46 uG   data_in [45:0] $end
$var wire      1 wF   push  $end
$var reg       1 vG   full  $end
$var reg      46 wG   data_out [45:0] $end
$var wire      1 h    pull  $end
$var reg       1 xG   empty  $end
$var reg       1 yG   wr_en  $end
$var reg       3 zG   wrptr [2:0] $end
$var reg       3 {G   rdptr [2:0] $end
$var reg       1 |G   empty_flag  $end
$var reg       1 }G   full_flag  $end
$var reg       1 ~G   pass_thru  $end
$var reg      46 !H   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 "H   ADDR_WIDTH  $end
$var parameter 32 #H   DATA_WIDTH  $end
$var parameter 32 $H   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 %H   wr_en  $end
$var wire      2 &H   addr_in [1:0] $end
$var wire     46 uG   data_in [45:0] $end
$var wire      2 'H   addr_out [1:0] $end
$var reg      46 (H   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 )H   PASS_THRU  $end
$var parameter 32 *H   ADDR_WIDTH  $end
$var parameter 32 +H   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     10 ,H   data_in [9:0] $end
$var wire      1 h    push  $end
$var reg       1 -H   full  $end
$var reg      10 .H   data_out [9:0] $end
$var wire      1 |F   pull  $end
$var reg       1 /H   empty  $end
$var reg       1 0H   wr_en  $end
$var reg       3 1H   wrptr [2:0] $end
$var reg       3 2H   rdptr [2:0] $end
$var reg       1 3H   empty_flag  $end
$var reg       1 4H   full_flag  $end
$var reg       1 5H   pass_thru  $end
$var reg      10 6H   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 7H   ADDR_WIDTH  $end
$var parameter 32 8H   DATA_WIDTH  $end
$var parameter 32 9H   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 :H   wr_en  $end
$var wire      2 ;H   addr_in [1:0] $end
$var wire     10 ,H   data_in [9:0] $end
$var wire      2 <H   addr_out [1:0] $end
$var reg      10 =H   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 >H   PASS_THRU  $end
$var parameter 32 ?H   ADDR_WIDTH  $end
$var parameter 32 @H   DATA_WIDTH  $end
$var wire      1 h    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     27 "G   data_in [26:0] $end
$var wire      1 ~F   push  $end
$var reg       1 AH   full  $end
$var reg      27 BH   data_out [26:0] $end
$var wire      1 h    pull  $end
$var reg       1 CH   empty  $end
$var reg       1 DH   wr_en  $end
$var reg       3 EH   wrptr [2:0] $end
$var reg       3 FH   rdptr [2:0] $end
$var reg       1 GH   empty_flag  $end
$var reg       1 HH   full_flag  $end
$var reg       1 IH   pass_thru  $end
$var reg      27 JH   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 KH   ADDR_WIDTH  $end
$var parameter 32 LH   DATA_WIDTH  $end
$var parameter 32 MH   FFD_EN  $end
$var wire      1 h    aclk  $end
$var wire      1 NH   wr_en  $end
$var wire      2 OH   addr_in [1:0] $end
$var wire     27 "G   data_in [26:0] $end
$var wire      2 PH   addr_out [1:0] $end
$var reg      27 QH   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 RH   PASS_THRU  $end
$var parameter 32 SH   ADDR_WIDTH  $end
$var parameter 32 TH   DATA_WIDTH  $end
$var wire      1 i    aclk  $end
$var wire      1 i    aresetn  $end
$var wire      1 h    srst  $end
$var wire      1 ~#   flush  $end
$var wire     51 UH   data_in [50:0] $end
$var wire      1 h    push  $end
$var reg       1 VH   full  $end
$var reg      51 WH   data_out [50:0] $end
$var wire      1 $G   pull  $end
$var reg       1 XH   empty  $end
$var reg       1 YH   wr_en  $end
$var reg       3 ZH   wrptr [2:0] $end
$var reg       3 [H   rdptr [2:0] $end
$var reg       1 \H   empty_flag  $end
$var reg       1 ]H   full_flag  $end
$var reg       1 ^H   pass_thru  $end
$var reg      51 _H   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 `H   ADDR_WIDTH  $end
$var parameter 32 aH   DATA_WIDTH  $end
$var parameter 32 bH   FFD_EN  $end
$var wire      1 i    aclk  $end
$var wire      1 cH   wr_en  $end
$var wire      2 dH   addr_in [1:0] $end
$var wire     51 UH   data_in [50:0] $end
$var wire      2 eH   addr_out [1:0] $end
$var reg      51 fH   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 bH
b110011 aH
b10 `H
b110011 TH
b10 SH
b0 RH
b0 MH
b11011 LH
b10 KH
b11011 @H
b10 ?H
b0 >H
b0 9H
b1010 8H
b10 7H
b1010 +H
b10 *H
b0 )H
b0 $H
b101110 #H
b10 "H
b101110 tG
b10 sG
b0 rG
b0 mG
b11011 lG
b10 kG
b11011 `G
b10 _G
b0 ^G
b10 SG
b10 RG
b10 QG
b10 PG
b10 OG
b0 NG
b110010 sF
b11011 rF
b1010 qF
b101101 pF
b11011 oF
b1 nF
b1 mF
b1 lF
b1 kF
b0 jF
b1 iF
b100 hF
b0 gF
b11000000000000 fF
b0 eF
b0 dF
b1 cF
b101000 bF
b1000 aF
b10000 `F
b0 [F
b110011 ZF
b10 YF
b110011 MF
b10 LF
b0 KF
b0 FF
b11011 EF
b10 DF
b11011 9F
b10 8F
b0 7F
b0 2F
b1010 1F
b10 0F
b1010 $F
b10 #F
b0 "F
b0 {E
b101110 zE
b10 yE
b101110 mE
b10 lE
b0 kE
b0 fE
b11011 eE
b10 dE
b11011 YE
b10 XE
b0 WE
b10 LE
b10 KE
b10 JE
b10 IE
b10 HE
b0 GE
b110010 lD
b11011 kD
b1010 jD
b101101 iD
b11011 hD
b1 gD
b1 fD
b1 eD
b1 dD
b0 cD
b1 bD
b100 aD
b0 `D
b10000000000000 _D
b0 ^D
b0 ]D
b1 \D
b101000 [D
b1000 ZD
b10000 YD
b0 TD
b110011 SD
b10 RD
b110011 FD
b10 ED
b0 DD
b0 ?D
b11011 >D
b10 =D
b11011 2D
b10 1D
b0 0D
b0 +D
b1010 *D
b10 )D
b1010 {C
b10 zC
b0 yC
b0 tC
b101110 sC
b10 rC
b101110 fC
b10 eC
b0 dC
b0 _C
b11011 ^C
b10 ]C
b11011 RC
b10 QC
b0 PC
b10 EC
b10 DC
b10 CC
b10 BC
b10 AC
b0 @C
b110010 eB
b11011 dB
b1010 cB
b101101 bB
b11011 aB
b1 `B
b1 _B
b1 ^B
b1 ]B
b0 \B
b1 [B
b100 ZB
b0 YB
b1000000000000 XB
b0 WB
b0 VB
b1 UB
b101000 TB
b1000 SB
b10000 RB
b0 MB
b110011 LB
b10 KB
b110011 ?B
b10 >B
b0 =B
b0 8B
b11011 7B
b10 6B
b11011 +B
b10 *B
b0 )B
b0 $B
b1010 #B
b10 "B
b1010 tA
b10 sA
b0 rA
b0 mA
b101110 lA
b10 kA
b101110 _A
b10 ^A
b0 ]A
b0 XA
b11011 WA
b10 VA
b11011 KA
b10 JA
b0 IA
b10 >A
b10 =A
b10 <A
b10 ;A
b10 :A
b0 9A
b110010 ^@
b11011 ]@
b1010 \@
b101101 [@
b11011 Z@
b1 Y@
b1 X@
b1 W@
b1 V@
b0 U@
b1 T@
b100 S@
b0 R@
b0 Q@
b0 P@
b0 O@
b1 N@
b101000 M@
b1000 L@
b10000 K@
b0 E@
b110011 D@
b0 >@
b11011 =@
b0 7@
b1010 6@
b0 0@
b101110 /@
b0 )@
b11011 (@
b100 "@
b0 l?
b0 k?
b0 j?
b0 i?
b100 h?
b0 c?
b100 b?
b1000 a?
b100 S?
b1000 R?
b0 Q?
b100 K?
b0 7?
b0 6?
b0 5?
b0 4?
b100 3?
b110010 ]>
b11011 \>
b1010 [>
b101101 Z>
b11011 Y>
b0 X>
b0 W>
b0 V>
b0 U>
b1000000 T>
b110000 S>
b100000 R>
b10000 Q>
b1 P>
b100 O>
b101000 N>
b1000 M>
b11 ;>
b0 5>
b110011 4>
b0 .>
b11011 ->
b0 '>
b1010 &>
b0 ~=
b101110 }=
b0 w=
b11011 v=
b100 p=
b0 \=
b0 [=
b0 Z=
b0 Y=
b100 X=
b0 S=
b100 R=
b1000 Q=
b100 C=
b1000 B=
b0 A=
b100 ;=
b0 '=
b0 &=
b0 %=
b0 $=
b100 #=
b110010 M<
b11011 L<
b1010 K<
b101101 J<
b11011 I<
b0 H<
b0 G<
b0 F<
b0 E<
b1000000 D<
b110000 C<
b100000 B<
b10000 A<
b1 @<
b100 ?<
b101000 ><
b1000 =<
b10 +<
b0 %<
b110011 $<
b0 |;
b11011 {;
b0 u;
b1010 t;
b0 n;
b101110 m;
b0 g;
b11011 f;
b100 `;
b0 L;
b0 K;
b0 J;
b0 I;
b100 H;
b0 C;
b100 B;
b1000 A;
b100 3;
b1000 2;
b0 1;
b100 +;
b0 u:
b0 t:
b0 s:
b0 r:
b100 q:
b110010 =:
b11011 <:
b1010 ;:
b101101 ::
b11011 9:
b0 8:
b0 7:
b0 6:
b0 5:
b1000000 4:
b110000 3:
b100000 2:
b10000 1:
b1 0:
b100 /:
b101000 .:
b1000 -:
b1 y9
b0 s9
b110011 r9
b0 l9
b11011 k9
b0 e9
b1010 d9
b0 ^9
b101110 ]9
b0 W9
b11011 V9
b100 P9
b0 <9
b0 ;9
b0 :9
b0 99
b100 89
b0 39
b100 29
b1000 19
b100 #9
b1000 "9
b0 !9
b100 y8
b0 e8
b0 d8
b0 c8
b0 b8
b100 a8
b110010 -8
b11011 ,8
b1010 +8
b101101 *8
b11011 )8
b0 (8
b0 '8
b0 &8
b0 %8
b1000000 $8
b110000 #8
b100000 "8
b10000 !8
b1 ~7
b100 }7
b101000 |7
b1000 {7
b0 i7
b11 h7
b10 g7
b1 f7
b0 e7
b11 d7
b11 c7
b10 b7
b1 a7
b0 `7
b10 _7
b11 ^7
b10 ]7
b1 \7
b0 [7
b1 Z7
b11 Y7
b10 X7
b1 W7
b0 V7
b0 U7
b11 T7
b10 S7
b1 R7
b0 Q7
b11 P7
b11 O7
b10 N7
b1 M7
b0 L7
b10 K7
b11 J7
b10 I7
b1 H7
b0 G7
b1 F7
b11 E7
b10 D7
b1 C7
b0 B7
b0 A7
b100 ;7
b0 '7
b0 &7
b0 %7
b0 $7
b100 #7
b0 |6
b10000 {6
b100 z6
b10000 l6
b100 k6
b0 j6
b100 d6
b0 P6
b0 O6
b0 N6
b0 M6
b100 L6
b0 G6
b1000 F6
b10 E6
b1000 76
b10 66
b0 56
b0 06
b100 /6
b1000 .6
b100 ~5
b1000 }5
b0 |5
b110010 95
b11011 85
b1010 75
b101101 65
b11011 55
b11111111111111 45
b11000000000000 35
b10111111111111 25
b10000000000000 15
b1111111111111 05
b1000000000000 /5
b111111111111 .5
b0 -5
b1111 ,5
b1 +5
b100 *5
b0 )5
b1000 (5
b10000 '5
b0 !5
b110011 ~4
b0 x4
b11011 w4
b0 q4
b1010 p4
b0 j4
b101110 i4
b0 c4
b11011 b4
b11 P4
b100 J4
b0 64
b0 54
b0 44
b0 34
b100 24
b0 -4
b10000 ,4
b100 +4
b10000 {3
b100 z3
b0 y3
b100 s3
b0 _3
b0 ^3
b0 ]3
b0 \3
b100 [3
b0 V3
b1000 U3
b10 T3
b1000 F3
b10 E3
b0 D3
b0 ?3
b100 >3
b1000 =3
b100 /3
b1000 .3
b0 -3
b110010 H2
b11011 G2
b1010 F2
b101101 E2
b11011 D2
b11111111111111 C2
b11000000000000 B2
b10111111111111 A2
b10000000000000 @2
b1111111111111 ?2
b1000000000000 >2
b111111111111 =2
b0 <2
b1111 ;2
b1 :2
b100 92
b0 82
b1000 72
b10000 62
b0 02
b110011 /2
b0 )2
b11011 (2
b0 "2
b1010 !2
b0 y1
b101110 x1
b0 r1
b11011 q1
b10 _1
b100 Y1
b0 E1
b0 D1
b0 C1
b0 B1
b100 A1
b0 <1
b10000 ;1
b100 :1
b10000 ,1
b100 +1
b0 *1
b100 $1
b0 n0
b0 m0
b0 l0
b0 k0
b100 j0
b0 e0
b1000 d0
b10 c0
b1000 U0
b10 T0
b0 S0
b0 N0
b100 M0
b1000 L0
b100 >0
b1000 =0
b0 <0
b110010 W/
b11011 V/
b1010 U/
b101101 T/
b11011 S/
b11111111111111 R/
b11000000000000 Q/
b10111111111111 P/
b10000000000000 O/
b1111111111111 N/
b1000000000000 M/
b111111111111 L/
b0 K/
b1111 J/
b1 I/
b100 H/
b0 G/
b1000 F/
b10000 E/
b0 ?/
b110011 >/
b0 8/
b11011 7/
b0 1/
b1010 0/
b0 */
b101110 )/
b0 #/
b11011 "/
b1 n.
b100 h.
b0 T.
b0 S.
b0 R.
b0 Q.
b100 P.
b0 K.
b10000 J.
b100 I.
b10000 ;.
b100 :.
b0 9.
b100 3.
b0 }-
b0 |-
b0 {-
b0 z-
b100 y-
b0 t-
b1000 s-
b10 r-
b1000 d-
b10 c-
b0 b-
b0 ]-
b100 \-
b1000 [-
b100 M-
b1000 L-
b0 K-
b110010 f,
b11011 e,
b1010 d,
b101101 c,
b11011 b,
b11111111111111 a,
b11000000000000 `,
b10111111111111 _,
b10000000000000 ^,
b1111111111111 ],
b1000000000000 \,
b111111111111 [,
b0 Z,
b1111 Y,
b1 X,
b100 W,
b0 V,
b1000 U,
b10000 T,
b0 N,
b110011 M,
b0 G,
b11011 F,
b0 @,
b1010 ?,
b0 9,
b101110 8,
b0 2,
b11011 1,
b0 }+
b110010 }*
b11011 |*
b1010 {*
b101101 z*
b11011 y*
b11111111111111 x*
b11000000000000 w*
b10111111111111 v*
b10000000000000 u*
b1111111111111 t*
b1000000000000 s*
b111111111111 r*
b0 q*
b0 p*
b0 o*
b0 n*
b0 m*
b1000000 l*
b110000 k*
b100000 j*
b10000 i*
b1111111111111111 h*
b1 g*
b0 f*
b0 e*
b100 d*
b100 c*
b0 b*
b101000 a*
b1000 `*
b10000 _*
b0 Z*
b110011 Y*
b10 X*
b110011 L*
b10 K*
b0 J*
b0 E*
b11011 D*
b10 C*
b11011 7*
b10 6*
b0 5*
b0 0*
b1010 /*
b10 .*
b1010 #*
b10 "*
b0 !*
b0 z)
b101110 y)
b10 x)
b101110 l)
b10 k)
b0 j)
b0 e)
b11011 d)
b10 c)
b11011 W)
b10 V)
b0 U)
b10 J)
b10 I)
b10 H)
b10 G)
b10 F)
b0 E)
b110010 ~(
b11011 }(
b1010 |(
b101101 {(
b11011 z(
b1 y(
b1 x(
b1 w(
b1 v(
b0 u(
b1 t(
b100 s(
b0 r(
b0 q(
b1 p(
b100 o(
b101000 n(
b1000 m(
b10000 l(
b0 g(
b110011 f(
b10 e(
b110011 Y(
b10 X(
b0 W(
b0 R(
b11011 Q(
b10 P(
b11011 D(
b10 C(
b0 B(
b0 =(
b1010 <(
b10 ;(
b1010 0(
b10 /(
b0 .(
b0 )(
b101110 ((
b10 '(
b101110 y'
b10 x'
b0 w'
b0 r'
b11011 q'
b10 p'
b11011 d'
b10 c'
b0 b'
b10 W'
b10 V'
b10 U'
b10 T'
b10 S'
b0 R'
b110010 -'
b11011 ,'
b1010 +'
b101101 *'
b11011 )'
b1 ('
b1 ''
b1 &'
b1 %'
b0 $'
b1 #'
b100 "'
b0 !'
b0 ~&
b1 }&
b100 |&
b101000 {&
b1000 z&
b10000 y&
b0 t&
b110011 s&
b10 r&
b110011 f&
b10 e&
b0 d&
b0 _&
b11011 ^&
b10 ]&
b11011 Q&
b10 P&
b0 O&
b0 J&
b1010 I&
b10 H&
b1010 =&
b10 <&
b0 ;&
b0 6&
b101110 5&
b10 4&
b101110 (&
b10 '&
b0 &&
b0 !&
b11011 ~%
b10 }%
b11011 q%
b10 p%
b0 o%
b10 d%
b10 c%
b10 b%
b10 a%
b10 `%
b0 _%
b110010 :%
b11011 9%
b1010 8%
b101101 7%
b11011 6%
b1 5%
b1 4%
b1 3%
b1 2%
b0 1%
b1 0%
b100 /%
b0 .%
b0 -%
b1 ,%
b100 +%
b101000 *%
b1000 )%
b10000 (%
b0 #%
b110011 "%
b10 !%
b110011 s$
b10 r$
b0 q$
b0 l$
b11011 k$
b10 j$
b11011 ^$
b10 ]$
b0 \$
b0 W$
b1010 V$
b10 U$
b1010 J$
b10 I$
b0 H$
b0 C$
b101110 B$
b10 A$
b101110 5$
b10 4$
b0 3$
b0 .$
b11011 -$
b10 ,$
b11011 }#
b10 |#
b0 {#
b10 p#
b10 o#
b10 n#
b10 m#
b10 l#
b0 k#
b110010 F#
b11011 E#
b1010 D#
b101101 C#
b11011 B#
b1 A#
b1 @#
b1 ?#
b1 >#
b0 =#
b1 <#
b100 ;#
b0 :#
b0 9#
b1 8#
b100 7#
b101000 6#
b1000 5#
b10000 4#
b1111111111111111 o"
b110010 n"
b11011 m"
b1010 l"
b101101 k"
b11011 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 d
b1 c
b100 b
b11111111111111 a
b11000000000000 `
b0 _
b0 ^
b1 ]
b100 \
b10111111111111 [
b10000000000000 Z
b0 Y
b0 X
b1 W
b100 V
b1111111111111 U
b1000000000000 T
b0 S
b0 R
b1 Q
b100 P
b111111111111 O
b0 N
b0 M
b0 L
b1000000 K
b1111 J
b0 I
b1 H
b100 G
b0 F
b0 E
b110000 D
b1111 C
b0 B
b1 A
b100 @
b0 ?
b0 >
b100000 =
b1111 <
b0 ;
b1 :
b100 9
b0 8
b0 7
b10000 6
b1111 5
b0 4
b1 3
b100 2
b0 1
b1 0
b10011100010000 /
b1 .
b1 -
b1 ,
b1 +
b0 *
b0 )
b1 (
b0 '
b0 &
b100 %
b100 $
b101000 #
b1000 "
b10000 !
1e
0f
0g
0h
1i
xj
b1010010110100101 k
b0 l
b0 m
b0 n
b0 o
xp
b0 q
b0 r
0s
bx t
bx u
xv
xw
b1100001111000011 x
0y
bx z
bx {
bx |
x}
x~
x!!
x"!
0#!
bx $!
bx %!
x&!
x'!
0(!
bx )!
bx *!
bx +!
x,!
x-!
x.!
x/!
00!
bx 1!
bx 2!
x3!
x4!
05!
bx 6!
bx 7!
bx 8!
x9!
x:!
x;!
x<!
0=!
bx >!
bx ?!
x@!
xA!
0B!
bx C!
bx D!
bx E!
xF!
xG!
xH!
bx I!
bx J!
bx K!
bx L!
bx M!
bx N!
bx O!
bx P!
bx Q!
bx R!
xS!
xT!
xU!
bx V!
bx W!
xX!
xY!
xZ!
bx [!
bx \!
bx ]!
bx ^!
bx _!
bx `!
bx a!
bx b!
bx c!
bx d!
xe!
xf!
xg!
bx h!
bx i!
bx j!
bx k!
bx l!
bx m!
bx n!
bx o!
bx p!
bx q!
xr!
xs!
xt!
bx u!
bx v!
xw!
xx!
xy!
bx z!
bx {!
bx |!
bx }!
bx ~!
bx !"
bx ""
bx #"
bx $"
bx %"
x&"
x'"
x("
bx )"
bx *"
bx +"
bx ,"
bx -"
bx ."
bx /"
bx 0"
bx 1"
bx 2"
x3"
x4"
x5"
bx 6"
bx 7"
x8"
x9"
x:"
bx ;"
bx <"
bx ="
bx >"
bx ?"
bx @"
bx A"
bx B"
bx C"
bx D"
xE"
xF"
xG"
bx H"
bx I"
bx J"
bx K"
bx L"
bx M"
bx N"
bx O"
bx P"
bx Q"
xR"
xS"
xT"
bx U"
bx V"
xW"
xX"
xY"
bx Z"
bx ["
bx \"
bx ]"
bx ^"
bx _"
bx `"
bx a"
bx b"
bx c"
xd"
xe"
bx p"
b0 q"
bx r"
bx s"
b0 t"
bx u"
bx v"
b0 w"
b1111 x"
b0 y"
bx z"
b0 {"
bx |"
b0 }"
b1111 ~"
b0 !#
b0 "#
b0 ##
bx $#
b0 %#
b0 &#
bx '#
b0 (#
b0 )#
bx *#
b0 +#
bx ,#
b0 -#
bx .#
b0 /#
bx 0#
b0 1#
bx 2#
bx 3#
xG#
xH#
0I#
bx J#
bx K#
xL#
xM#
0N#
bx O#
bx P#
bx Q#
xR#
xS#
xT#
0U#
bx V#
xW#
0X#
xY#
bx Z#
0[#
1\#
b0 ]#
x^#
0_#
bx `#
0a#
1b#
0c#
b0 d#
b1010010110100101 e#
b0 f#
bx g#
b1100001111000011 h#
bx i#
1j#
xq#
xr#
xs#
xt#
xu#
xv#
0w#
1x#
0y#
1z#
0~#
b1010010110100101 !$
x"$
bx #$
x$$
0%$
bx &$
bx '$
x($
x)$
0*$
bx +$
0/$
bx 0$
bx 1$
bx 2$
b1000000000000000000000000000000000000000000000 6$
x7$
bx 8$
x9$
0:$
bx ;$
bx <$
x=$
x>$
0?$
bx @$
0D$
bx E$
bx F$
bx G$
0K$
bx L$
1M$
0N$
b0 O$
b0 P$
1Q$
0R$
0S$
bx T$
0X$
b0 Y$
b0 Z$
bx [$
b1100001111000011 _$
x`$
bx a$
xb$
0c$
bx d$
bx e$
xf$
xg$
0h$
bx i$
0m$
bx n$
bx o$
bx p$
b0 t$
0u$
bx v$
1w$
0x$
b0 y$
b0 z$
1{$
0|$
0}$
bx ~$
0$%
b0 %%
b0 &%
bx '%
x;%
x<%
0=%
bx >%
bx ?%
x@%
xA%
0B%
bx C%
bx D%
bx E%
xF%
xG%
xH%
0I%
bx J%
xK%
0L%
xM%
bx N%
0O%
1P%
b0 Q%
xR%
0S%
bx T%
0U%
1V%
0W%
b0 X%
b1010010110100101 Y%
b0 Z%
bx [%
b1100001111000011 \%
bx ]%
1^%
xe%
xf%
xg%
xh%
xi%
xj%
0k%
1l%
0m%
1n%
b1010010110100101 r%
xs%
bx t%
xu%
0v%
bx w%
bx x%
xy%
xz%
0{%
bx |%
0"&
bx #&
bx $&
bx %&
b1000000000000000000000000000000000000000000000 )&
x*&
bx +&
x,&
0-&
bx .&
bx /&
x0&
x1&
02&
bx 3&
07&
bx 8&
bx 9&
bx :&
0>&
bx ?&
1@&
0A&
b0 B&
b0 C&
1D&
0E&
0F&
bx G&
0K&
b0 L&
b0 M&
bx N&
b1100001111000011 R&
xS&
bx T&
xU&
0V&
bx W&
bx X&
xY&
xZ&
0[&
bx \&
0`&
bx a&
bx b&
bx c&
b0 g&
0h&
bx i&
1j&
0k&
b0 l&
b0 m&
1n&
0o&
0p&
bx q&
0u&
b0 v&
b0 w&
bx x&
x.'
x/'
00'
bx 1'
bx 2'
x3'
x4'
05'
bx 6'
bx 7'
bx 8'
x9'
x:'
x;'
0<'
bx ='
x>'
0?'
x@'
bx A'
0B'
1C'
b0 D'
xE'
0F'
bx G'
0H'
1I'
0J'
b0 K'
b1010010110100101 L'
b0 M'
bx N'
b1100001111000011 O'
bx P'
1Q'
xX'
xY'
xZ'
x['
x\'
x]'
0^'
1_'
0`'
1a'
b1010010110100101 e'
xf'
bx g'
xh'
0i'
bx j'
bx k'
xl'
xm'
0n'
bx o'
0s'
bx t'
bx u'
bx v'
b1000000000000000000000000000000000000000000000 z'
x{'
bx |'
x}'
0~'
bx !(
bx "(
x#(
x$(
0%(
bx &(
0*(
bx +(
bx ,(
bx -(
01(
bx 2(
13(
04(
b0 5(
b0 6(
17(
08(
09(
bx :(
0>(
b0 ?(
b0 @(
bx A(
b1100001111000011 E(
xF(
bx G(
xH(
0I(
bx J(
bx K(
xL(
xM(
0N(
bx O(
0S(
bx T(
bx U(
bx V(
b0 Z(
0[(
bx \(
1](
0^(
b0 _(
b0 `(
1a(
0b(
0c(
bx d(
0h(
b0 i(
b0 j(
bx k(
x!)
x")
0#)
bx $)
bx %)
x&)
x')
0()
bx ))
bx *)
bx +)
x,)
x-)
x.)
0/)
bx 0)
x1)
02)
x3)
bx 4)
05)
16)
b0 7)
x8)
09)
bx :)
0;)
1<)
0=)
b0 >)
b1010010110100101 ?)
b0 @)
bx A)
b1100001111000011 B)
bx C)
1D)
xK)
xL)
xM)
xN)
xO)
xP)
0Q)
1R)
0S)
1T)
b1010010110100101 X)
xY)
bx Z)
x[)
0\)
bx ])
bx ^)
x_)
x`)
0a)
bx b)
0f)
bx g)
bx h)
bx i)
b1000000000000000000000000000000000000000000000 m)
xn)
bx o)
xp)
0q)
bx r)
bx s)
xt)
xu)
0v)
bx w)
0{)
bx |)
bx })
bx ~)
0$*
bx %*
1&*
0'*
b0 (*
b0 )*
1**
0+*
0,*
bx -*
01*
b0 2*
b0 3*
bx 4*
b1100001111000011 8*
x9*
bx :*
x;*
0<*
bx =*
bx >*
x?*
x@*
0A*
bx B*
0F*
bx G*
bx H*
bx I*
b0 M*
0N*
bx O*
1P*
0Q*
b0 R*
b0 S*
1T*
0U*
0V*
bx W*
0[*
b0 \*
b0 ]*
bx ^*
x~*
x!+
x"+
x#+
b0 $+
bx %+
x&+
x'+
x(+
x)+
b0 *+
bx ++
bx ,+
b0 -+
1.+
1/+
10+
11+
b0 2+
x3+
x4+
x5+
x6+
b0 7+
bx 8+
b0 9+
1:+
1;+
1<+
1=+
b0 >+
b0 ?+
b0 @+
xA+
xB+
xC+
xD+
b0 E+
b0 F+
xG+
xH+
xI+
xJ+
b0 K+
b0 L+
xM+
xN+
xO+
xP+
b0 Q+
bx R+
b0 S+
xT+
xU+
xV+
xW+
b0 X+
xY+
xZ+
x[+
x\+
b0 ]+
bx ^+
bx _+
bx `+
b0 a+
bx b+
b0 c+
b0 d+
b0 e+
bx f+
bx g+
b0 h+
bx i+
b0 j+
bx k+
bx l+
b0 m+
bx n+
bx o+
b0 p+
b0 q+
b0 r+
b0 s+
bx t+
b0 u+
bx v+
bx w+
b0 x+
bx y+
b0 z+
bx {+
bx |+
x~+
0!,
bx ",
x#,
0$,
x%,
bx &,
0',
1(,
b0 ),
x*,
0+,
bx ,,
0-,
1.,
0/,
b0 0,
03,
bx 4,
x5,
06,
bx 7,
0:,
bx ;,
x<,
0=,
bx >,
0A,
1B,
b0 C,
0D,
b0 E,
0H,
bx I,
xJ,
0K,
bx L,
0O,
1P,
b0 Q,
0R,
b0 S,
xg,
0h,
bx i,
xj,
0k,
xl,
bx m,
0n,
1o,
b0 p,
xq,
0r,
bx s,
0t,
1u,
0v,
b0 w,
bx x,
b0 y,
bx z,
b0 {,
b0 |,
b0 },
bx ~,
bx !-
b0 "-
bx #-
bx $-
b0 %-
bx &-
bx '-
b0 (-
bx )-
bx *-
0+-
1,-
bx --
bx .-
bx /-
00-
bx 1-
b0 2-
03-
bx 4-
b0 5-
b0 6-
b111111111111 7-
b1000000000000 8-
b1111111111111 9-
b10000000000000 :-
b10111111111111 ;-
b11000000000000 <-
b11111111111111 =-
0>-
0?-
0@-
1A-
bx B-
0C-
1D-
b0xxxxxxxx E-
bx F-
bx G-
b0 H-
0I-
b1111 J-
bx N-
0O-
0P-
bx Q-
0R-
1S-
0T-
b0 U-
b0 V-
1W-
0X-
0Y-
bx Z-
0^-
b0 _-
b0 `-
bx a-
bx e-
0f-
0g-
bx h-
0i-
1j-
0k-
b0 l-
b0 m-
1n-
0o-
0p-
bx q-
0u-
b0 v-
b0 w-
bx x-
0~-
bx !.
b0 ".
x#.
0$.
0%.
0&.
bx '.
b0 (.
b0 ).
b0 *.
b0 +.
b0 ,.
b0 -.
b0 ..
0/.
00.
01.
02.
04.
bx 5.
b0 6.
b1111 7.
bx 8.
b0xxxxxxxx <.
0=.
0>.
bx ?.
0@.
1A.
0B.
b0 C.
b0 D.
1E.
0F.
0G.
bx H.
0L.
b0 M.
b0 N.
bx O.
0U.
bx V.
b0 W.
xX.
0Y.
0Z.
0[.
bx \.
b0 ].
b0 ^.
b0 _.
b0 `.
b0 a.
b0 b.
b0 c.
0d.
0e.
0f.
0g.
0i.
bx j.
b0 k.
b1111 l.
bx m.
xo.
0p.
bx q.
xr.
0s.
xt.
bx u.
0v.
1w.
b0 x.
xy.
0z.
bx {.
0|.
1}.
0~.
b0 !/
0$/
bx %/
x&/
0'/
bx (/
0+/
bx ,/
x-/
0./
bx //
02/
13/
b0 4/
05/
b0 6/
09/
bx :/
x;/
0</
bx =/
0@/
1A/
b0 B/
0C/
b0 D/
xX/
0Y/
bx Z/
x[/
0\/
x]/
bx ^/
0_/
1`/
b0 a/
xb/
0c/
bx d/
0e/
1f/
0g/
b0 h/
bx i/
b0 j/
bx k/
b0 l/
b0 m/
b0 n/
bx o/
bx p/
b0 q/
bx r/
bx s/
b0 t/
bx u/
bx v/
b0 w/
bx x/
bx y/
0z/
1{/
bx |/
bx }/
bx ~/
0!0
bx "0
b0 #0
0$0
bx %0
b0 &0
b0 '0
b111111111111 (0
b1000000000000 )0
b1111111111111 *0
b10000000000000 +0
b10111111111111 ,0
b11000000000000 -0
b11111111111111 .0
0/0
000
010
120
bx 30
040
150
b0xxxxxxxx 60
bx 70
bx 80
b0 90
0:0
b1111 ;0
bx ?0
0@0
0A0
bx B0
0C0
1D0
0E0
b0 F0
b0 G0
1H0
0I0
0J0
bx K0
0O0
b0 P0
b0 Q0
bx R0
bx V0
0W0
0X0
bx Y0
0Z0
1[0
0\0
b0 ]0
b0 ^0
1_0
0`0
0a0
bx b0
0f0
b0 g0
b0 h0
bx i0
0o0
bx p0
b0 q0
xr0
0s0
0t0
0u0
bx v0
b0 w0
b0 x0
b0 y0
b0 z0
b0 {0
b0 |0
b0 }0
0~0
0!1
0"1
0#1
0%1
bx &1
b0 '1
b1111 (1
bx )1
b0xxxxxxxx -1
0.1
0/1
bx 01
011
121
031
b0 41
b0 51
161
071
081
bx 91
0=1
b0 >1
b0 ?1
bx @1
0F1
bx G1
b0 H1
xI1
0J1
0K1
0L1
bx M1
b0 N1
b0 O1
b0 P1
b0 Q1
b0 R1
b0 S1
b0 T1
0U1
0V1
0W1
0X1
0Z1
bx [1
b0 \1
b1111 ]1
bx ^1
x`1
0a1
bx b1
xc1
0d1
xe1
bx f1
0g1
1h1
b0 i1
xj1
0k1
bx l1
0m1
1n1
0o1
b0 p1
0s1
bx t1
xu1
0v1
bx w1
0z1
bx {1
x|1
0}1
bx ~1
0#2
1$2
b0 %2
0&2
b0 '2
0*2
bx +2
x,2
0-2
bx .2
012
122
b0 32
042
b0 52
xI2
0J2
bx K2
xL2
0M2
xN2
bx O2
0P2
1Q2
b0 R2
xS2
0T2
bx U2
0V2
1W2
0X2
b0 Y2
bx Z2
b0 [2
bx \2
b0 ]2
b0 ^2
b0 _2
bx `2
bx a2
b0 b2
bx c2
bx d2
b0 e2
bx f2
bx g2
b0 h2
bx i2
bx j2
0k2
1l2
bx m2
bx n2
bx o2
0p2
bx q2
b0 r2
0s2
bx t2
b0 u2
b0 v2
b111111111111 w2
b1000000000000 x2
b1111111111111 y2
b10000000000000 z2
b10111111111111 {2
b11000000000000 |2
b11111111111111 }2
0~2
0!3
0"3
1#3
bx $3
0%3
1&3
b0xxxxxxxx '3
bx (3
bx )3
b0 *3
0+3
b1111 ,3
bx 03
013
023
bx 33
043
153
063
b0 73
b0 83
193
0:3
0;3
bx <3
0@3
b0 A3
b0 B3
bx C3
bx G3
0H3
0I3
bx J3
0K3
1L3
0M3
b0 N3
b0 O3
1P3
0Q3
0R3
bx S3
0W3
b0 X3
b0 Y3
bx Z3
0`3
bx a3
b0 b3
xc3
0d3
0e3
0f3
bx g3
b0 h3
b0 i3
b0 j3
b0 k3
b0 l3
b0 m3
b0 n3
0o3
0p3
0q3
0r3
0t3
bx u3
b0 v3
b1111 w3
bx x3
b0xxxxxxxx |3
0}3
0~3
bx !4
0"4
1#4
0$4
b0 %4
b0 &4
1'4
0(4
0)4
bx *4
0.4
b0 /4
b0 04
bx 14
074
bx 84
b0 94
x:4
0;4
0<4
0=4
bx >4
b0 ?4
b0 @4
b0 A4
b0 B4
b0 C4
b0 D4
b0 E4
0F4
0G4
0H4
0I4
0K4
bx L4
b0 M4
b1111 N4
bx O4
xQ4
0R4
bx S4
xT4
0U4
xV4
bx W4
0X4
1Y4
b0 Z4
x[4
0\4
bx ]4
0^4
1_4
0`4
b0 a4
0d4
bx e4
xf4
0g4
bx h4
0k4
bx l4
xm4
0n4
bx o4
0r4
1s4
b0 t4
0u4
b0 v4
0y4
bx z4
x{4
0|4
bx }4
0"5
1#5
b0 $5
0%5
b0 &5
x:5
0;5
bx <5
x=5
0>5
x?5
bx @5
0A5
1B5
b0 C5
xD5
0E5
bx F5
0G5
1H5
0I5
b0 J5
bx K5
b0 L5
bx M5
b0 N5
b0 O5
b0 P5
bx Q5
bx R5
b0 S5
bx T5
bx U5
b0 V5
bx W5
bx X5
b0 Y5
bx Z5
bx [5
0\5
1]5
bx ^5
bx _5
bx `5
0a5
bx b5
b0 c5
0d5
bx e5
b0 f5
b0 g5
b111111111111 h5
b1000000000000 i5
b1111111111111 j5
b10000000000000 k5
b10111111111111 l5
b11000000000000 m5
b11111111111111 n5
0o5
0p5
0q5
1r5
bx s5
0t5
1u5
b0xxxxxxxx v5
bx w5
bx x5
b0 y5
0z5
b1111 {5
bx !6
0"6
0#6
bx $6
0%6
1&6
0'6
b0 (6
b0 )6
1*6
0+6
0,6
bx -6
016
b0 26
b0 36
bx 46
bx 86
096
0:6
bx ;6
0<6
1=6
0>6
b0 ?6
b0 @6
1A6
0B6
0C6
bx D6
0H6
b0 I6
b0 J6
bx K6
0Q6
bx R6
b0 S6
xT6
0U6
0V6
0W6
bx X6
b0 Y6
b0 Z6
b0 [6
b0 \6
b0 ]6
b0 ^6
b0 _6
0`6
0a6
0b6
0c6
0e6
bx f6
b0 g6
b1111 h6
bx i6
b0xxxxxxxx m6
0n6
0o6
bx p6
0q6
1r6
0s6
b0 t6
b0 u6
1v6
0w6
0x6
bx y6
0}6
b0 ~6
b0 !7
bx "7
0(7
bx )7
b0 *7
x+7
0,7
0-7
0.7
bx /7
b0 07
b0 17
b0 27
b0 37
b0 47
b0 57
b0 67
077
087
097
0:7
0<7
bx =7
b0 >7
b1111 ?7
bx @7
0j7
xk7
b0 l7
0m7
xn7
0o7
b0 p7
xq7
0r7
bx s7
0t7
xu7
b0 v7
xw7
0x7
xy7
bx z7
bx .8
b0 /8
bx 08
b0 18
b0 28
b0 38
bx 48
bx 58
b0 68
bx 78
bx 88
b0 98
bx :8
bx ;8
b0 <8
bx =8
bx >8
0?8
x@8
b0 A8
0B8
xC8
0D8
b0 E8
xF8
0G8
bx H8
0I8
xJ8
b0 K8
xL8
0M8
xN8
bx O8
0P8
bx Q8
b0 R8
bx S8
0T8
bx U8
b0 V8
xW8
xX8
xY8
xZ8
x[8
x\8
x]8
x^8
0_8
1`8
0f8
bx g8
b0 h8
xi8
0j8
0k8
0l8
bx m8
b0 n8
b0 o8
b0 p8
b0 q8
b0 r8
b0 s8
b0 t8
0u8
0v8
0w8
0x8
0z8
bx {8
b0 |8
b1111 }8
bx ~8
b0 $9
0%9
0&9
bx '9
0(9
1)9
0*9
b0 +9
b0 ,9
1-9
0.9
0/9
bx 09
049
b0 59
b0 69
bx 79
0=9
bx >9
b0 ?9
x@9
0A9
0B9
0C9
bx D9
b0 E9
b0 F9
b0 G9
b0 H9
b0 I9
b0 J9
b0 K9
0L9
0M9
0N9
0O9
0Q9
bx R9
b0 S9
b1111 T9
bx U9
0X9
xY9
b0 Z9
0[9
b0 \9
0_9
x`9
b0 a9
0b9
b0 c9
0f9
bx g9
xh9
0i9
bx j9
0m9
xn9
b0 o9
0p9
b0 q9
0t9
bx u9
xv9
0w9
bx x9
0z9
x{9
b0 |9
0}9
x~9
0!:
b0 ":
x#:
0$:
bx %:
0&:
x':
b0 (:
x):
0*:
x+:
bx ,:
bx >:
b0 ?:
bx @:
b0 A:
b0 B:
b0 C:
bx D:
bx E:
b0 F:
bx G:
bx H:
b0 I:
bx J:
bx K:
b0 L:
bx M:
bx N:
0O:
xP:
b0 Q:
0R:
xS:
0T:
b0 U:
xV:
0W:
bx X:
0Y:
xZ:
b0 [:
x\:
0]:
x^:
bx _:
0`:
bx a:
b0 b:
bx c:
0d:
bx e:
b0 f:
xg:
xh:
xi:
xj:
xk:
xl:
xm:
xn:
0o:
1p:
0v:
bx w:
b0 x:
xy:
0z:
0{:
0|:
bx }:
b0 ~:
b0 !;
b0 ";
b0 #;
b0 $;
b0 %;
b0 &;
0';
0(;
0);
0*;
0,;
bx -;
b0 .;
b1111 /;
bx 0;
b0 4;
05;
06;
bx 7;
08;
19;
0:;
b0 ;;
b0 <;
1=;
0>;
0?;
bx @;
0D;
b0 E;
b0 F;
bx G;
0M;
bx N;
b0 O;
xP;
0Q;
0R;
0S;
bx T;
b0 U;
b0 V;
b0 W;
b0 X;
b0 Y;
b0 Z;
b0 [;
0\;
0];
0^;
0_;
0a;
bx b;
b0 c;
b1111 d;
bx e;
0h;
xi;
b0 j;
0k;
b0 l;
0o;
xp;
b0 q;
0r;
b0 s;
0v;
bx w;
xx;
0y;
bx z;
0};
x~;
b0 !<
0"<
b0 #<
0&<
bx '<
x(<
0)<
bx *<
0,<
x-<
b0 .<
0/<
x0<
01<
b0 2<
x3<
04<
bx 5<
06<
x7<
b0 8<
x9<
0:<
x;<
bx <<
bx N<
b0 O<
bx P<
b0 Q<
b0 R<
b0 S<
bx T<
bx U<
b0 V<
bx W<
bx X<
b0 Y<
bx Z<
bx [<
b0 \<
bx ]<
bx ^<
0_<
x`<
b0 a<
0b<
xc<
0d<
b0 e<
xf<
0g<
bx h<
0i<
xj<
b0 k<
xl<
0m<
xn<
bx o<
0p<
bx q<
b0 r<
bx s<
0t<
bx u<
b0 v<
xw<
xx<
xy<
xz<
x{<
x|<
x}<
x~<
0!=
1"=
0(=
bx )=
b0 *=
x+=
0,=
0-=
0.=
bx /=
b0 0=
b0 1=
b0 2=
b0 3=
b0 4=
b0 5=
b0 6=
07=
08=
09=
0:=
0<=
bx ==
b0 >=
b1111 ?=
bx @=
b0 D=
0E=
0F=
bx G=
0H=
1I=
0J=
b0 K=
b0 L=
1M=
0N=
0O=
bx P=
0T=
b0 U=
b0 V=
bx W=
0]=
bx ^=
b0 _=
x`=
0a=
0b=
0c=
bx d=
b0 e=
b0 f=
b0 g=
b0 h=
b0 i=
b0 j=
b0 k=
0l=
0m=
0n=
0o=
0q=
bx r=
b0 s=
b1111 t=
bx u=
0x=
xy=
b0 z=
0{=
b0 |=
0!>
x">
b0 #>
0$>
b0 %>
0(>
bx )>
x*>
0+>
bx ,>
0/>
x0>
b0 1>
02>
b0 3>
06>
bx 7>
x8>
09>
bx :>
0<>
x=>
b0 >>
0?>
x@>
0A>
b0 B>
xC>
0D>
bx E>
0F>
xG>
b0 H>
xI>
0J>
xK>
bx L>
bx ^>
b0 _>
bx `>
b0 a>
b0 b>
b0 c>
bx d>
bx e>
b0 f>
bx g>
bx h>
b0 i>
bx j>
bx k>
b0 l>
bx m>
bx n>
0o>
xp>
b0 q>
0r>
xs>
0t>
b0 u>
xv>
0w>
bx x>
0y>
xz>
b0 {>
x|>
0}>
x~>
bx !?
0"?
bx #?
b0 $?
bx %?
0&?
bx '?
b0 (?
x)?
x*?
x+?
x,?
x-?
x.?
x/?
x0?
01?
12?
08?
bx 9?
b0 :?
x;?
0<?
0=?
0>?
bx ??
b0 @?
b0 A?
b0 B?
b0 C?
b0 D?
b0 E?
b0 F?
0G?
0H?
0I?
0J?
0L?
bx M?
b0 N?
b1111 O?
bx P?
b0 T?
0U?
0V?
bx W?
0X?
1Y?
0Z?
b0 [?
b0 \?
1]?
0^?
0_?
bx `?
0d?
b0 e?
b0 f?
bx g?
0m?
bx n?
b0 o?
xp?
0q?
0r?
0s?
bx t?
b0 u?
b0 v?
b0 w?
b0 x?
b0 y?
b0 z?
b0 {?
0|?
0}?
0~?
0!@
0#@
bx $@
b0 %@
b1111 &@
bx '@
0*@
x+@
b0 ,@
0-@
b0 .@
01@
x2@
b0 3@
04@
b0 5@
08@
bx 9@
x:@
0;@
bx <@
0?@
x@@
b0 A@
0B@
b0 C@
0F@
bx G@
xH@
0I@
bx J@
0_@
x`@
b0 a@
0b@
xc@
0d@
b0 e@
xf@
0g@
bx h@
0i@
xj@
b0 k@
xl@
0m@
xn@
bx o@
xp@
bx q@
bx r@
bx s@
bx t@
bx u@
bx v@
bx w@
bx x@
bx y@
bx z@
x{@
x|@
x}@
bx ~@
bx !A
x"A
x#A
x$A
bx %A
bx &A
bx 'A
bx (A
bx )A
bx *A
bx +A
bx ,A
bx -A
bx .A
x/A
x0A
bx 1A
bx 2A
b0 3A
bx 4A
b0 5A
16A
bx 7A
bx 8A
x?A
x@A
xAA
xBA
xCA
xDA
xEA
xFA
xGA
xHA
xLA
bx MA
xNA
0OA
bx PA
bx QA
xRA
xSA
0TA
bx UA
0YA
bx ZA
bx [A
bx \A
b0 `A
xaA
bx bA
xcA
0dA
bx eA
bx fA
xgA
xhA
0iA
bx jA
0nA
bx oA
bx pA
bx qA
b0 uA
xvA
bx wA
xxA
0yA
bx zA
bx {A
x|A
x}A
0~A
bx !B
0%B
bx &B
bx 'B
bx (B
x,B
bx -B
x.B
0/B
bx 0B
bx 1B
x2B
x3B
04B
bx 5B
09B
bx :B
bx ;B
bx <B
b100000000000000000000000000000000000000000000000000 @B
xAB
bx BB
xCB
0DB
bx EB
bx FB
xGB
xHB
0IB
bx JB
0NB
bx OB
bx PB
bx QB
0fB
xgB
b0 hB
0iB
xjB
0kB
b0 lB
xmB
0nB
bx oB
0pB
xqB
b0 rB
xsB
0tB
xuB
bx vB
xwB
bx xB
bx yB
bx zB
bx {B
bx |B
bx }B
bx ~B
bx !C
bx "C
bx #C
x$C
x%C
x&C
bx 'C
bx (C
x)C
x*C
x+C
bx ,C
bx -C
bx .C
bx /C
bx 0C
bx 1C
bx 2C
bx 3C
bx 4C
bx 5C
x6C
x7C
bx 8C
bx 9C
b0 :C
bx ;C
b0 <C
1=C
bx >C
bx ?C
xFC
xGC
xHC
xIC
xJC
xKC
xLC
xMC
xNC
xOC
xSC
bx TC
xUC
0VC
bx WC
bx XC
xYC
xZC
0[C
bx \C
0`C
bx aC
bx bC
bx cC
b0 gC
xhC
bx iC
xjC
0kC
bx lC
bx mC
xnC
xoC
0pC
bx qC
0uC
bx vC
bx wC
bx xC
b0 |C
x}C
bx ~C
x!D
0"D
bx #D
bx $D
x%D
x&D
0'D
bx (D
0,D
bx -D
bx .D
bx /D
x3D
bx 4D
x5D
06D
bx 7D
bx 8D
x9D
x:D
0;D
bx <D
0@D
bx AD
bx BD
bx CD
b100000000000000000000000000000000000000000000000000 GD
xHD
bx ID
xJD
0KD
bx LD
bx MD
xND
xOD
0PD
bx QD
0UD
bx VD
bx WD
bx XD
0mD
xnD
b0 oD
0pD
xqD
0rD
b0 sD
xtD
0uD
bx vD
0wD
xxD
b0 yD
xzD
0{D
x|D
bx }D
x~D
bx !E
bx "E
bx #E
bx $E
bx %E
bx &E
bx 'E
bx (E
bx )E
bx *E
x+E
x,E
x-E
bx .E
bx /E
x0E
x1E
x2E
bx 3E
bx 4E
bx 5E
bx 6E
bx 7E
bx 8E
bx 9E
bx :E
bx ;E
bx <E
x=E
x>E
bx ?E
bx @E
b0 AE
bx BE
b0 CE
1DE
bx EE
bx FE
xME
xNE
xOE
xPE
xQE
xRE
xSE
xTE
xUE
xVE
xZE
bx [E
x\E
0]E
bx ^E
bx _E
x`E
xaE
0bE
bx cE
0gE
bx hE
bx iE
bx jE
b0 nE
xoE
bx pE
xqE
0rE
bx sE
bx tE
xuE
xvE
0wE
bx xE
0|E
bx }E
bx ~E
bx !F
b0 %F
x&F
bx 'F
x(F
0)F
bx *F
bx +F
x,F
x-F
0.F
bx /F
03F
bx 4F
bx 5F
bx 6F
x:F
bx ;F
x<F
0=F
bx >F
bx ?F
x@F
xAF
0BF
bx CF
0GF
bx HF
bx IF
bx JF
b100000000000000000000000000000000000000000000000000 NF
xOF
bx PF
xQF
0RF
bx SF
bx TF
xUF
xVF
0WF
bx XF
0\F
bx ]F
bx ^F
bx _F
0tF
xuF
b0 vF
0wF
xxF
0yF
b0 zF
x{F
0|F
bx }F
0~F
x!G
b0 "G
x#G
0$G
x%G
bx &G
x'G
bx (G
bx )G
bx *G
bx +G
bx ,G
bx -G
bx .G
bx /G
bx 0G
bx 1G
x2G
x3G
x4G
bx 5G
bx 6G
x7G
x8G
x9G
bx :G
bx ;G
bx <G
bx =G
bx >G
bx ?G
bx @G
bx AG
bx BG
bx CG
xDG
xEG
bx FG
bx GG
b0 HG
bx IG
b0 JG
1KG
bx LG
bx MG
xTG
xUG
xVG
xWG
xXG
xYG
xZG
x[G
x\G
x]G
xaG
bx bG
xcG
0dG
bx eG
bx fG
xgG
xhG
0iG
bx jG
0nG
bx oG
bx pG
bx qG
b0 uG
xvG
bx wG
xxG
0yG
bx zG
bx {G
x|G
x}G
0~G
bx !H
0%H
bx &H
bx 'H
bx (H
b0 ,H
x-H
bx .H
x/H
00H
bx 1H
bx 2H
x3H
x4H
05H
bx 6H
0:H
bx ;H
bx <H
bx =H
xAH
bx BH
xCH
0DH
bx EH
bx FH
xGH
xHH
0IH
bx JH
0NH
bx OH
bx PH
bx QH
b100000000000000000000000000000000000000000000000000 UH
xVH
bx WH
xXH
0YH
bx ZH
bx [H
x\H
x]H
0^H
bx _H
0cH
bx dH
bx eH
bx fH
$end
#1000

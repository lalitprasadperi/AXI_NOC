$date
    Apr 21, 2024  15:14:15
$end
$version
    TOOL:	ncsim(64)	15.20-s073
$end
$timescale
    1 ns
$end

$scope module testbench $end
$var reg       1 !    clk  $end
$var reg       1 "    clk_div2  $end
$var reg       1 #    clk_div4  $end
$var reg       1 $    clk_div8  $end

$scope module axicb_crossbar_top $end
$var parameter 32 %    AXI_ADDR_W  $end
$var parameter 32 &    AXI_ID_W  $end
$var parameter 32 '    AXI_DATA_W  $end
$var parameter 32 (    MST_NB  $end
$var parameter 32 )    SLV_NB  $end
$var parameter 32 *    MST_PIPELINE  $end
$var parameter 32 +    SLV_PIPELINE  $end
$var parameter 32 ,    STRB_MODE  $end
$var parameter 32 -    USER_SUPPORT  $end
$var parameter 32 .    AXI_AUSER_W  $end
$var parameter 32 /    AXI_WUSER_W  $end
$var parameter 32 0    AXI_BUSER_W  $end
$var parameter 32 1    AXI_RUSER_W  $end
$var parameter 32 2    TIMEOUT_VALUE  $end
$var parameter 32 3    TIMEOUT_ENABLE  $end
$var parameter 32 4    MST0_CDC  $end
$var parameter 32 5    MST0_OSTDREQ_NUM  $end
$var parameter 32 6    MST0_PRIORITY  $end
$var parameter  4 7    MST0_ROUTES [3:0] $end
$var parameter  8 8    MST0_ID_MASK [7:0] $end
$var parameter 32 9    MST0_RW  $end
$var parameter 32 :    MST1_CDC  $end
$var parameter 32 ;    MST1_OSTDREQ_NUM  $end
$var parameter 32 <    MST1_PRIORITY  $end
$var parameter  4 =    MST1_ROUTES [3:0] $end
$var parameter  8 >    MST1_ID_MASK [7:0] $end
$var parameter 32 ?    MST1_RW  $end
$var parameter 32 @    MST2_CDC  $end
$var parameter 32 A    MST2_OSTDREQ_NUM  $end
$var parameter 32 B    MST2_PRIORITY  $end
$var parameter  4 C    MST2_ROUTES [3:0] $end
$var parameter  8 D    MST2_ID_MASK [7:0] $end
$var parameter 32 E    MST2_RW  $end
$var parameter 32 F    MST3_CDC  $end
$var parameter 32 G    MST3_OSTDREQ_NUM  $end
$var parameter 32 H    MST3_PRIORITY  $end
$var parameter  4 I    MST3_ROUTES [3:0] $end
$var parameter  8 J    MST3_ID_MASK [7:0] $end
$var parameter 32 K    MST3_RW  $end
$var parameter 32 L    SLV0_CDC  $end
$var parameter 32 M    SLV0_START_ADDR  $end
$var parameter 32 N    SLV0_END_ADDR  $end
$var parameter 32 O    SLV0_OSTDREQ_NUM  $end
$var parameter 32 P    SLV0_KEEP_BASE_ADDR  $end
$var parameter 32 Q    SLV1_CDC  $end
$var parameter 32 R    SLV1_START_ADDR  $end
$var parameter 32 S    SLV1_END_ADDR  $end
$var parameter 32 T    SLV1_OSTDREQ_NUM  $end
$var parameter 32 U    SLV1_KEEP_BASE_ADDR  $end
$var parameter 32 V    SLV2_CDC  $end
$var parameter 32 W    SLV2_START_ADDR  $end
$var parameter 32 X    SLV2_END_ADDR  $end
$var parameter 32 Y    SLV2_OSTDREQ_NUM  $end
$var parameter 32 Z    SLV2_KEEP_BASE_ADDR  $end
$var parameter 32 [    SLV3_CDC  $end
$var parameter 32 \    SLV3_START_ADDR  $end
$var parameter 32 ]    SLV3_END_ADDR  $end
$var parameter 32 ^    SLV3_OSTDREQ_NUM  $end
$var parameter 32 _    SLV3_KEEP_BASE_ADDR  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c    slv0_aclk  $end
$var wire      1 d    slv0_aresetn  $end
$var wire      1 e    slv0_srst  $end
$var wire      1 e    slv0_awvalid  $end
$var reg       1 f    slv0_awready  $end
$var wire     16 g    slv0_awaddr [15:0] $end
$var wire      3 h    slv0_awprot [2:0] $end
$var wire      8 i    slv0_awid [7:0] $end
$var wire      1 e    slv0_awuser [0] $end
$var wire      1 e    slv0_wvalid  $end
$var reg       1 j    slv0_wready  $end
$var wire     32 k    slv0_wdata [31:0] $end
$var wire      4 l    slv0_wstrb [3:0] $end
$var wire      1 e    slv0_wuser [0] $end
$var reg       1 m    slv0_bvalid  $end
$var wire      1 e    slv0_bready  $end
$var reg       8 n    slv0_bid [7:0] $end
$var reg       2 o    slv0_bresp [1:0] $end
$var reg       1 p    slv0_buser [0:0] $end
$var wire      1 e    slv0_arvalid  $end
$var reg       1 q    slv0_arready  $end
$var wire     16 g    slv0_araddr [15:0] $end
$var wire      3 h    slv0_arprot [2:0] $end
$var wire      8 i    slv0_arid [7:0] $end
$var wire      1 e    slv0_aruser [0] $end
$var reg       1 r    slv0_rvalid  $end
$var wire      1 e    slv0_rready  $end
$var reg       8 s    slv0_rid [7:0] $end
$var reg       2 t    slv0_rresp [1:0] $end
$var reg      32 u    slv0_rdata [31:0] $end
$var reg       1 v    slv0_ruser [0:0] $end
$var wire      1 c    slv1_aclk  $end
$var wire      1 d    slv1_aresetn  $end
$var wire      1 e    slv1_srst  $end
$var wire      1 e    slv1_awvalid  $end
$var reg       1 w    slv1_awready  $end
$var wire     16 g    slv1_awaddr [15:0] $end
$var wire      3 h    slv1_awprot [2:0] $end
$var wire      8 i    slv1_awid [7:0] $end
$var wire      1 e    slv1_awuser [0] $end
$var wire      1 e    slv1_wvalid  $end
$var reg       1 x    slv1_wready  $end
$var wire     32 k    slv1_wdata [31:0] $end
$var wire      4 l    slv1_wstrb [3:0] $end
$var wire      1 e    slv1_wuser [0] $end
$var reg       1 y    slv1_bvalid  $end
$var wire      1 e    slv1_bready  $end
$var reg       8 z    slv1_bid [7:0] $end
$var reg       2 {    slv1_bresp [1:0] $end
$var reg       1 |    slv1_buser [0:0] $end
$var wire      1 e    slv1_arvalid  $end
$var reg       1 }    slv1_arready  $end
$var wire     16 g    slv1_araddr [15:0] $end
$var wire      3 h    slv1_arprot [2:0] $end
$var wire      8 i    slv1_arid [7:0] $end
$var wire      1 e    slv1_aruser [0] $end
$var reg       1 ~    slv1_rvalid  $end
$var wire      1 e    slv1_rready  $end
$var reg       8 !!   slv1_rid [7:0] $end
$var reg       2 "!   slv1_rresp [1:0] $end
$var reg      32 #!   slv1_rdata [31:0] $end
$var reg       1 $!   slv1_ruser [0:0] $end
$var wire      1 c    slv2_aclk  $end
$var wire      1 d    slv2_aresetn  $end
$var wire      1 e    slv2_srst  $end
$var wire      1 e    slv2_awvalid  $end
$var reg       1 %!   slv2_awready  $end
$var wire     16 g    slv2_awaddr [15:0] $end
$var wire      3 h    slv2_awprot [2:0] $end
$var wire      8 i    slv2_awid [7:0] $end
$var wire      1 e    slv2_awuser [0] $end
$var wire      1 e    slv2_wvalid  $end
$var reg       1 &!   slv2_wready  $end
$var wire     32 k    slv2_wdata [31:0] $end
$var wire      4 l    slv2_wstrb [3:0] $end
$var wire      1 e    slv2_wuser [0] $end
$var reg       1 '!   slv2_bvalid  $end
$var wire      1 e    slv2_bready  $end
$var reg       8 (!   slv2_bid [7:0] $end
$var reg       2 )!   slv2_bresp [1:0] $end
$var reg       1 *!   slv2_buser [0:0] $end
$var wire      1 e    slv2_arvalid  $end
$var reg       1 +!   slv2_arready  $end
$var wire     16 g    slv2_araddr [15:0] $end
$var wire      3 h    slv2_arprot [2:0] $end
$var wire      8 i    slv2_arid [7:0] $end
$var wire      1 e    slv2_aruser [0] $end
$var reg       1 ,!   slv2_rvalid  $end
$var wire      1 e    slv2_rready  $end
$var reg       8 -!   slv2_rid [7:0] $end
$var reg       2 .!   slv2_rresp [1:0] $end
$var reg      32 /!   slv2_rdata [31:0] $end
$var reg       1 0!   slv2_ruser [0:0] $end
$var wire      1 c    slv3_aclk  $end
$var wire      1 d    slv3_aresetn  $end
$var wire      1 e    slv3_srst  $end
$var wire      1 e    slv3_awvalid  $end
$var reg       1 1!   slv3_awready  $end
$var wire     16 g    slv3_awaddr [15:0] $end
$var wire      3 h    slv3_awprot [2:0] $end
$var wire      8 i    slv3_awid [7:0] $end
$var wire      1 e    slv3_awuser [0] $end
$var wire      1 e    slv3_wvalid  $end
$var reg       1 2!   slv3_wready  $end
$var wire     32 k    slv3_wdata [31:0] $end
$var wire      4 l    slv3_wstrb [3:0] $end
$var wire      1 e    slv3_wuser [0] $end
$var reg       1 3!   slv3_bvalid  $end
$var wire      1 e    slv3_bready  $end
$var reg       8 4!   slv3_bid [7:0] $end
$var reg       2 5!   slv3_bresp [1:0] $end
$var reg       1 6!   slv3_buser [0:0] $end
$var wire      1 e    slv3_arvalid  $end
$var reg       1 7!   slv3_arready  $end
$var wire     16 g    slv3_araddr [15:0] $end
$var wire      3 h    slv3_arprot [2:0] $end
$var wire      8 i    slv3_arid [7:0] $end
$var wire      1 e    slv3_aruser [0] $end
$var reg       1 8!   slv3_rvalid  $end
$var wire      1 e    slv3_rready  $end
$var reg       8 9!   slv3_rid [7:0] $end
$var reg       2 :!   slv3_rresp [1:0] $end
$var reg      32 ;!   slv3_rdata [31:0] $end
$var reg       1 <!   slv3_ruser [0:0] $end
$var wire      1 =!   mst0_aclk  $end
$var wire      1 d    mst0_aresetn  $end
$var wire      1 e    mst0_srst  $end
$var reg       1 >!   mst0_awvalid  $end
$var wire      1 e    mst0_awready  $end
$var reg      16 ?!   mst0_awaddr [15:0] $end
$var reg       3 @!   mst0_awprot [2:0] $end
$var reg       8 A!   mst0_awid [7:0] $end
$var reg       1 B!   mst0_awuser [0:0] $end
$var reg       1 C!   mst0_wvalid  $end
$var wire      1 e    mst0_wready  $end
$var reg      32 D!   mst0_wdata [31:0] $end
$var reg       4 E!   mst0_wstrb [3:0] $end
$var reg       1 F!   mst0_wuser [0:0] $end
$var wire      1 e    mst0_bvalid  $end
$var reg       1 G!   mst0_bready  $end
$var wire      8 i    mst0_bid [7:0] $end
$var wire      2 H!   mst0_bresp [1:0] $end
$var wire      1 e    mst0_buser [0] $end
$var reg       1 I!   mst0_arvalid  $end
$var wire      1 e    mst0_arready  $end
$var reg      16 J!   mst0_araddr [15:0] $end
$var reg       3 K!   mst0_arprot [2:0] $end
$var reg       8 L!   mst0_arid [7:0] $end
$var reg       1 M!   mst0_aruser [0:0] $end
$var wire      1 e    mst0_rvalid  $end
$var reg       1 N!   mst0_rready  $end
$var wire      8 i    mst0_rid [7:0] $end
$var wire      2 H!   mst0_rresp [1:0] $end
$var wire     32 k    mst0_rdata [31:0] $end
$var wire      1 e    mst0_ruser [0] $end
$var wire      1 =!   mst1_aclk  $end
$var wire      1 d    mst1_aresetn  $end
$var wire      1 e    mst1_srst  $end
$var reg       1 O!   mst1_awvalid  $end
$var wire      1 e    mst1_awready  $end
$var reg      16 P!   mst1_awaddr [15:0] $end
$var reg       3 Q!   mst1_awprot [2:0] $end
$var reg       8 R!   mst1_awid [7:0] $end
$var reg       1 S!   mst1_awuser [0:0] $end
$var reg       1 T!   mst1_wvalid  $end
$var wire      1 e    mst1_wready  $end
$var reg      32 U!   mst1_wdata [31:0] $end
$var reg       4 V!   mst1_wstrb [3:0] $end
$var reg       1 W!   mst1_wuser [0:0] $end
$var wire      1 e    mst1_bvalid  $end
$var reg       1 X!   mst1_bready  $end
$var wire      8 i    mst1_bid [7:0] $end
$var wire      2 H!   mst1_bresp [1:0] $end
$var wire      1 e    mst1_buser [0] $end
$var reg       1 Y!   mst1_arvalid  $end
$var wire      1 e    mst1_arready  $end
$var reg      16 Z!   mst1_araddr [15:0] $end
$var reg       3 [!   mst1_arprot [2:0] $end
$var reg       8 \!   mst1_arid [7:0] $end
$var reg       1 ]!   mst1_aruser [0:0] $end
$var wire      1 e    mst1_rvalid  $end
$var reg       1 ^!   mst1_rready  $end
$var wire      8 i    mst1_rid [7:0] $end
$var wire      2 H!   mst1_rresp [1:0] $end
$var wire     32 k    mst1_rdata [31:0] $end
$var wire      1 e    mst1_ruser [0] $end
$var wire      1 =!   mst2_aclk  $end
$var wire      1 d    mst2_aresetn  $end
$var wire      1 e    mst2_srst  $end
$var reg       1 _!   mst2_awvalid  $end
$var wire      1 e    mst2_awready  $end
$var reg      16 `!   mst2_awaddr [15:0] $end
$var reg       3 a!   mst2_awprot [2:0] $end
$var reg       8 b!   mst2_awid [7:0] $end
$var reg       1 c!   mst2_awuser [0:0] $end
$var reg       1 d!   mst2_wvalid  $end
$var wire      1 e    mst2_wready  $end
$var reg      32 e!   mst2_wdata [31:0] $end
$var reg       4 f!   mst2_wstrb [3:0] $end
$var reg       1 g!   mst2_wuser [0:0] $end
$var wire      1 e    mst2_bvalid  $end
$var reg       1 h!   mst2_bready  $end
$var wire      8 i    mst2_bid [7:0] $end
$var wire      2 H!   mst2_bresp [1:0] $end
$var wire      1 e    mst2_buser [0] $end
$var reg       1 i!   mst2_arvalid  $end
$var wire      1 e    mst2_arready  $end
$var reg      16 j!   mst2_araddr [15:0] $end
$var reg       3 k!   mst2_arprot [2:0] $end
$var reg       8 l!   mst2_arid [7:0] $end
$var reg       1 m!   mst2_aruser [0:0] $end
$var wire      1 e    mst2_rvalid  $end
$var reg       1 n!   mst2_rready  $end
$var wire      8 i    mst2_rid [7:0] $end
$var wire      2 H!   mst2_rresp [1:0] $end
$var wire     32 k    mst2_rdata [31:0] $end
$var wire      1 e    mst2_ruser [0] $end
$var wire      1 =!   mst3_aclk  $end
$var wire      1 d    mst3_aresetn  $end
$var wire      1 e    mst3_srst  $end
$var reg       1 o!   mst3_awvalid  $end
$var wire      1 e    mst3_awready  $end
$var reg      16 p!   mst3_awaddr [15:0] $end
$var reg       3 q!   mst3_awprot [2:0] $end
$var reg       8 r!   mst3_awid [7:0] $end
$var reg       1 s!   mst3_awuser [0:0] $end
$var reg       1 t!   mst3_wvalid  $end
$var wire      1 e    mst3_wready  $end
$var reg      32 u!   mst3_wdata [31:0] $end
$var reg       4 v!   mst3_wstrb [3:0] $end
$var reg       1 w!   mst3_wuser [0:0] $end
$var wire      1 e    mst3_bvalid  $end
$var reg       1 x!   mst3_bready  $end
$var wire      8 i    mst3_bid [7:0] $end
$var wire      2 H!   mst3_bresp [1:0] $end
$var wire      1 e    mst3_buser [0] $end
$var reg       1 y!   mst3_arvalid  $end
$var wire      1 e    mst3_arready  $end
$var reg      16 z!   mst3_araddr [15:0] $end
$var reg       3 {!   mst3_arprot [2:0] $end
$var reg       8 |!   mst3_arid [7:0] $end
$var reg       1 }!   mst3_aruser [0:0] $end
$var wire      1 e    mst3_rvalid  $end
$var reg       1 ~!   mst3_rready  $end
$var wire      8 i    mst3_rid [7:0] $end
$var wire      2 H!   mst3_rresp [1:0] $end
$var wire     32 k    mst3_rdata [31:0] $end
$var wire      1 e    mst3_ruser [0] $end

$scope module axi4lite_crossbar_inst $end
$var parameter 32 !"   AXI_ADDR_W  $end
$var parameter 32 ""   AXI_ID_W  $end
$var parameter 32 #"   AXI_DATA_W  $end
$var parameter 32 $"   MST_NB  $end
$var parameter 32 %"   SLV_NB  $end
$var parameter 32 &"   MST_PIPELINE  $end
$var parameter 32 '"   SLV_PIPELINE  $end
$var parameter 32 ("   STRB_MODE  $end
$var parameter 32 )"   AXI_SIGNALING  $end
$var parameter 32 *"   USER_SUPPORT  $end
$var parameter 32 +"   AXI_AUSER_W  $end
$var parameter 32 ,"   AXI_WUSER_W  $end
$var parameter 32 -"   AXI_BUSER_W  $end
$var parameter 32 ."   AXI_RUSER_W  $end
$var parameter 32 /"   TIMEOUT_VALUE  $end
$var parameter 32 0"   TIMEOUT_ENABLE  $end
$var parameter 32 1"   MST0_CDC  $end
$var parameter 32 2"   MST0_OSTDREQ_NUM  $end
$var parameter 32 3"   MST0_OSTDREQ_SIZE  $end
$var parameter 32 4"   MST0_PRIORITY  $end
$var parameter  4 5"   MST0_ROUTES [3:0] $end
$var parameter  8 6"   MST0_ID_MASK [7:0] $end
$var parameter 32 7"   MST0_RW  $end
$var parameter 32 8"   MST1_CDC  $end
$var parameter 32 9"   MST1_OSTDREQ_NUM  $end
$var parameter 32 :"   MST1_OSTDREQ_SIZE  $end
$var parameter 32 ;"   MST1_PRIORITY  $end
$var parameter  4 <"   MST1_ROUTES [3:0] $end
$var parameter  8 ="   MST1_ID_MASK [7:0] $end
$var parameter 32 >"   MST1_RW  $end
$var parameter 32 ?"   MST2_CDC  $end
$var parameter 32 @"   MST2_OSTDREQ_NUM  $end
$var parameter 32 A"   MST2_OSTDREQ_SIZE  $end
$var parameter 32 B"   MST2_PRIORITY  $end
$var parameter  4 C"   MST2_ROUTES [3:0] $end
$var parameter  8 D"   MST2_ID_MASK [7:0] $end
$var parameter 32 E"   MST2_RW  $end
$var parameter 32 F"   MST3_CDC  $end
$var parameter 32 G"   MST3_OSTDREQ_NUM  $end
$var parameter 32 H"   MST3_OSTDREQ_SIZE  $end
$var parameter 32 I"   MST3_PRIORITY  $end
$var parameter  4 J"   MST3_ROUTES [3:0] $end
$var parameter  8 K"   MST3_ID_MASK [7:0] $end
$var parameter 32 L"   MST3_RW  $end
$var parameter 32 M"   SLV0_CDC  $end
$var parameter 32 N"   SLV0_START_ADDR  $end
$var parameter 32 O"   SLV0_END_ADDR  $end
$var parameter 32 P"   SLV0_OSTDREQ_NUM  $end
$var parameter 32 Q"   SLV0_OSTDREQ_SIZE  $end
$var parameter 32 R"   SLV0_KEEP_BASE_ADDR  $end
$var parameter 32 S"   SLV1_CDC  $end
$var parameter 32 T"   SLV1_START_ADDR  $end
$var parameter 32 U"   SLV1_END_ADDR  $end
$var parameter 32 V"   SLV1_OSTDREQ_NUM  $end
$var parameter 32 W"   SLV1_OSTDREQ_SIZE  $end
$var parameter 32 X"   SLV1_KEEP_BASE_ADDR  $end
$var parameter 32 Y"   SLV2_CDC  $end
$var parameter 32 Z"   SLV2_START_ADDR  $end
$var parameter 32 ["   SLV2_END_ADDR  $end
$var parameter 32 \"   SLV2_OSTDREQ_NUM  $end
$var parameter 32 ]"   SLV2_OSTDREQ_SIZE  $end
$var parameter 32 ^"   SLV2_KEEP_BASE_ADDR  $end
$var parameter 32 _"   SLV3_CDC  $end
$var parameter 32 `"   SLV3_START_ADDR  $end
$var parameter 32 a"   SLV3_END_ADDR  $end
$var parameter 32 b"   SLV3_OSTDREQ_NUM  $end
$var parameter 32 c"   SLV3_OSTDREQ_SIZE  $end
$var parameter 32 d"   SLV3_KEEP_BASE_ADDR  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c    slv0_aclk  $end
$var wire      1 d    slv0_aresetn  $end
$var wire      1 e    slv0_srst  $end
$var wire      1 e    slv0_awvalid  $end
$var reg       1 e"   slv0_awready  $end
$var wire     16 g    slv0_awaddr [15:0] $end
$var wire      8 f"   slv0_awlen [7:0] $end
$var wire      3 g"   slv0_awsize [2:0] $end
$var wire      2 h"   slv0_awburst [1:0] $end
$var wire      2 h"   slv0_awlock [1:0] $end
$var wire      4 i"   slv0_awcache [3:0] $end
$var wire      3 h    slv0_awprot [2:0] $end
$var wire      4 i"   slv0_awqos [3:0] $end
$var wire      4 i"   slv0_awregion [3:0] $end
$var wire      8 i    slv0_awid [7:0] $end
$var wire      1 e    slv0_awuser [0] $end
$var wire      1 e    slv0_wvalid  $end
$var reg       1 j"   slv0_wready  $end
$var wire      1 d    slv0_wlast  $end
$var wire     32 k    slv0_wdata [31:0] $end
$var wire      4 l    slv0_wstrb [3:0] $end
$var wire      1 e    slv0_wuser [0] $end
$var reg       1 k"   slv0_bvalid  $end
$var wire      1 e    slv0_bready  $end
$var reg       8 l"   slv0_bid [7:0] $end
$var reg       2 m"   slv0_bresp [1:0] $end
$var reg       1 n"   slv0_buser [0:0] $end
$var wire      1 e    slv0_arvalid  $end
$var reg       1 o"   slv0_arready  $end
$var wire     16 g    slv0_araddr [15:0] $end
$var wire      8 f"   slv0_arlen [7:0] $end
$var wire      3 g"   slv0_arsize [2:0] $end
$var wire      2 h"   slv0_arburst [1:0] $end
$var wire      2 h"   slv0_arlock [1:0] $end
$var wire      4 i"   slv0_arcache [3:0] $end
$var wire      3 h    slv0_arprot [2:0] $end
$var wire      4 i"   slv0_arqos [3:0] $end
$var wire      4 i"   slv0_arregion [3:0] $end
$var wire      8 i    slv0_arid [7:0] $end
$var wire      1 e    slv0_aruser [0] $end
$var reg       1 p"   slv0_rvalid  $end
$var wire      1 e    slv0_rready  $end
$var reg       8 q"   slv0_rid [7:0] $end
$var reg       2 r"   slv0_rresp [1:0] $end
$var reg      32 s"   slv0_rdata [31:0] $end
$var reg       1 t"   slv0_rlast  $end
$var reg       1 u"   slv0_ruser [0:0] $end
$var wire      1 c    slv1_aclk  $end
$var wire      1 d    slv1_aresetn  $end
$var wire      1 e    slv1_srst  $end
$var wire      1 e    slv1_awvalid  $end
$var reg       1 v"   slv1_awready  $end
$var wire     16 g    slv1_awaddr [15:0] $end
$var wire      8 f"   slv1_awlen [7:0] $end
$var wire      3 g"   slv1_awsize [2:0] $end
$var wire      2 h"   slv1_awburst [1:0] $end
$var wire      2 h"   slv1_awlock [1:0] $end
$var wire      4 i"   slv1_awcache [3:0] $end
$var wire      3 h    slv1_awprot [2:0] $end
$var wire      4 i"   slv1_awqos [3:0] $end
$var wire      4 i"   slv1_awregion [3:0] $end
$var wire      8 i    slv1_awid [7:0] $end
$var wire      1 e    slv1_awuser [0] $end
$var wire      1 e    slv1_wvalid  $end
$var reg       1 w"   slv1_wready  $end
$var wire      1 d    slv1_wlast  $end
$var wire     32 k    slv1_wdata [31:0] $end
$var wire      4 l    slv1_wstrb [3:0] $end
$var wire      1 e    slv1_wuser [0] $end
$var reg       1 x"   slv1_bvalid  $end
$var wire      1 e    slv1_bready  $end
$var reg       8 y"   slv1_bid [7:0] $end
$var reg       2 z"   slv1_bresp [1:0] $end
$var reg       1 {"   slv1_buser [0:0] $end
$var wire      1 e    slv1_arvalid  $end
$var reg       1 |"   slv1_arready  $end
$var wire     16 g    slv1_araddr [15:0] $end
$var wire      8 f"   slv1_arlen [7:0] $end
$var wire      3 g"   slv1_arsize [2:0] $end
$var wire      2 h"   slv1_arburst [1:0] $end
$var wire      2 h"   slv1_arlock [1:0] $end
$var wire      4 i"   slv1_arcache [3:0] $end
$var wire      3 h    slv1_arprot [2:0] $end
$var wire      4 i"   slv1_arqos [3:0] $end
$var wire      4 i"   slv1_arregion [3:0] $end
$var wire      8 i    slv1_arid [7:0] $end
$var wire      1 e    slv1_aruser [0] $end
$var reg       1 }"   slv1_rvalid  $end
$var wire      1 e    slv1_rready  $end
$var reg       8 ~"   slv1_rid [7:0] $end
$var reg       2 !#   slv1_rresp [1:0] $end
$var reg      32 "#   slv1_rdata [31:0] $end
$var reg       1 ##   slv1_rlast  $end
$var reg       1 $#   slv1_ruser [0:0] $end
$var wire      1 c    slv2_aclk  $end
$var wire      1 d    slv2_aresetn  $end
$var wire      1 e    slv2_srst  $end
$var wire      1 e    slv2_awvalid  $end
$var reg       1 %#   slv2_awready  $end
$var wire     16 g    slv2_awaddr [15:0] $end
$var wire      8 f"   slv2_awlen [7:0] $end
$var wire      3 g"   slv2_awsize [2:0] $end
$var wire      2 h"   slv2_awburst [1:0] $end
$var wire      2 h"   slv2_awlock [1:0] $end
$var wire      4 i"   slv2_awcache [3:0] $end
$var wire      3 h    slv2_awprot [2:0] $end
$var wire      4 i"   slv2_awqos [3:0] $end
$var wire      4 i"   slv2_awregion [3:0] $end
$var wire      8 i    slv2_awid [7:0] $end
$var wire      1 e    slv2_awuser [0] $end
$var wire      1 e    slv2_wvalid  $end
$var reg       1 &#   slv2_wready  $end
$var wire      1 d    slv2_wlast  $end
$var wire     32 k    slv2_wdata [31:0] $end
$var wire      4 l    slv2_wstrb [3:0] $end
$var wire      1 e    slv2_wuser [0] $end
$var reg       1 '#   slv2_bvalid  $end
$var wire      1 e    slv2_bready  $end
$var reg       8 (#   slv2_bid [7:0] $end
$var reg       2 )#   slv2_bresp [1:0] $end
$var reg       1 *#   slv2_buser [0:0] $end
$var wire      1 e    slv2_arvalid  $end
$var reg       1 +#   slv2_arready  $end
$var wire     16 g    slv2_araddr [15:0] $end
$var wire      8 f"   slv2_arlen [7:0] $end
$var wire      3 g"   slv2_arsize [2:0] $end
$var wire      2 h"   slv2_arburst [1:0] $end
$var wire      2 h"   slv2_arlock [1:0] $end
$var wire      4 i"   slv2_arcache [3:0] $end
$var wire      3 h    slv2_arprot [2:0] $end
$var wire      4 i"   slv2_arqos [3:0] $end
$var wire      4 i"   slv2_arregion [3:0] $end
$var wire      8 i    slv2_arid [7:0] $end
$var wire      1 e    slv2_aruser [0] $end
$var reg       1 ,#   slv2_rvalid  $end
$var wire      1 e    slv2_rready  $end
$var reg       8 -#   slv2_rid [7:0] $end
$var reg       2 .#   slv2_rresp [1:0] $end
$var reg      32 /#   slv2_rdata [31:0] $end
$var reg       1 0#   slv2_rlast  $end
$var reg       1 1#   slv2_ruser [0:0] $end
$var wire      1 c    slv3_aclk  $end
$var wire      1 d    slv3_aresetn  $end
$var wire      1 e    slv3_srst  $end
$var wire      1 e    slv3_awvalid  $end
$var reg       1 2#   slv3_awready  $end
$var wire     16 g    slv3_awaddr [15:0] $end
$var wire      8 f"   slv3_awlen [7:0] $end
$var wire      3 g"   slv3_awsize [2:0] $end
$var wire      2 h"   slv3_awburst [1:0] $end
$var wire      2 h"   slv3_awlock [1:0] $end
$var wire      4 i"   slv3_awcache [3:0] $end
$var wire      3 h    slv3_awprot [2:0] $end
$var wire      4 i"   slv3_awqos [3:0] $end
$var wire      4 i"   slv3_awregion [3:0] $end
$var wire      8 i    slv3_awid [7:0] $end
$var wire      1 e    slv3_awuser [0] $end
$var wire      1 e    slv3_wvalid  $end
$var reg       1 3#   slv3_wready  $end
$var wire      1 d    slv3_wlast  $end
$var wire     32 k    slv3_wdata [31:0] $end
$var wire      4 l    slv3_wstrb [3:0] $end
$var wire      1 e    slv3_wuser [0] $end
$var reg       1 4#   slv3_bvalid  $end
$var wire      1 e    slv3_bready  $end
$var reg       8 5#   slv3_bid [7:0] $end
$var reg       2 6#   slv3_bresp [1:0] $end
$var reg       1 7#   slv3_buser [0:0] $end
$var wire      1 e    slv3_arvalid  $end
$var reg       1 8#   slv3_arready  $end
$var wire     16 g    slv3_araddr [15:0] $end
$var wire      8 f"   slv3_arlen [7:0] $end
$var wire      3 g"   slv3_arsize [2:0] $end
$var wire      2 h"   slv3_arburst [1:0] $end
$var wire      2 h"   slv3_arlock [1:0] $end
$var wire      4 i"   slv3_arcache [3:0] $end
$var wire      3 h    slv3_arprot [2:0] $end
$var wire      4 i"   slv3_arqos [3:0] $end
$var wire      4 i"   slv3_arregion [3:0] $end
$var wire      8 i    slv3_arid [7:0] $end
$var wire      1 e    slv3_aruser [0] $end
$var reg       1 9#   slv3_rvalid  $end
$var wire      1 e    slv3_rready  $end
$var reg       8 :#   slv3_rid [7:0] $end
$var reg       2 ;#   slv3_rresp [1:0] $end
$var reg      32 <#   slv3_rdata [31:0] $end
$var reg       1 =#   slv3_rlast  $end
$var reg       1 >#   slv3_ruser [0:0] $end
$var wire      1 =!   mst0_aclk  $end
$var wire      1 d    mst0_aresetn  $end
$var wire      1 e    mst0_srst  $end
$var reg       1 ?#   mst0_awvalid  $end
$var wire      1 e    mst0_awready  $end
$var reg      16 @#   mst0_awaddr [15:0] $end
$var reg       8 A#   mst0_awlen [7:0] $end
$var reg       3 B#   mst0_awsize [2:0] $end
$var reg       2 C#   mst0_awburst [1:0] $end
$var reg       2 D#   mst0_awlock [1:0] $end
$var reg       4 E#   mst0_awcache [3:0] $end
$var reg       3 F#   mst0_awprot [2:0] $end
$var reg       4 G#   mst0_awqos [3:0] $end
$var reg       4 H#   mst0_awregion [3:0] $end
$var reg       8 I#   mst0_awid [7:0] $end
$var reg       1 J#   mst0_awuser [0:0] $end
$var reg       1 K#   mst0_wvalid  $end
$var wire      1 e    mst0_wready  $end
$var reg       1 L#   mst0_wlast  $end
$var reg      32 M#   mst0_wdata [31:0] $end
$var reg       4 N#   mst0_wstrb [3:0] $end
$var reg       1 O#   mst0_wuser [0:0] $end
$var wire      1 e    mst0_bvalid  $end
$var reg       1 P#   mst0_bready  $end
$var wire      8 i    mst0_bid [7:0] $end
$var wire      2 H!   mst0_bresp [1:0] $end
$var wire      1 e    mst0_buser [0] $end
$var reg       1 Q#   mst0_arvalid  $end
$var wire      1 e    mst0_arready  $end
$var reg      16 R#   mst0_araddr [15:0] $end
$var reg       8 S#   mst0_arlen [7:0] $end
$var reg       3 T#   mst0_arsize [2:0] $end
$var reg       2 U#   mst0_arburst [1:0] $end
$var reg       2 V#   mst0_arlock [1:0] $end
$var reg       4 W#   mst0_arcache [3:0] $end
$var reg       3 X#   mst0_arprot [2:0] $end
$var reg       4 Y#   mst0_arqos [3:0] $end
$var reg       4 Z#   mst0_arregion [3:0] $end
$var reg       8 [#   mst0_arid [7:0] $end
$var reg       1 \#   mst0_aruser [0:0] $end
$var wire      1 e    mst0_rvalid  $end
$var reg       1 ]#   mst0_rready  $end
$var wire      8 i    mst0_rid [7:0] $end
$var wire      2 H!   mst0_rresp [1:0] $end
$var wire     32 k    mst0_rdata [31:0] $end
$var wire      1 d    mst0_rlast  $end
$var wire      1 e    mst0_ruser [0] $end
$var wire      1 =!   mst1_aclk  $end
$var wire      1 d    mst1_aresetn  $end
$var wire      1 e    mst1_srst  $end
$var reg       1 ^#   mst1_awvalid  $end
$var wire      1 e    mst1_awready  $end
$var reg      16 _#   mst1_awaddr [15:0] $end
$var reg       8 `#   mst1_awlen [7:0] $end
$var reg       3 a#   mst1_awsize [2:0] $end
$var reg       2 b#   mst1_awburst [1:0] $end
$var reg       2 c#   mst1_awlock [1:0] $end
$var reg       4 d#   mst1_awcache [3:0] $end
$var reg       3 e#   mst1_awprot [2:0] $end
$var reg       4 f#   mst1_awqos [3:0] $end
$var reg       4 g#   mst1_awregion [3:0] $end
$var reg       8 h#   mst1_awid [7:0] $end
$var reg       1 i#   mst1_awuser [0:0] $end
$var reg       1 j#   mst1_wvalid  $end
$var wire      1 e    mst1_wready  $end
$var reg       1 k#   mst1_wlast  $end
$var reg      32 l#   mst1_wdata [31:0] $end
$var reg       4 m#   mst1_wstrb [3:0] $end
$var reg       1 n#   mst1_wuser [0:0] $end
$var wire      1 e    mst1_bvalid  $end
$var reg       1 o#   mst1_bready  $end
$var wire      8 i    mst1_bid [7:0] $end
$var wire      2 H!   mst1_bresp [1:0] $end
$var wire      1 e    mst1_buser [0] $end
$var reg       1 p#   mst1_arvalid  $end
$var wire      1 e    mst1_arready  $end
$var reg      16 q#   mst1_araddr [15:0] $end
$var reg       8 r#   mst1_arlen [7:0] $end
$var reg       3 s#   mst1_arsize [2:0] $end
$var reg       2 t#   mst1_arburst [1:0] $end
$var reg       2 u#   mst1_arlock [1:0] $end
$var reg       4 v#   mst1_arcache [3:0] $end
$var reg       3 w#   mst1_arprot [2:0] $end
$var reg       4 x#   mst1_arqos [3:0] $end
$var reg       4 y#   mst1_arregion [3:0] $end
$var reg       8 z#   mst1_arid [7:0] $end
$var reg       1 {#   mst1_aruser [0:0] $end
$var wire      1 e    mst1_rvalid  $end
$var reg       1 |#   mst1_rready  $end
$var wire      8 i    mst1_rid [7:0] $end
$var wire      2 H!   mst1_rresp [1:0] $end
$var wire     32 k    mst1_rdata [31:0] $end
$var wire      1 d    mst1_rlast  $end
$var wire      1 e    mst1_ruser [0] $end
$var wire      1 =!   mst2_aclk  $end
$var wire      1 d    mst2_aresetn  $end
$var wire      1 e    mst2_srst  $end
$var reg       1 }#   mst2_awvalid  $end
$var wire      1 e    mst2_awready  $end
$var reg      16 ~#   mst2_awaddr [15:0] $end
$var reg       8 !$   mst2_awlen [7:0] $end
$var reg       3 "$   mst2_awsize [2:0] $end
$var reg       2 #$   mst2_awburst [1:0] $end
$var reg       2 $$   mst2_awlock [1:0] $end
$var reg       4 %$   mst2_awcache [3:0] $end
$var reg       3 &$   mst2_awprot [2:0] $end
$var reg       4 '$   mst2_awqos [3:0] $end
$var reg       4 ($   mst2_awregion [3:0] $end
$var reg       8 )$   mst2_awid [7:0] $end
$var reg       1 *$   mst2_awuser [0:0] $end
$var reg       1 +$   mst2_wvalid  $end
$var wire      1 e    mst2_wready  $end
$var reg       1 ,$   mst2_wlast  $end
$var reg      32 -$   mst2_wdata [31:0] $end
$var reg       4 .$   mst2_wstrb [3:0] $end
$var reg       1 /$   mst2_wuser [0:0] $end
$var wire      1 e    mst2_bvalid  $end
$var reg       1 0$   mst2_bready  $end
$var wire      8 i    mst2_bid [7:0] $end
$var wire      2 H!   mst2_bresp [1:0] $end
$var wire      1 e    mst2_buser [0] $end
$var reg       1 1$   mst2_arvalid  $end
$var wire      1 e    mst2_arready  $end
$var reg      16 2$   mst2_araddr [15:0] $end
$var reg       8 3$   mst2_arlen [7:0] $end
$var reg       3 4$   mst2_arsize [2:0] $end
$var reg       2 5$   mst2_arburst [1:0] $end
$var reg       2 6$   mst2_arlock [1:0] $end
$var reg       4 7$   mst2_arcache [3:0] $end
$var reg       3 8$   mst2_arprot [2:0] $end
$var reg       4 9$   mst2_arqos [3:0] $end
$var reg       4 :$   mst2_arregion [3:0] $end
$var reg       8 ;$   mst2_arid [7:0] $end
$var reg       1 <$   mst2_aruser [0:0] $end
$var wire      1 e    mst2_rvalid  $end
$var reg       1 =$   mst2_rready  $end
$var wire      8 i    mst2_rid [7:0] $end
$var wire      2 H!   mst2_rresp [1:0] $end
$var wire     32 k    mst2_rdata [31:0] $end
$var wire      1 d    mst2_rlast  $end
$var wire      1 e    mst2_ruser [0] $end
$var wire      1 =!   mst3_aclk  $end
$var wire      1 d    mst3_aresetn  $end
$var wire      1 e    mst3_srst  $end
$var reg       1 >$   mst3_awvalid  $end
$var wire      1 e    mst3_awready  $end
$var reg      16 ?$   mst3_awaddr [15:0] $end
$var reg       8 @$   mst3_awlen [7:0] $end
$var reg       3 A$   mst3_awsize [2:0] $end
$var reg       2 B$   mst3_awburst [1:0] $end
$var reg       2 C$   mst3_awlock [1:0] $end
$var reg       4 D$   mst3_awcache [3:0] $end
$var reg       3 E$   mst3_awprot [2:0] $end
$var reg       4 F$   mst3_awqos [3:0] $end
$var reg       4 G$   mst3_awregion [3:0] $end
$var reg       8 H$   mst3_awid [7:0] $end
$var reg       1 I$   mst3_awuser [0:0] $end
$var reg       1 J$   mst3_wvalid  $end
$var wire      1 e    mst3_wready  $end
$var reg       1 K$   mst3_wlast  $end
$var reg      32 L$   mst3_wdata [31:0] $end
$var reg       4 M$   mst3_wstrb [3:0] $end
$var reg       1 N$   mst3_wuser [0:0] $end
$var wire      1 e    mst3_bvalid  $end
$var reg       1 O$   mst3_bready  $end
$var wire      8 i    mst3_bid [7:0] $end
$var wire      2 H!   mst3_bresp [1:0] $end
$var wire      1 e    mst3_buser [0] $end
$var reg       1 P$   mst3_arvalid  $end
$var wire      1 e    mst3_arready  $end
$var reg      16 Q$   mst3_araddr [15:0] $end
$var reg       8 R$   mst3_arlen [7:0] $end
$var reg       3 S$   mst3_arsize [2:0] $end
$var reg       2 T$   mst3_arburst [1:0] $end
$var reg       2 U$   mst3_arlock [1:0] $end
$var reg       4 V$   mst3_arcache [3:0] $end
$var reg       3 W$   mst3_arprot [2:0] $end
$var reg       4 X$   mst3_arqos [3:0] $end
$var reg       4 Y$   mst3_arregion [3:0] $end
$var reg       8 Z$   mst3_arid [7:0] $end
$var reg       1 [$   mst3_aruser [0:0] $end
$var wire      1 e    mst3_rvalid  $end
$var reg       1 \$   mst3_rready  $end
$var wire      8 i    mst3_rid [7:0] $end
$var wire      2 H!   mst3_rresp [1:0] $end
$var wire     32 k    mst3_rdata [31:0] $end
$var wire      1 d    mst3_rlast  $end
$var wire      1 e    mst3_ruser [0] $end
$var parameter 32 ]$   AUSER_W  $end
$var parameter 32 ^$   WUSER_W  $end
$var parameter 32 _$   BUSER_W  $end
$var parameter 32 `$   RUSER_W  $end
$var parameter 32 a$   AWCH_W  $end
$var parameter 32 b$   WCH_W  $end
$var parameter 32 c$   BCH_W  $end
$var parameter 32 d$   ARCH_W  $end
$var parameter 32 e$   RCH_W  $end
$var parameter 16 f$   MST_ROUTES  $end
$var reg       4 g$   i_awvalid [3:0] $end
$var reg       4 h$   i_awready [3:0] $end
$var reg      108 i$   i_awch [107:0] $end
$var reg       4 j$   i_wvalid [3:0] $end
$var reg       4 k$   i_wready [3:0] $end
$var reg       4 l$   i_wlast [3:0] $end
$var reg      144 m$   i_wch [143:0] $end
$var reg       4 n$   i_bvalid [3:0] $end
$var reg       4 o$   i_bready [3:0] $end
$var reg      40 p$   i_bch [39:0] $end
$var reg       4 q$   i_arvalid [3:0] $end
$var reg       4 r$   i_arready [3:0] $end
$var reg      108 s$   i_arch [107:0] $end
$var reg       4 t$   i_rvalid [3:0] $end
$var reg       4 u$   i_rready [3:0] $end
$var reg       4 v$   i_rlast [3:0] $end
$var reg      168 w$   i_rch [167:0] $end
$var reg       4 x$   o_awvalid [3:0] $end
$var reg       4 y$   o_awready [3:0] $end
$var reg      108 z$   o_awch [107:0] $end
$var reg       4 {$   o_wvalid [3:0] $end
$var reg       4 |$   o_wready [3:0] $end
$var reg       4 }$   o_wlast [3:0] $end
$var reg      144 ~$   o_wch [143:0] $end
$var reg       4 !%   o_bvalid [3:0] $end
$var reg       4 "%   o_bready [3:0] $end
$var reg      40 #%   o_bch [39:0] $end
$var reg       4 $%   o_arvalid [3:0] $end
$var reg       4 %%   o_arready [3:0] $end
$var reg      108 &%   o_arch [107:0] $end
$var reg       4 '%   o_rvalid [3:0] $end
$var reg       4 (%   o_rready [3:0] $end
$var reg       4 )%   o_rlast [3:0] $end
$var reg      168 *%   o_rch [167:0] $end

$scope module slv0_if $end
$var parameter 32 +%   AXI_ADDR_W  $end
$var parameter 32 ,%   AXI_ID_W  $end
$var parameter 32 -%   AXI_DATA_W  $end
$var parameter 32 .%   SLV_NB  $end
$var parameter 32 /%   STRB_MODE  $end
$var parameter 32 0%   AXI_SIGNALING  $end
$var parameter 32 1%   MST_CDC  $end
$var parameter 32 2%   MST_OSTDREQ_NUM  $end
$var parameter 32 3%   MST_OSTDREQ_SIZE  $end
$var parameter 32 4%   USER_SUPPORT  $end
$var parameter 32 5%   AXI_AUSER_W  $end
$var parameter 32 6%   AXI_WUSER_W  $end
$var parameter 32 7%   AXI_BUSER_W  $end
$var parameter 32 8%   AXI_RUSER_W  $end
$var parameter 32 9%   AWCH_W  $end
$var parameter 32 :%   WCH_W  $end
$var parameter 32 ;%   BCH_W  $end
$var parameter 32 <%   ARCH_W  $end
$var parameter 32 =%   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 >%   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 ?%   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     32 k    i_wdata [31:0] $end
$var wire      4 l    i_wstrb [3:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 @%   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 A%   i_bid [7:0] $end
$var reg       2 B%   i_bresp [1:0] $end
$var reg       1 C%   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 D%   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 E%   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 F%   i_rid [7:0] $end
$var reg       2 G%   i_rresp [1:0] $end
$var reg      32 H%   i_rdata [31:0] $end
$var reg       1 I%   i_rlast  $end
$var reg       1 J%   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 K%   o_awvalid  $end
$var wire      1 L%   o_awready  $end
$var reg      27 M%   o_awch [26:0] $end
$var reg       1 N%   o_wvalid  $end
$var wire      1 O%   o_wready  $end
$var reg       1 P%   o_wlast  $end
$var reg      36 Q%   o_wch [35:0] $end
$var wire      1 R%   o_bvalid  $end
$var reg       1 S%   o_bready  $end
$var wire     10 T%   o_bch [9:0] $end
$var reg       1 U%   o_arvalid  $end
$var wire      1 V%   o_arready  $end
$var reg      27 W%   o_arch [26:0] $end
$var wire      1 X%   o_rvalid  $end
$var reg       1 Y%   o_rready  $end
$var wire      1 Z%   o_rlast  $end
$var wire     42 [%   o_rch [41:0] $end
$var reg      27 \%   awch [26:0] $end
$var reg      36 ]%   wch [35:0] $end
$var reg      10 ^%   bch [9:0] $end
$var reg      27 _%   arch [26:0] $end
$var reg      42 `%   rch [41:0] $end
$var reg       1 a%   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 b%   PASS_THRU  $end
$var parameter 32 c%   AW_ASIZE  $end
$var parameter 32 d%   W_ASIZE  $end
$var parameter 32 e%   B_ASIZE  $end
$var parameter 32 f%   AR_ASIZE  $end
$var parameter 32 g%   R_ASIZE  $end
$var reg       1 h%   aw_full  $end
$var reg       1 i%   aw_empty  $end
$var reg       1 j%   w_full  $end
$var reg       1 k%   w_empty  $end
$var reg       1 l%   ar_full  $end
$var reg       1 m%   ar_empty  $end
$var reg       1 n%   r_full  $end
$var reg       1 o%   r_empty  $end
$var reg       1 p%   b_full  $end
$var reg       1 q%   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 r%   PASS_THRU  $end
$var parameter 32 s%   ADDR_WIDTH  $end
$var parameter 32 t%   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 v%   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 w%   full  $end
$var reg      27 x%   data_out [26:0] $end
$var wire      1 L%   pull  $end
$var reg       1 y%   empty  $end
$var reg       1 z%   wr_en  $end
$var reg       3 {%   wrptr [2:0] $end
$var reg       3 |%   rdptr [2:0] $end
$var reg       1 }%   empty_flag  $end
$var reg       1 ~%   full_flag  $end
$var reg       1 !&   pass_thru  $end
$var reg      27 "&   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 #&   ADDR_WIDTH  $end
$var parameter 32 $&   DATA_WIDTH  $end
$var parameter 32 %&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 &&   wr_en  $end
$var wire      2 '&   addr_in [1:0] $end
$var wire     27 v%   data_in [26:0] $end
$var wire      2 (&   addr_out [1:0] $end
$var reg      27 )&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 *&   PASS_THRU  $end
$var parameter 32 +&   ADDR_WIDTH  $end
$var parameter 32 ,&   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 -&   data_in [36:0] $end
$var wire      1 e    push  $end
$var reg       1 .&   full  $end
$var reg      37 /&   data_out [36:0] $end
$var wire      1 O%   pull  $end
$var reg       1 0&   empty  $end
$var reg       1 1&   wr_en  $end
$var reg       3 2&   wrptr [2:0] $end
$var reg       3 3&   rdptr [2:0] $end
$var reg       1 4&   empty_flag  $end
$var reg       1 5&   full_flag  $end
$var reg       1 6&   pass_thru  $end
$var reg      37 7&   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 8&   ADDR_WIDTH  $end
$var parameter 32 9&   DATA_WIDTH  $end
$var parameter 32 :&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ;&   wr_en  $end
$var wire      2 <&   addr_in [1:0] $end
$var wire     37 -&   data_in [36:0] $end
$var wire      2 =&   addr_out [1:0] $end
$var reg      37 >&   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 ?&   PASS_THRU  $end
$var parameter 32 @&   ADDR_WIDTH  $end
$var parameter 32 A&   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 T%   data_in [9:0] $end
$var wire      1 R%   push  $end
$var reg       1 B&   full  $end
$var reg      10 C&   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 D&   empty  $end
$var reg       1 E&   wr_en  $end
$var reg       3 F&   wrptr [2:0] $end
$var reg       3 G&   rdptr [2:0] $end
$var reg       1 H&   empty_flag  $end
$var reg       1 I&   full_flag  $end
$var reg       1 J&   pass_thru  $end
$var reg      10 K&   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 L&   ADDR_WIDTH  $end
$var parameter 32 M&   DATA_WIDTH  $end
$var parameter 32 N&   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 O&   wr_en  $end
$var wire      2 P&   addr_in [1:0] $end
$var wire     10 T%   data_in [9:0] $end
$var wire      2 Q&   addr_out [1:0] $end
$var reg      10 R&   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 S&   PASS_THRU  $end
$var parameter 32 T&   ADDR_WIDTH  $end
$var parameter 32 U&   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 V&   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 W&   full  $end
$var reg      27 X&   data_out [26:0] $end
$var wire      1 V%   pull  $end
$var reg       1 Y&   empty  $end
$var reg       1 Z&   wr_en  $end
$var reg       3 [&   wrptr [2:0] $end
$var reg       3 \&   rdptr [2:0] $end
$var reg       1 ]&   empty_flag  $end
$var reg       1 ^&   full_flag  $end
$var reg       1 _&   pass_thru  $end
$var reg      27 `&   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 a&   ADDR_WIDTH  $end
$var parameter 32 b&   DATA_WIDTH  $end
$var parameter 32 c&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 d&   wr_en  $end
$var wire      2 e&   addr_in [1:0] $end
$var wire     27 V&   data_in [26:0] $end
$var wire      2 f&   addr_out [1:0] $end
$var reg      27 g&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 h&   PASS_THRU  $end
$var parameter 32 i&   ADDR_WIDTH  $end
$var parameter 32 j&   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 k&   data_in [42:0] $end
$var wire      1 X%   push  $end
$var reg       1 l&   full  $end
$var reg      43 m&   data_out [42:0] $end
$var wire      1 e    pull  $end
$var reg       1 n&   empty  $end
$var reg       1 o&   wr_en  $end
$var reg       3 p&   wrptr [2:0] $end
$var reg       3 q&   rdptr [2:0] $end
$var reg       1 r&   empty_flag  $end
$var reg       1 s&   full_flag  $end
$var reg       1 t&   pass_thru  $end
$var reg      43 u&   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 v&   ADDR_WIDTH  $end
$var parameter 32 w&   DATA_WIDTH  $end
$var parameter 32 x&   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 y&   wr_en  $end
$var wire      2 z&   addr_in [1:0] $end
$var wire     43 k&   data_in [42:0] $end
$var wire      2 {&   addr_out [1:0] $end
$var reg      43 |&   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv1_if $end
$var parameter 32 }&   AXI_ADDR_W  $end
$var parameter 32 ~&   AXI_ID_W  $end
$var parameter 32 !'   AXI_DATA_W  $end
$var parameter 32 "'   SLV_NB  $end
$var parameter 32 #'   STRB_MODE  $end
$var parameter 32 $'   AXI_SIGNALING  $end
$var parameter 32 %'   MST_CDC  $end
$var parameter 32 &'   MST_OSTDREQ_NUM  $end
$var parameter 32 ''   MST_OSTDREQ_SIZE  $end
$var parameter 32 ('   USER_SUPPORT  $end
$var parameter 32 )'   AXI_AUSER_W  $end
$var parameter 32 *'   AXI_WUSER_W  $end
$var parameter 32 +'   AXI_BUSER_W  $end
$var parameter 32 ,'   AXI_RUSER_W  $end
$var parameter 32 -'   AWCH_W  $end
$var parameter 32 .'   WCH_W  $end
$var parameter 32 /'   BCH_W  $end
$var parameter 32 0'   ARCH_W  $end
$var parameter 32 1'   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 2'   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 3'   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     32 k    i_wdata [31:0] $end
$var wire      4 l    i_wstrb [3:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 4'   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 5'   i_bid [7:0] $end
$var reg       2 6'   i_bresp [1:0] $end
$var reg       1 7'   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 8'   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 9'   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 :'   i_rid [7:0] $end
$var reg       2 ;'   i_rresp [1:0] $end
$var reg      32 <'   i_rdata [31:0] $end
$var reg       1 ='   i_rlast  $end
$var reg       1 >'   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 ?'   o_awvalid  $end
$var wire      1 @'   o_awready  $end
$var reg      27 A'   o_awch [26:0] $end
$var reg       1 B'   o_wvalid  $end
$var wire      1 C'   o_wready  $end
$var reg       1 D'   o_wlast  $end
$var reg      36 E'   o_wch [35:0] $end
$var wire      1 F'   o_bvalid  $end
$var reg       1 G'   o_bready  $end
$var wire     10 H'   o_bch [9:0] $end
$var reg       1 I'   o_arvalid  $end
$var wire      1 J'   o_arready  $end
$var reg      27 K'   o_arch [26:0] $end
$var wire      1 L'   o_rvalid  $end
$var reg       1 M'   o_rready  $end
$var wire      1 N'   o_rlast  $end
$var wire     42 O'   o_rch [41:0] $end
$var reg      27 P'   awch [26:0] $end
$var reg      36 Q'   wch [35:0] $end
$var reg      10 R'   bch [9:0] $end
$var reg      27 S'   arch [26:0] $end
$var reg      42 T'   rch [41:0] $end
$var reg       1 U'   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 V'   PASS_THRU  $end
$var parameter 32 W'   AW_ASIZE  $end
$var parameter 32 X'   W_ASIZE  $end
$var parameter 32 Y'   B_ASIZE  $end
$var parameter 32 Z'   AR_ASIZE  $end
$var parameter 32 ['   R_ASIZE  $end
$var reg       1 \'   aw_full  $end
$var reg       1 ]'   aw_empty  $end
$var reg       1 ^'   w_full  $end
$var reg       1 _'   w_empty  $end
$var reg       1 `'   ar_full  $end
$var reg       1 a'   ar_empty  $end
$var reg       1 b'   r_full  $end
$var reg       1 c'   r_empty  $end
$var reg       1 d'   b_full  $end
$var reg       1 e'   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 f'   PASS_THRU  $end
$var parameter 32 g'   ADDR_WIDTH  $end
$var parameter 32 h'   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 i'   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 j'   full  $end
$var reg      27 k'   data_out [26:0] $end
$var wire      1 @'   pull  $end
$var reg       1 l'   empty  $end
$var reg       1 m'   wr_en  $end
$var reg       3 n'   wrptr [2:0] $end
$var reg       3 o'   rdptr [2:0] $end
$var reg       1 p'   empty_flag  $end
$var reg       1 q'   full_flag  $end
$var reg       1 r'   pass_thru  $end
$var reg      27 s'   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 t'   ADDR_WIDTH  $end
$var parameter 32 u'   DATA_WIDTH  $end
$var parameter 32 v'   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 w'   wr_en  $end
$var wire      2 x'   addr_in [1:0] $end
$var wire     27 i'   data_in [26:0] $end
$var wire      2 y'   addr_out [1:0] $end
$var reg      27 z'   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 {'   PASS_THRU  $end
$var parameter 32 |'   ADDR_WIDTH  $end
$var parameter 32 }'   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 ~'   data_in [36:0] $end
$var wire      1 e    push  $end
$var reg       1 !(   full  $end
$var reg      37 "(   data_out [36:0] $end
$var wire      1 C'   pull  $end
$var reg       1 #(   empty  $end
$var reg       1 $(   wr_en  $end
$var reg       3 %(   wrptr [2:0] $end
$var reg       3 &(   rdptr [2:0] $end
$var reg       1 '(   empty_flag  $end
$var reg       1 ((   full_flag  $end
$var reg       1 )(   pass_thru  $end
$var reg      37 *(   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 +(   ADDR_WIDTH  $end
$var parameter 32 ,(   DATA_WIDTH  $end
$var parameter 32 -(   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 .(   wr_en  $end
$var wire      2 /(   addr_in [1:0] $end
$var wire     37 ~'   data_in [36:0] $end
$var wire      2 0(   addr_out [1:0] $end
$var reg      37 1(   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 2(   PASS_THRU  $end
$var parameter 32 3(   ADDR_WIDTH  $end
$var parameter 32 4(   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 H'   data_in [9:0] $end
$var wire      1 F'   push  $end
$var reg       1 5(   full  $end
$var reg      10 6(   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 7(   empty  $end
$var reg       1 8(   wr_en  $end
$var reg       3 9(   wrptr [2:0] $end
$var reg       3 :(   rdptr [2:0] $end
$var reg       1 ;(   empty_flag  $end
$var reg       1 <(   full_flag  $end
$var reg       1 =(   pass_thru  $end
$var reg      10 >(   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 ?(   ADDR_WIDTH  $end
$var parameter 32 @(   DATA_WIDTH  $end
$var parameter 32 A(   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 B(   wr_en  $end
$var wire      2 C(   addr_in [1:0] $end
$var wire     10 H'   data_in [9:0] $end
$var wire      2 D(   addr_out [1:0] $end
$var reg      10 E(   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 F(   PASS_THRU  $end
$var parameter 32 G(   ADDR_WIDTH  $end
$var parameter 32 H(   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 I(   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 J(   full  $end
$var reg      27 K(   data_out [26:0] $end
$var wire      1 J'   pull  $end
$var reg       1 L(   empty  $end
$var reg       1 M(   wr_en  $end
$var reg       3 N(   wrptr [2:0] $end
$var reg       3 O(   rdptr [2:0] $end
$var reg       1 P(   empty_flag  $end
$var reg       1 Q(   full_flag  $end
$var reg       1 R(   pass_thru  $end
$var reg      27 S(   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 T(   ADDR_WIDTH  $end
$var parameter 32 U(   DATA_WIDTH  $end
$var parameter 32 V(   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 W(   wr_en  $end
$var wire      2 X(   addr_in [1:0] $end
$var wire     27 I(   data_in [26:0] $end
$var wire      2 Y(   addr_out [1:0] $end
$var reg      27 Z(   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 [(   PASS_THRU  $end
$var parameter 32 \(   ADDR_WIDTH  $end
$var parameter 32 ](   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 ^(   data_in [42:0] $end
$var wire      1 L'   push  $end
$var reg       1 _(   full  $end
$var reg      43 `(   data_out [42:0] $end
$var wire      1 e    pull  $end
$var reg       1 a(   empty  $end
$var reg       1 b(   wr_en  $end
$var reg       3 c(   wrptr [2:0] $end
$var reg       3 d(   rdptr [2:0] $end
$var reg       1 e(   empty_flag  $end
$var reg       1 f(   full_flag  $end
$var reg       1 g(   pass_thru  $end
$var reg      43 h(   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 i(   ADDR_WIDTH  $end
$var parameter 32 j(   DATA_WIDTH  $end
$var parameter 32 k(   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 l(   wr_en  $end
$var wire      2 m(   addr_in [1:0] $end
$var wire     43 ^(   data_in [42:0] $end
$var wire      2 n(   addr_out [1:0] $end
$var reg      43 o(   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv2_if $end
$var parameter 32 p(   AXI_ADDR_W  $end
$var parameter 32 q(   AXI_ID_W  $end
$var parameter 32 r(   AXI_DATA_W  $end
$var parameter 32 s(   SLV_NB  $end
$var parameter 32 t(   STRB_MODE  $end
$var parameter 32 u(   AXI_SIGNALING  $end
$var parameter 32 v(   MST_CDC  $end
$var parameter 32 w(   MST_OSTDREQ_NUM  $end
$var parameter 32 x(   MST_OSTDREQ_SIZE  $end
$var parameter 32 y(   USER_SUPPORT  $end
$var parameter 32 z(   AXI_AUSER_W  $end
$var parameter 32 {(   AXI_WUSER_W  $end
$var parameter 32 |(   AXI_BUSER_W  $end
$var parameter 32 }(   AXI_RUSER_W  $end
$var parameter 32 ~(   AWCH_W  $end
$var parameter 32 !)   WCH_W  $end
$var parameter 32 ")   BCH_W  $end
$var parameter 32 #)   ARCH_W  $end
$var parameter 32 $)   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 %)   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 &)   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     32 k    i_wdata [31:0] $end
$var wire      4 l    i_wstrb [3:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 ')   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 ()   i_bid [7:0] $end
$var reg       2 ))   i_bresp [1:0] $end
$var reg       1 *)   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 +)   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 ,)   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 -)   i_rid [7:0] $end
$var reg       2 .)   i_rresp [1:0] $end
$var reg      32 /)   i_rdata [31:0] $end
$var reg       1 0)   i_rlast  $end
$var reg       1 1)   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 2)   o_awvalid  $end
$var wire      1 3)   o_awready  $end
$var reg      27 4)   o_awch [26:0] $end
$var reg       1 5)   o_wvalid  $end
$var wire      1 6)   o_wready  $end
$var reg       1 7)   o_wlast  $end
$var reg      36 8)   o_wch [35:0] $end
$var wire      1 9)   o_bvalid  $end
$var reg       1 :)   o_bready  $end
$var wire     10 ;)   o_bch [9:0] $end
$var reg       1 <)   o_arvalid  $end
$var wire      1 =)   o_arready  $end
$var reg      27 >)   o_arch [26:0] $end
$var wire      1 ?)   o_rvalid  $end
$var reg       1 @)   o_rready  $end
$var wire      1 A)   o_rlast  $end
$var wire     42 B)   o_rch [41:0] $end
$var reg      27 C)   awch [26:0] $end
$var reg      36 D)   wch [35:0] $end
$var reg      10 E)   bch [9:0] $end
$var reg      27 F)   arch [26:0] $end
$var reg      42 G)   rch [41:0] $end
$var reg       1 H)   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 I)   PASS_THRU  $end
$var parameter 32 J)   AW_ASIZE  $end
$var parameter 32 K)   W_ASIZE  $end
$var parameter 32 L)   B_ASIZE  $end
$var parameter 32 M)   AR_ASIZE  $end
$var parameter 32 N)   R_ASIZE  $end
$var reg       1 O)   aw_full  $end
$var reg       1 P)   aw_empty  $end
$var reg       1 Q)   w_full  $end
$var reg       1 R)   w_empty  $end
$var reg       1 S)   ar_full  $end
$var reg       1 T)   ar_empty  $end
$var reg       1 U)   r_full  $end
$var reg       1 V)   r_empty  $end
$var reg       1 W)   b_full  $end
$var reg       1 X)   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 Y)   PASS_THRU  $end
$var parameter 32 Z)   ADDR_WIDTH  $end
$var parameter 32 [)   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 \)   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 ])   full  $end
$var reg      27 ^)   data_out [26:0] $end
$var wire      1 3)   pull  $end
$var reg       1 _)   empty  $end
$var reg       1 `)   wr_en  $end
$var reg       3 a)   wrptr [2:0] $end
$var reg       3 b)   rdptr [2:0] $end
$var reg       1 c)   empty_flag  $end
$var reg       1 d)   full_flag  $end
$var reg       1 e)   pass_thru  $end
$var reg      27 f)   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 g)   ADDR_WIDTH  $end
$var parameter 32 h)   DATA_WIDTH  $end
$var parameter 32 i)   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 j)   wr_en  $end
$var wire      2 k)   addr_in [1:0] $end
$var wire     27 \)   data_in [26:0] $end
$var wire      2 l)   addr_out [1:0] $end
$var reg      27 m)   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 n)   PASS_THRU  $end
$var parameter 32 o)   ADDR_WIDTH  $end
$var parameter 32 p)   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 q)   data_in [36:0] $end
$var wire      1 e    push  $end
$var reg       1 r)   full  $end
$var reg      37 s)   data_out [36:0] $end
$var wire      1 6)   pull  $end
$var reg       1 t)   empty  $end
$var reg       1 u)   wr_en  $end
$var reg       3 v)   wrptr [2:0] $end
$var reg       3 w)   rdptr [2:0] $end
$var reg       1 x)   empty_flag  $end
$var reg       1 y)   full_flag  $end
$var reg       1 z)   pass_thru  $end
$var reg      37 {)   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 |)   ADDR_WIDTH  $end
$var parameter 32 })   DATA_WIDTH  $end
$var parameter 32 ~)   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 !*   wr_en  $end
$var wire      2 "*   addr_in [1:0] $end
$var wire     37 q)   data_in [36:0] $end
$var wire      2 #*   addr_out [1:0] $end
$var reg      37 $*   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 %*   PASS_THRU  $end
$var parameter 32 &*   ADDR_WIDTH  $end
$var parameter 32 '*   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 ;)   data_in [9:0] $end
$var wire      1 9)   push  $end
$var reg       1 (*   full  $end
$var reg      10 )*   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 **   empty  $end
$var reg       1 +*   wr_en  $end
$var reg       3 ,*   wrptr [2:0] $end
$var reg       3 -*   rdptr [2:0] $end
$var reg       1 .*   empty_flag  $end
$var reg       1 /*   full_flag  $end
$var reg       1 0*   pass_thru  $end
$var reg      10 1*   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 2*   ADDR_WIDTH  $end
$var parameter 32 3*   DATA_WIDTH  $end
$var parameter 32 4*   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 5*   wr_en  $end
$var wire      2 6*   addr_in [1:0] $end
$var wire     10 ;)   data_in [9:0] $end
$var wire      2 7*   addr_out [1:0] $end
$var reg      10 8*   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 9*   PASS_THRU  $end
$var parameter 32 :*   ADDR_WIDTH  $end
$var parameter 32 ;*   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 <*   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 =*   full  $end
$var reg      27 >*   data_out [26:0] $end
$var wire      1 =)   pull  $end
$var reg       1 ?*   empty  $end
$var reg       1 @*   wr_en  $end
$var reg       3 A*   wrptr [2:0] $end
$var reg       3 B*   rdptr [2:0] $end
$var reg       1 C*   empty_flag  $end
$var reg       1 D*   full_flag  $end
$var reg       1 E*   pass_thru  $end
$var reg      27 F*   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 G*   ADDR_WIDTH  $end
$var parameter 32 H*   DATA_WIDTH  $end
$var parameter 32 I*   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 J*   wr_en  $end
$var wire      2 K*   addr_in [1:0] $end
$var wire     27 <*   data_in [26:0] $end
$var wire      2 L*   addr_out [1:0] $end
$var reg      27 M*   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 N*   PASS_THRU  $end
$var parameter 32 O*   ADDR_WIDTH  $end
$var parameter 32 P*   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 Q*   data_in [42:0] $end
$var wire      1 ?)   push  $end
$var reg       1 R*   full  $end
$var reg      43 S*   data_out [42:0] $end
$var wire      1 e    pull  $end
$var reg       1 T*   empty  $end
$var reg       1 U*   wr_en  $end
$var reg       3 V*   wrptr [2:0] $end
$var reg       3 W*   rdptr [2:0] $end
$var reg       1 X*   empty_flag  $end
$var reg       1 Y*   full_flag  $end
$var reg       1 Z*   pass_thru  $end
$var reg      43 [*   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 \*   ADDR_WIDTH  $end
$var parameter 32 ]*   DATA_WIDTH  $end
$var parameter 32 ^*   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 _*   wr_en  $end
$var wire      2 `*   addr_in [1:0] $end
$var wire     43 Q*   data_in [42:0] $end
$var wire      2 a*   addr_out [1:0] $end
$var reg      43 b*   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module slv3_if $end
$var parameter 32 c*   AXI_ADDR_W  $end
$var parameter 32 d*   AXI_ID_W  $end
$var parameter 32 e*   AXI_DATA_W  $end
$var parameter 32 f*   SLV_NB  $end
$var parameter 32 g*   STRB_MODE  $end
$var parameter 32 h*   AXI_SIGNALING  $end
$var parameter 32 i*   MST_CDC  $end
$var parameter 32 j*   MST_OSTDREQ_NUM  $end
$var parameter 32 k*   MST_OSTDREQ_SIZE  $end
$var parameter 32 l*   USER_SUPPORT  $end
$var parameter 32 m*   AXI_AUSER_W  $end
$var parameter 32 n*   AXI_WUSER_W  $end
$var parameter 32 o*   AXI_BUSER_W  $end
$var parameter 32 p*   AXI_RUSER_W  $end
$var parameter 32 q*   AWCH_W  $end
$var parameter 32 r*   WCH_W  $end
$var parameter 32 s*   BCH_W  $end
$var parameter 32 t*   ARCH_W  $end
$var parameter 32 u*   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 v*   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 w*   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     32 k    i_wdata [31:0] $end
$var wire      4 l    i_wstrb [3:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 x*   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 y*   i_bid [7:0] $end
$var reg       2 z*   i_bresp [1:0] $end
$var reg       1 {*   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 |*   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 }*   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 ~*   i_rid [7:0] $end
$var reg       2 !+   i_rresp [1:0] $end
$var reg      32 "+   i_rdata [31:0] $end
$var reg       1 #+   i_rlast  $end
$var reg       1 $+   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 %+   o_awvalid  $end
$var wire      1 &+   o_awready  $end
$var reg      27 '+   o_awch [26:0] $end
$var reg       1 (+   o_wvalid  $end
$var wire      1 )+   o_wready  $end
$var reg       1 *+   o_wlast  $end
$var reg      36 ++   o_wch [35:0] $end
$var wire      1 ,+   o_bvalid  $end
$var reg       1 -+   o_bready  $end
$var wire     10 .+   o_bch [9:0] $end
$var reg       1 /+   o_arvalid  $end
$var wire      1 0+   o_arready  $end
$var reg      27 1+   o_arch [26:0] $end
$var wire      1 2+   o_rvalid  $end
$var reg       1 3+   o_rready  $end
$var wire      1 4+   o_rlast  $end
$var wire     42 5+   o_rch [41:0] $end
$var reg      27 6+   awch [26:0] $end
$var reg      36 7+   wch [35:0] $end
$var reg      10 8+   bch [9:0] $end
$var reg      27 9+   arch [26:0] $end
$var reg      42 :+   rch [41:0] $end
$var reg       1 ;+   wlast  $end

$scope begin BUFF_STAGE $end
$var parameter 32 <+   PASS_THRU  $end
$var parameter 32 =+   AW_ASIZE  $end
$var parameter 32 >+   W_ASIZE  $end
$var parameter 32 ?+   B_ASIZE  $end
$var parameter 32 @+   AR_ASIZE  $end
$var parameter 32 A+   R_ASIZE  $end
$var reg       1 B+   aw_full  $end
$var reg       1 C+   aw_empty  $end
$var reg       1 D+   w_full  $end
$var reg       1 E+   w_empty  $end
$var reg       1 F+   ar_full  $end
$var reg       1 G+   ar_empty  $end
$var reg       1 H+   r_full  $end
$var reg       1 I+   r_empty  $end
$var reg       1 J+   b_full  $end
$var reg       1 K+   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 L+   PASS_THRU  $end
$var parameter 32 M+   ADDR_WIDTH  $end
$var parameter 32 N+   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 O+   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 P+   full  $end
$var reg      27 Q+   data_out [26:0] $end
$var wire      1 &+   pull  $end
$var reg       1 R+   empty  $end
$var reg       1 S+   wr_en  $end
$var reg       3 T+   wrptr [2:0] $end
$var reg       3 U+   rdptr [2:0] $end
$var reg       1 V+   empty_flag  $end
$var reg       1 W+   full_flag  $end
$var reg       1 X+   pass_thru  $end
$var reg      27 Y+   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 Z+   ADDR_WIDTH  $end
$var parameter 32 [+   DATA_WIDTH  $end
$var parameter 32 \+   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ]+   wr_en  $end
$var wire      2 ^+   addr_in [1:0] $end
$var wire     27 O+   data_in [26:0] $end
$var wire      2 _+   addr_out [1:0] $end
$var reg      27 `+   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 a+   PASS_THRU  $end
$var parameter 32 b+   ADDR_WIDTH  $end
$var parameter 32 c+   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 d+   data_in [36:0] $end
$var wire      1 e    push  $end
$var reg       1 e+   full  $end
$var reg      37 f+   data_out [36:0] $end
$var wire      1 )+   pull  $end
$var reg       1 g+   empty  $end
$var reg       1 h+   wr_en  $end
$var reg       3 i+   wrptr [2:0] $end
$var reg       3 j+   rdptr [2:0] $end
$var reg       1 k+   empty_flag  $end
$var reg       1 l+   full_flag  $end
$var reg       1 m+   pass_thru  $end
$var reg      37 n+   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 o+   ADDR_WIDTH  $end
$var parameter 32 p+   DATA_WIDTH  $end
$var parameter 32 q+   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 r+   wr_en  $end
$var wire      2 s+   addr_in [1:0] $end
$var wire     37 d+   data_in [36:0] $end
$var wire      2 t+   addr_out [1:0] $end
$var reg      37 u+   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 v+   PASS_THRU  $end
$var parameter 32 w+   ADDR_WIDTH  $end
$var parameter 32 x+   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 .+   data_in [9:0] $end
$var wire      1 ,+   push  $end
$var reg       1 y+   full  $end
$var reg      10 z+   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 {+   empty  $end
$var reg       1 |+   wr_en  $end
$var reg       3 }+   wrptr [2:0] $end
$var reg       3 ~+   rdptr [2:0] $end
$var reg       1 !,   empty_flag  $end
$var reg       1 ",   full_flag  $end
$var reg       1 #,   pass_thru  $end
$var reg      10 $,   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 %,   ADDR_WIDTH  $end
$var parameter 32 &,   DATA_WIDTH  $end
$var parameter 32 ',   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 (,   wr_en  $end
$var wire      2 ),   addr_in [1:0] $end
$var wire     10 .+   data_in [9:0] $end
$var wire      2 *,   addr_out [1:0] $end
$var reg      10 +,   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 ,,   PASS_THRU  $end
$var parameter 32 -,   ADDR_WIDTH  $end
$var parameter 32 .,   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 /,   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 0,   full  $end
$var reg      27 1,   data_out [26:0] $end
$var wire      1 0+   pull  $end
$var reg       1 2,   empty  $end
$var reg       1 3,   wr_en  $end
$var reg       3 4,   wrptr [2:0] $end
$var reg       3 5,   rdptr [2:0] $end
$var reg       1 6,   empty_flag  $end
$var reg       1 7,   full_flag  $end
$var reg       1 8,   pass_thru  $end
$var reg      27 9,   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 :,   ADDR_WIDTH  $end
$var parameter 32 ;,   DATA_WIDTH  $end
$var parameter 32 <,   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 =,   wr_en  $end
$var wire      2 >,   addr_in [1:0] $end
$var wire     27 /,   data_in [26:0] $end
$var wire      2 ?,   addr_out [1:0] $end
$var reg      27 @,   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 A,   PASS_THRU  $end
$var parameter 32 B,   ADDR_WIDTH  $end
$var parameter 32 C,   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 D,   data_in [42:0] $end
$var wire      1 2+   push  $end
$var reg       1 E,   full  $end
$var reg      43 F,   data_out [42:0] $end
$var wire      1 e    pull  $end
$var reg       1 G,   empty  $end
$var reg       1 H,   wr_en  $end
$var reg       3 I,   wrptr [2:0] $end
$var reg       3 J,   rdptr [2:0] $end
$var reg       1 K,   empty_flag  $end
$var reg       1 L,   full_flag  $end
$var reg       1 M,   pass_thru  $end
$var reg      43 N,   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 O,   ADDR_WIDTH  $end
$var parameter 32 P,   DATA_WIDTH  $end
$var parameter 32 Q,   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 R,   wr_en  $end
$var wire      2 S,   addr_in [1:0] $end
$var wire     43 D,   data_in [42:0] $end
$var wire      2 T,   addr_out [1:0] $end
$var reg      43 U,   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module switchs $end
$var parameter 32 V,   AXI_ADDR_W  $end
$var parameter 32 W,   AXI_ID_W  $end
$var parameter 32 X,   AXI_DATA_W  $end
$var parameter 32 Y,   AXI_SIGNALING  $end
$var parameter 32 Z,   MST_NB  $end
$var parameter 32 [,   SLV_NB  $end
$var parameter 32 \,   MST_PIPELINE  $end
$var parameter 32 ],   SLV_PIPELINE  $end
$var parameter 32 ^,   TIMEOUT_ENABLE  $end
$var parameter 16 _,   MST_ROUTES [15:0] $end
$var parameter  8 `,   MST0_ID_MASK [7:0] $end
$var parameter  8 a,   MST1_ID_MASK [7:0] $end
$var parameter  8 b,   MST2_ID_MASK [7:0] $end
$var parameter  8 c,   MST3_ID_MASK [7:0] $end
$var parameter 32 d,   MST0_PRIORITY  $end
$var parameter 32 e,   MST1_PRIORITY  $end
$var parameter 32 f,   MST2_PRIORITY  $end
$var parameter 32 g,   MST3_PRIORITY  $end
$var parameter 32 h,   SLV0_START_ADDR  $end
$var parameter 32 i,   SLV0_END_ADDR  $end
$var parameter 32 j,   SLV1_START_ADDR  $end
$var parameter 32 k,   SLV1_END_ADDR  $end
$var parameter 32 l,   SLV2_START_ADDR  $end
$var parameter 32 m,   SLV2_END_ADDR  $end
$var parameter 32 n,   SLV3_START_ADDR  $end
$var parameter 32 o,   SLV3_END_ADDR  $end
$var parameter 32 p,   AWCH_W  $end
$var parameter 32 q,   WCH_W  $end
$var parameter 32 r,   BCH_W  $end
$var parameter 32 s,   ARCH_W  $end
$var parameter 32 t,   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u,   i_awvalid [3] $end
$var wire      1 v,   i_awvalid [2] $end
$var wire      1 w,   i_awvalid [1] $end
$var wire      1 x,   i_awvalid [0] $end
$var reg       4 y,   i_awready [3:0] $end
$var wire     108 z,   i_awch [107:0] $end
$var wire      1 {,   i_wvalid [3] $end
$var wire      1 |,   i_wvalid [2] $end
$var wire      1 },   i_wvalid [1] $end
$var wire      1 ~,   i_wvalid [0] $end
$var reg       4 !-   i_wready [3:0] $end
$var wire      4 "-   i_wlast [3:0] $end
$var wire     144 #-   i_wch [143:0] $end
$var reg       4 $-   i_bvalid [3:0] $end
$var wire      1 %-   i_bready [3] $end
$var wire      1 &-   i_bready [2] $end
$var wire      1 '-   i_bready [1] $end
$var wire      1 (-   i_bready [0] $end
$var reg      40 )-   i_bch [39:0] $end
$var wire      1 *-   i_arvalid [3] $end
$var wire      1 +-   i_arvalid [2] $end
$var wire      1 ,-   i_arvalid [1] $end
$var wire      1 --   i_arvalid [0] $end
$var reg       4 .-   i_arready [3:0] $end
$var wire     108 /-   i_arch [107:0] $end
$var reg       4 0-   i_rvalid [3:0] $end
$var wire      1 1-   i_rready [3] $end
$var wire      1 2-   i_rready [2] $end
$var wire      1 3-   i_rready [1] $end
$var wire      1 4-   i_rready [0] $end
$var reg       4 5-   i_rlast [3:0] $end
$var reg      168 6-   i_rch [167:0] $end
$var reg       4 7-   o_awvalid [3:0] $end
$var wire      1 8-   o_awready [3] $end
$var wire      1 9-   o_awready [2] $end
$var wire      1 :-   o_awready [1] $end
$var wire      1 ;-   o_awready [0] $end
$var reg      108 <-   o_awch [107:0] $end
$var reg       4 =-   o_wvalid [3:0] $end
$var wire      1 >-   o_wready [3] $end
$var wire      1 ?-   o_wready [2] $end
$var wire      1 @-   o_wready [1] $end
$var wire      1 A-   o_wready [0] $end
$var reg       4 B-   o_wlast [3:0] $end
$var reg      144 C-   o_wch [143:0] $end
$var wire      1 D-   o_bvalid [3] $end
$var wire      1 E-   o_bvalid [2] $end
$var wire      1 F-   o_bvalid [1] $end
$var wire      1 G-   o_bvalid [0] $end
$var reg       4 H-   o_bready [3:0] $end
$var wire     40 I-   o_bch [39:0] $end
$var reg       4 J-   o_arvalid [3:0] $end
$var wire      1 K-   o_arready [3] $end
$var wire      1 L-   o_arready [2] $end
$var wire      1 M-   o_arready [1] $end
$var wire      1 N-   o_arready [0] $end
$var reg      108 O-   o_arch [107:0] $end
$var wire      1 P-   o_rvalid [3] $end
$var wire      1 Q-   o_rvalid [2] $end
$var wire      1 R-   o_rvalid [1] $end
$var wire      1 S-   o_rvalid [0] $end
$var reg       4 T-   o_rready [3:0] $end
$var wire      4 U-   o_rlast [3:0] $end
$var wire     168 V-   o_rch [167:0] $end
$var reg      16 W-   slv_awvalid [15:0] $end
$var reg      16 X-   slv_awready [15:0] $end
$var reg      108 Y-   awch [107:0] $end
$var reg      16 Z-   slv_wvalid [15:0] $end
$var reg      16 [-   slv_wready [15:0] $end
$var reg      16 \-   slv_wlast [15:0] $end
$var reg      144 ]-   wch [143:0] $end
$var reg      16 ^-   slv_bvalid [15:0] $end
$var reg      16 _-   slv_bready [15:0] $end
$var reg      16 `-   slv_arvalid [15:0] $end
$var reg      16 a-   slv_arready [15:0] $end
$var reg      108 b-   arch [107:0] $end
$var reg      16 c-   slv_rvalid [15:0] $end
$var reg      16 d-   slv_rready [15:0] $end
$var reg      16 e-   slv_rlast [15:0] $end
$var reg      16 f-   mst_awvalid [15:0] $end
$var reg      16 g-   mst_awready [15:0] $end
$var reg      16 h-   mst_wvalid [15:0] $end
$var reg      16 i-   mst_wready [15:0] $end
$var reg      16 j-   mst_wlast [15:0] $end
$var reg      16 k-   mst_bvalid [15:0] $end
$var reg      16 l-   mst_bready [15:0] $end
$var reg      40 m-   bch [39:0] $end
$var reg      16 n-   mst_arvalid [15:0] $end
$var reg      16 o-   mst_arready [15:0] $end
$var reg      16 p-   mst_rvalid [15:0] $end
$var reg      16 q-   mst_rready [15:0] $end
$var reg      16 r-   mst_rlast [15:0] $end
$var reg      168 s-   rch [167:0] $end

$scope begin SLV_SWITCHS_GEN[0] $end
$var parameter 32 t-   i [31:0] $end
$var reg       1 u-   pipe_awvalid  $end
$var reg       1 v-   pipe_awready  $end
$var reg      27 w-   pipe_awch [26:0] $end
$var reg       1 x-   pipe_wvalid  $end
$var reg       1 y-   pipe_wready  $end
$var reg       1 z-   pipe_wlast  $end
$var reg      36 {-   pipe_wch [35:0] $end
$var reg       1 |-   pipe_bvalid  $end
$var reg       1 }-   pipe_bready  $end
$var reg      10 ~-   pipe_bch [9:0] $end
$var reg       1 !.   pipe_arvalid  $end
$var reg       1 ".   pipe_arready  $end
$var reg      27 #.   pipe_arch [26:0] $end
$var reg       1 $.   pipe_rvalid  $end
$var reg       1 %.   pipe_rready  $end
$var reg       1 &.   pipe_rlast  $end
$var reg      42 '.   pipe_rch [41:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 (.   DATA_BUS_W  $end
$var parameter 32 ).   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 x,   i_valid  $end
$var reg       1 *.   i_ready  $end
$var wire     27 +.   i_data [26:0] $end
$var reg       1 ,.   o_valid  $end
$var wire      1 -.   o_ready  $end
$var reg      27 ..   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 /.   DATA_BUS_W  $end
$var parameter 32 0.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ~,   i_valid  $end
$var reg       1 1.   i_ready  $end
$var wire     37 2.   i_data [36:0] $end
$var reg       1 3.   o_valid  $end
$var wire      1 4.   o_ready  $end
$var reg      37 5.   o_data [36:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 6.   DATA_BUS_W  $end
$var parameter 32 7.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 8.   i_valid  $end
$var reg       1 9.   i_ready  $end
$var wire     10 :.   i_data [9:0] $end
$var reg       1 ;.   o_valid  $end
$var wire      1 (-   o_ready  $end
$var reg      10 <.   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 =.   DATA_BUS_W  $end
$var parameter 32 >.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 --   i_valid  $end
$var reg       1 ?.   i_ready  $end
$var wire     27 @.   i_data [26:0] $end
$var reg       1 A.   o_valid  $end
$var wire      1 B.   o_ready  $end
$var reg      27 C.   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 D.   DATA_BUS_W  $end
$var parameter 32 E.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 F.   i_valid  $end
$var reg       1 G.   i_ready  $end
$var wire     43 H.   i_data [42:0] $end
$var reg       1 I.   o_valid  $end
$var wire      1 4-   o_ready  $end
$var reg      43 J.   o_data [42:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 K.   AXI_ADDR_W  $end
$var parameter 32 L.   AXI_ID_W  $end
$var parameter 32 M.   AXI_SIGNALING  $end
$var parameter 32 N.   SLV_NB  $end
$var parameter 32 O.   TIMEOUT_ENABLE  $end
$var parameter  4 P.   MST_ROUTES  $end
$var parameter 32 Q.   SLV0_START_ADDR  $end
$var parameter 32 R.   SLV0_END_ADDR  $end
$var parameter 32 S.   SLV1_START_ADDR  $end
$var parameter 32 T.   SLV1_END_ADDR  $end
$var parameter 32 U.   SLV2_START_ADDR  $end
$var parameter 32 V.   SLV2_END_ADDR  $end
$var parameter 32 W.   SLV3_START_ADDR  $end
$var parameter 32 X.   SLV3_END_ADDR  $end
$var parameter 32 Y.   AWCH_W  $end
$var parameter 32 Z.   WCH_W  $end
$var parameter 32 [.   BCH_W  $end
$var parameter 32 \.   ARCH_W  $end
$var parameter 32 ].   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ^.   i_awvalid  $end
$var reg       1 _.   i_awready  $end
$var wire     27 `.   i_awch [26:0] $end
$var wire      1 a.   i_wvalid  $end
$var reg       1 b.   i_wready  $end
$var wire      1 c.   i_wlast  $end
$var wire     36 d.   i_wch [35:0] $end
$var reg       1 e.   i_bvalid  $end
$var wire      1 f.   i_bready  $end
$var reg      10 g.   i_bch [9:0] $end
$var wire      1 h.   i_arvalid  $end
$var reg       1 i.   i_arready  $end
$var wire     27 j.   i_arch [26:0] $end
$var reg       1 k.   i_rvalid  $end
$var wire      1 l.   i_rready  $end
$var reg       1 m.   i_rlast  $end
$var reg      42 n.   i_rch [41:0] $end
$var reg       4 o.   o_awvalid [3:0] $end
$var wire      4 p.   o_awready [3:0] $end
$var reg      27 q.   o_awch [26:0] $end
$var reg       4 r.   o_wvalid [3:0] $end
$var wire      4 s.   o_wready [3:0] $end
$var reg       4 t.   o_wlast [3:0] $end
$var reg      36 u.   o_wch [35:0] $end
$var wire      4 v.   o_bvalid [3:0] $end
$var reg       4 w.   o_bready [3:0] $end
$var wire     40 x.   o_bch [39:0] $end
$var reg       4 y.   o_arvalid [3:0] $end
$var wire      4 z.   o_arready [3:0] $end
$var reg      27 {.   o_arch [26:0] $end
$var wire      4 |.   o_rvalid [3:0] $end
$var reg       4 }.   o_rready [3:0] $end
$var wire      4 ~.   o_rlast [3:0] $end
$var wire     168 !/   o_rch [167:0] $end
$var reg       1 "/   wch_full  $end
$var reg       1 #/   wch_empty  $end
$var reg       4 $/   slv_aw_targeted [3:0] $end
$var reg       4 %/   slv_w_targeted [3:0] $end
$var reg       4 &/   slv_ar_targeted [3:0] $end
$var reg       1 '/   bch_en  $end
$var reg       4 (/   bch_req [3:0] $end
$var reg       4 )/   bch_grant [3:0] $end
$var reg       1 */   rch_en  $end
$var reg       4 +/   rch_req [3:0] $end
$var reg       4 ,/   rch_grant [3:0] $end
$var reg      16 -/   slv0_start_addr [15:0] $end
$var reg      16 ./   slv0_end_addr [15:0] $end
$var reg      16 //   slv1_start_addr [15:0] $end
$var reg      16 0/   slv1_end_addr [15:0] $end
$var reg      16 1/   slv2_start_addr [15:0] $end
$var reg      16 2/   slv2_end_addr [15:0] $end
$var reg      16 3/   slv3_start_addr [15:0] $end
$var reg      16 4/   slv3_end_addr [15:0] $end
$var reg       1 5/   w_misrouting  $end
$var reg       1 6/   r_misrouting  $end
$var reg       1 7/   bch_mr_full  $end
$var reg       1 8/   bch_mr_empty  $end
$var reg       8 9/   bch_mr_id [7:0] $end
$var reg       1 :/   rch_mr_full  $end
$var reg       1 ;/   rch_mr_empty  $end
$var reg      16 </   rch_mr_info [15:0] $end
$var reg       8 =/   rch_mr_id [7:0] $end
$var reg       8 >/   rch_mr_len [7:0] $end
$var reg       8 ?/   rlen [7:0] $end
$var reg       1 @/   rch_running  $end
$var reg       4 A/   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 B/   PASS_THRU  $end
$var parameter 32 C/   ADDR_WIDTH  $end
$var parameter 32 D/   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 E/   data_in [3:0] $end
$var wire      1 F/   push  $end
$var reg       1 G/   full  $end
$var reg       4 H/   data_out [3:0] $end
$var wire      1 I/   pull  $end
$var reg       1 J/   empty  $end
$var reg       1 K/   wr_en  $end
$var reg       9 L/   wrptr [8:0] $end
$var reg       9 M/   rdptr [8:0] $end
$var reg       1 N/   empty_flag  $end
$var reg       1 O/   full_flag  $end
$var reg       1 P/   pass_thru  $end
$var reg       4 Q/   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 R/   ADDR_WIDTH  $end
$var parameter 32 S/   DATA_WIDTH  $end
$var parameter 32 T/   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 U/   wr_en  $end
$var wire      8 V/   addr_in [7:0] $end
$var wire      4 E/   data_in [3:0] $end
$var wire      8 W/   addr_out [7:0] $end
$var reg       4 X/   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 Y/   PASS_THRU  $end
$var parameter 32 Z/   ADDR_WIDTH  $end
$var parameter 32 [/   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 \/   data_in [7:0] $end
$var wire      1 ]/   push  $end
$var reg       1 ^/   full  $end
$var reg       8 _/   data_out [7:0] $end
$var wire      1 `/   pull  $end
$var reg       1 a/   empty  $end
$var reg       1 b/   wr_en  $end
$var reg       3 c/   wrptr [2:0] $end
$var reg       3 d/   rdptr [2:0] $end
$var reg       1 e/   empty_flag  $end
$var reg       1 f/   full_flag  $end
$var reg       1 g/   pass_thru  $end
$var reg       8 h/   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 i/   ADDR_WIDTH  $end
$var parameter 32 j/   DATA_WIDTH  $end
$var parameter 32 k/   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 l/   wr_en  $end
$var wire      2 m/   addr_in [1:0] $end
$var wire      8 \/   data_in [7:0] $end
$var wire      2 n/   addr_out [1:0] $end
$var reg       8 o/   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 p/   REQ_NB  $end
$var parameter 32 q/   REQ0_PRIORITY  $end
$var parameter 32 r/   REQ1_PRIORITY  $end
$var parameter 32 s/   REQ2_PRIORITY  $end
$var parameter 32 t/   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u/   en  $end
$var wire      4 v/   req [3:0] $end
$var reg       4 w/   grant [3:0] $end
$var reg       1 x/   p0_active  $end
$var reg       1 y/   p1_active  $end
$var reg       1 z/   p2_active  $end
$var reg       1 {/   p3_active  $end
$var reg       4 |/   req_p0 [3:0] $end
$var reg       4 }/   req_p1 [3:0] $end
$var reg       4 ~/   req_p2 [3:0] $end
$var reg       4 !0   req_p3 [3:0] $end
$var reg       4 "0   grant_p0 [3:0] $end
$var reg       4 #0   grant_p1 [3:0] $end
$var reg       4 $0   grant_p2 [3:0] $end
$var reg       4 %0   grant_p3 [3:0] $end
$var reg       1 &0   p0  $end
$var reg       1 '0   p1  $end
$var reg       1 (0   p2  $end
$var reg       1 )0   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 *0   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 +0   en  $end
$var wire      4 ,0   req [3:0] $end
$var reg       4 -0   grant [3:0] $end
$var reg       4 .0   mask [3:0] $end
$var reg       4 /0   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 00   PASS_THRU  $end
$var parameter 32 10   ADDR_WIDTH  $end
$var parameter 32 20   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 30   data_in [15:0] $end
$var wire      1 40   push  $end
$var reg       1 50   full  $end
$var reg      16 60   data_out [15:0] $end
$var wire      1 70   pull  $end
$var reg       1 80   empty  $end
$var reg       1 90   wr_en  $end
$var reg       5 :0   wrptr [4:0] $end
$var reg       5 ;0   rdptr [4:0] $end
$var reg       1 <0   empty_flag  $end
$var reg       1 =0   full_flag  $end
$var reg       1 >0   pass_thru  $end
$var reg      16 ?0   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 @0   ADDR_WIDTH  $end
$var parameter 32 A0   DATA_WIDTH  $end
$var parameter 32 B0   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 C0   wr_en  $end
$var wire      4 D0   addr_in [3:0] $end
$var wire     16 30   data_in [15:0] $end
$var wire      4 E0   addr_out [3:0] $end
$var reg      16 F0   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 G0   REQ_NB  $end
$var parameter 32 H0   REQ0_PRIORITY  $end
$var parameter 32 I0   REQ1_PRIORITY  $end
$var parameter 32 J0   REQ2_PRIORITY  $end
$var parameter 32 K0   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 L0   en  $end
$var wire      4 M0   req [3:0] $end
$var reg       4 N0   grant [3:0] $end
$var reg       1 O0   p0_active  $end
$var reg       1 P0   p1_active  $end
$var reg       1 Q0   p2_active  $end
$var reg       1 R0   p3_active  $end
$var reg       4 S0   req_p0 [3:0] $end
$var reg       4 T0   req_p1 [3:0] $end
$var reg       4 U0   req_p2 [3:0] $end
$var reg       4 V0   req_p3 [3:0] $end
$var reg       4 W0   grant_p0 [3:0] $end
$var reg       4 X0   grant_p1 [3:0] $end
$var reg       4 Y0   grant_p2 [3:0] $end
$var reg       4 Z0   grant_p3 [3:0] $end
$var reg       1 [0   p0  $end
$var reg       1 \0   p1  $end
$var reg       1 ]0   p2  $end
$var reg       1 ^0   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 _0   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 `0   en  $end
$var wire      4 a0   req [3:0] $end
$var reg       4 b0   grant [3:0] $end
$var reg       4 c0   mask [3:0] $end
$var reg       4 d0   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[1] $end
$var parameter 32 e0   i [31:0] $end
$var reg       1 f0   pipe_awvalid  $end
$var reg       1 g0   pipe_awready  $end
$var reg      27 h0   pipe_awch [26:0] $end
$var reg       1 i0   pipe_wvalid  $end
$var reg       1 j0   pipe_wready  $end
$var reg       1 k0   pipe_wlast  $end
$var reg      36 l0   pipe_wch [35:0] $end
$var reg       1 m0   pipe_bvalid  $end
$var reg       1 n0   pipe_bready  $end
$var reg      10 o0   pipe_bch [9:0] $end
$var reg       1 p0   pipe_arvalid  $end
$var reg       1 q0   pipe_arready  $end
$var reg      27 r0   pipe_arch [26:0] $end
$var reg       1 s0   pipe_rvalid  $end
$var reg       1 t0   pipe_rready  $end
$var reg       1 u0   pipe_rlast  $end
$var reg      42 v0   pipe_rch [41:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 w0   DATA_BUS_W  $end
$var parameter 32 x0   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w,   i_valid  $end
$var reg       1 y0   i_ready  $end
$var wire     27 z0   i_data [26:0] $end
$var reg       1 {0   o_valid  $end
$var wire      1 |0   o_ready  $end
$var reg      27 }0   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 ~0   DATA_BUS_W  $end
$var parameter 32 !1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 },   i_valid  $end
$var reg       1 "1   i_ready  $end
$var wire     37 #1   i_data [36:0] $end
$var reg       1 $1   o_valid  $end
$var wire      1 %1   o_ready  $end
$var reg      37 &1   o_data [36:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 '1   DATA_BUS_W  $end
$var parameter 32 (1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 )1   i_valid  $end
$var reg       1 *1   i_ready  $end
$var wire     10 +1   i_data [9:0] $end
$var reg       1 ,1   o_valid  $end
$var wire      1 '-   o_ready  $end
$var reg      10 -1   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 .1   DATA_BUS_W  $end
$var parameter 32 /1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ,-   i_valid  $end
$var reg       1 01   i_ready  $end
$var wire     27 11   i_data [26:0] $end
$var reg       1 21   o_valid  $end
$var wire      1 31   o_ready  $end
$var reg      27 41   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 51   DATA_BUS_W  $end
$var parameter 32 61   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 71   i_valid  $end
$var reg       1 81   i_ready  $end
$var wire     43 91   i_data [42:0] $end
$var reg       1 :1   o_valid  $end
$var wire      1 3-   o_ready  $end
$var reg      43 ;1   o_data [42:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 <1   AXI_ADDR_W  $end
$var parameter 32 =1   AXI_ID_W  $end
$var parameter 32 >1   AXI_SIGNALING  $end
$var parameter 32 ?1   SLV_NB  $end
$var parameter 32 @1   TIMEOUT_ENABLE  $end
$var parameter  4 A1   MST_ROUTES  $end
$var parameter 32 B1   SLV0_START_ADDR  $end
$var parameter 32 C1   SLV0_END_ADDR  $end
$var parameter 32 D1   SLV1_START_ADDR  $end
$var parameter 32 E1   SLV1_END_ADDR  $end
$var parameter 32 F1   SLV2_START_ADDR  $end
$var parameter 32 G1   SLV2_END_ADDR  $end
$var parameter 32 H1   SLV3_START_ADDR  $end
$var parameter 32 I1   SLV3_END_ADDR  $end
$var parameter 32 J1   AWCH_W  $end
$var parameter 32 K1   WCH_W  $end
$var parameter 32 L1   BCH_W  $end
$var parameter 32 M1   ARCH_W  $end
$var parameter 32 N1   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 O1   i_awvalid  $end
$var reg       1 P1   i_awready  $end
$var wire     27 Q1   i_awch [26:0] $end
$var wire      1 R1   i_wvalid  $end
$var reg       1 S1   i_wready  $end
$var wire      1 T1   i_wlast  $end
$var wire     36 U1   i_wch [35:0] $end
$var reg       1 V1   i_bvalid  $end
$var wire      1 W1   i_bready  $end
$var reg      10 X1   i_bch [9:0] $end
$var wire      1 Y1   i_arvalid  $end
$var reg       1 Z1   i_arready  $end
$var wire     27 [1   i_arch [26:0] $end
$var reg       1 \1   i_rvalid  $end
$var wire      1 ]1   i_rready  $end
$var reg       1 ^1   i_rlast  $end
$var reg      42 _1   i_rch [41:0] $end
$var reg       4 `1   o_awvalid [3:0] $end
$var wire      4 a1   o_awready [3:0] $end
$var reg      27 b1   o_awch [26:0] $end
$var reg       4 c1   o_wvalid [3:0] $end
$var wire      4 d1   o_wready [3:0] $end
$var reg       4 e1   o_wlast [3:0] $end
$var reg      36 f1   o_wch [35:0] $end
$var wire      4 g1   o_bvalid [3:0] $end
$var reg       4 h1   o_bready [3:0] $end
$var wire     40 i1   o_bch [39:0] $end
$var reg       4 j1   o_arvalid [3:0] $end
$var wire      4 k1   o_arready [3:0] $end
$var reg      27 l1   o_arch [26:0] $end
$var wire      4 m1   o_rvalid [3:0] $end
$var reg       4 n1   o_rready [3:0] $end
$var wire      4 o1   o_rlast [3:0] $end
$var wire     168 p1   o_rch [167:0] $end
$var reg       1 q1   wch_full  $end
$var reg       1 r1   wch_empty  $end
$var reg       4 s1   slv_aw_targeted [3:0] $end
$var reg       4 t1   slv_w_targeted [3:0] $end
$var reg       4 u1   slv_ar_targeted [3:0] $end
$var reg       1 v1   bch_en  $end
$var reg       4 w1   bch_req [3:0] $end
$var reg       4 x1   bch_grant [3:0] $end
$var reg       1 y1   rch_en  $end
$var reg       4 z1   rch_req [3:0] $end
$var reg       4 {1   rch_grant [3:0] $end
$var reg      16 |1   slv0_start_addr [15:0] $end
$var reg      16 }1   slv0_end_addr [15:0] $end
$var reg      16 ~1   slv1_start_addr [15:0] $end
$var reg      16 !2   slv1_end_addr [15:0] $end
$var reg      16 "2   slv2_start_addr [15:0] $end
$var reg      16 #2   slv2_end_addr [15:0] $end
$var reg      16 $2   slv3_start_addr [15:0] $end
$var reg      16 %2   slv3_end_addr [15:0] $end
$var reg       1 &2   w_misrouting  $end
$var reg       1 '2   r_misrouting  $end
$var reg       1 (2   bch_mr_full  $end
$var reg       1 )2   bch_mr_empty  $end
$var reg       8 *2   bch_mr_id [7:0] $end
$var reg       1 +2   rch_mr_full  $end
$var reg       1 ,2   rch_mr_empty  $end
$var reg      16 -2   rch_mr_info [15:0] $end
$var reg       8 .2   rch_mr_id [7:0] $end
$var reg       8 /2   rch_mr_len [7:0] $end
$var reg       8 02   rlen [7:0] $end
$var reg       1 12   rch_running  $end
$var reg       4 22   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 32   PASS_THRU  $end
$var parameter 32 42   ADDR_WIDTH  $end
$var parameter 32 52   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 62   data_in [3:0] $end
$var wire      1 72   push  $end
$var reg       1 82   full  $end
$var reg       4 92   data_out [3:0] $end
$var wire      1 :2   pull  $end
$var reg       1 ;2   empty  $end
$var reg       1 <2   wr_en  $end
$var reg       9 =2   wrptr [8:0] $end
$var reg       9 >2   rdptr [8:0] $end
$var reg       1 ?2   empty_flag  $end
$var reg       1 @2   full_flag  $end
$var reg       1 A2   pass_thru  $end
$var reg       4 B2   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 C2   ADDR_WIDTH  $end
$var parameter 32 D2   DATA_WIDTH  $end
$var parameter 32 E2   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 F2   wr_en  $end
$var wire      8 G2   addr_in [7:0] $end
$var wire      4 62   data_in [3:0] $end
$var wire      8 H2   addr_out [7:0] $end
$var reg       4 I2   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 J2   PASS_THRU  $end
$var parameter 32 K2   ADDR_WIDTH  $end
$var parameter 32 L2   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 M2   data_in [7:0] $end
$var wire      1 N2   push  $end
$var reg       1 O2   full  $end
$var reg       8 P2   data_out [7:0] $end
$var wire      1 Q2   pull  $end
$var reg       1 R2   empty  $end
$var reg       1 S2   wr_en  $end
$var reg       3 T2   wrptr [2:0] $end
$var reg       3 U2   rdptr [2:0] $end
$var reg       1 V2   empty_flag  $end
$var reg       1 W2   full_flag  $end
$var reg       1 X2   pass_thru  $end
$var reg       8 Y2   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 Z2   ADDR_WIDTH  $end
$var parameter 32 [2   DATA_WIDTH  $end
$var parameter 32 \2   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 ]2   wr_en  $end
$var wire      2 ^2   addr_in [1:0] $end
$var wire      8 M2   data_in [7:0] $end
$var wire      2 _2   addr_out [1:0] $end
$var reg       8 `2   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 a2   REQ_NB  $end
$var parameter 32 b2   REQ0_PRIORITY  $end
$var parameter 32 c2   REQ1_PRIORITY  $end
$var parameter 32 d2   REQ2_PRIORITY  $end
$var parameter 32 e2   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 f2   en  $end
$var wire      4 g2   req [3:0] $end
$var reg       4 h2   grant [3:0] $end
$var reg       1 i2   p0_active  $end
$var reg       1 j2   p1_active  $end
$var reg       1 k2   p2_active  $end
$var reg       1 l2   p3_active  $end
$var reg       4 m2   req_p0 [3:0] $end
$var reg       4 n2   req_p1 [3:0] $end
$var reg       4 o2   req_p2 [3:0] $end
$var reg       4 p2   req_p3 [3:0] $end
$var reg       4 q2   grant_p0 [3:0] $end
$var reg       4 r2   grant_p1 [3:0] $end
$var reg       4 s2   grant_p2 [3:0] $end
$var reg       4 t2   grant_p3 [3:0] $end
$var reg       1 u2   p0  $end
$var reg       1 v2   p1  $end
$var reg       1 w2   p2  $end
$var reg       1 x2   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 y2   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 z2   en  $end
$var wire      4 {2   req [3:0] $end
$var reg       4 |2   grant [3:0] $end
$var reg       4 }2   mask [3:0] $end
$var reg       4 ~2   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 !3   PASS_THRU  $end
$var parameter 32 "3   ADDR_WIDTH  $end
$var parameter 32 #3   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 $3   data_in [15:0] $end
$var wire      1 %3   push  $end
$var reg       1 &3   full  $end
$var reg      16 '3   data_out [15:0] $end
$var wire      1 (3   pull  $end
$var reg       1 )3   empty  $end
$var reg       1 *3   wr_en  $end
$var reg       5 +3   wrptr [4:0] $end
$var reg       5 ,3   rdptr [4:0] $end
$var reg       1 -3   empty_flag  $end
$var reg       1 .3   full_flag  $end
$var reg       1 /3   pass_thru  $end
$var reg      16 03   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 13   ADDR_WIDTH  $end
$var parameter 32 23   DATA_WIDTH  $end
$var parameter 32 33   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 43   wr_en  $end
$var wire      4 53   addr_in [3:0] $end
$var wire     16 $3   data_in [15:0] $end
$var wire      4 63   addr_out [3:0] $end
$var reg      16 73   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 83   REQ_NB  $end
$var parameter 32 93   REQ0_PRIORITY  $end
$var parameter 32 :3   REQ1_PRIORITY  $end
$var parameter 32 ;3   REQ2_PRIORITY  $end
$var parameter 32 <3   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 =3   en  $end
$var wire      4 >3   req [3:0] $end
$var reg       4 ?3   grant [3:0] $end
$var reg       1 @3   p0_active  $end
$var reg       1 A3   p1_active  $end
$var reg       1 B3   p2_active  $end
$var reg       1 C3   p3_active  $end
$var reg       4 D3   req_p0 [3:0] $end
$var reg       4 E3   req_p1 [3:0] $end
$var reg       4 F3   req_p2 [3:0] $end
$var reg       4 G3   req_p3 [3:0] $end
$var reg       4 H3   grant_p0 [3:0] $end
$var reg       4 I3   grant_p1 [3:0] $end
$var reg       4 J3   grant_p2 [3:0] $end
$var reg       4 K3   grant_p3 [3:0] $end
$var reg       1 L3   p0  $end
$var reg       1 M3   p1  $end
$var reg       1 N3   p2  $end
$var reg       1 O3   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 P3   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Q3   en  $end
$var wire      4 R3   req [3:0] $end
$var reg       4 S3   grant [3:0] $end
$var reg       4 T3   mask [3:0] $end
$var reg       4 U3   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[2] $end
$var parameter 32 V3   i [31:0] $end
$var reg       1 W3   pipe_awvalid  $end
$var reg       1 X3   pipe_awready  $end
$var reg      27 Y3   pipe_awch [26:0] $end
$var reg       1 Z3   pipe_wvalid  $end
$var reg       1 [3   pipe_wready  $end
$var reg       1 \3   pipe_wlast  $end
$var reg      36 ]3   pipe_wch [35:0] $end
$var reg       1 ^3   pipe_bvalid  $end
$var reg       1 _3   pipe_bready  $end
$var reg      10 `3   pipe_bch [9:0] $end
$var reg       1 a3   pipe_arvalid  $end
$var reg       1 b3   pipe_arready  $end
$var reg      27 c3   pipe_arch [26:0] $end
$var reg       1 d3   pipe_rvalid  $end
$var reg       1 e3   pipe_rready  $end
$var reg       1 f3   pipe_rlast  $end
$var reg      42 g3   pipe_rch [41:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 h3   DATA_BUS_W  $end
$var parameter 32 i3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 v,   i_valid  $end
$var reg       1 j3   i_ready  $end
$var wire     27 k3   i_data [26:0] $end
$var reg       1 l3   o_valid  $end
$var wire      1 m3   o_ready  $end
$var reg      27 n3   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 o3   DATA_BUS_W  $end
$var parameter 32 p3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 |,   i_valid  $end
$var reg       1 q3   i_ready  $end
$var wire     37 r3   i_data [36:0] $end
$var reg       1 s3   o_valid  $end
$var wire      1 t3   o_ready  $end
$var reg      37 u3   o_data [36:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 v3   DATA_BUS_W  $end
$var parameter 32 w3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 x3   i_valid  $end
$var reg       1 y3   i_ready  $end
$var wire     10 z3   i_data [9:0] $end
$var reg       1 {3   o_valid  $end
$var wire      1 &-   o_ready  $end
$var reg      10 |3   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 }3   DATA_BUS_W  $end
$var parameter 32 ~3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 +-   i_valid  $end
$var reg       1 !4   i_ready  $end
$var wire     27 "4   i_data [26:0] $end
$var reg       1 #4   o_valid  $end
$var wire      1 $4   o_ready  $end
$var reg      27 %4   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 &4   DATA_BUS_W  $end
$var parameter 32 '4   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 (4   i_valid  $end
$var reg       1 )4   i_ready  $end
$var wire     43 *4   i_data [42:0] $end
$var reg       1 +4   o_valid  $end
$var wire      1 2-   o_ready  $end
$var reg      43 ,4   o_data [42:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 -4   AXI_ADDR_W  $end
$var parameter 32 .4   AXI_ID_W  $end
$var parameter 32 /4   AXI_SIGNALING  $end
$var parameter 32 04   SLV_NB  $end
$var parameter 32 14   TIMEOUT_ENABLE  $end
$var parameter  4 24   MST_ROUTES  $end
$var parameter 32 34   SLV0_START_ADDR  $end
$var parameter 32 44   SLV0_END_ADDR  $end
$var parameter 32 54   SLV1_START_ADDR  $end
$var parameter 32 64   SLV1_END_ADDR  $end
$var parameter 32 74   SLV2_START_ADDR  $end
$var parameter 32 84   SLV2_END_ADDR  $end
$var parameter 32 94   SLV3_START_ADDR  $end
$var parameter 32 :4   SLV3_END_ADDR  $end
$var parameter 32 ;4   AWCH_W  $end
$var parameter 32 <4   WCH_W  $end
$var parameter 32 =4   BCH_W  $end
$var parameter 32 >4   ARCH_W  $end
$var parameter 32 ?4   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 @4   i_awvalid  $end
$var reg       1 A4   i_awready  $end
$var wire     27 B4   i_awch [26:0] $end
$var wire      1 C4   i_wvalid  $end
$var reg       1 D4   i_wready  $end
$var wire      1 E4   i_wlast  $end
$var wire     36 F4   i_wch [35:0] $end
$var reg       1 G4   i_bvalid  $end
$var wire      1 H4   i_bready  $end
$var reg      10 I4   i_bch [9:0] $end
$var wire      1 J4   i_arvalid  $end
$var reg       1 K4   i_arready  $end
$var wire     27 L4   i_arch [26:0] $end
$var reg       1 M4   i_rvalid  $end
$var wire      1 N4   i_rready  $end
$var reg       1 O4   i_rlast  $end
$var reg      42 P4   i_rch [41:0] $end
$var reg       4 Q4   o_awvalid [3:0] $end
$var wire      4 R4   o_awready [3:0] $end
$var reg      27 S4   o_awch [26:0] $end
$var reg       4 T4   o_wvalid [3:0] $end
$var wire      4 U4   o_wready [3:0] $end
$var reg       4 V4   o_wlast [3:0] $end
$var reg      36 W4   o_wch [35:0] $end
$var wire      4 X4   o_bvalid [3:0] $end
$var reg       4 Y4   o_bready [3:0] $end
$var wire     40 Z4   o_bch [39:0] $end
$var reg       4 [4   o_arvalid [3:0] $end
$var wire      4 \4   o_arready [3:0] $end
$var reg      27 ]4   o_arch [26:0] $end
$var wire      4 ^4   o_rvalid [3:0] $end
$var reg       4 _4   o_rready [3:0] $end
$var wire      4 `4   o_rlast [3:0] $end
$var wire     168 a4   o_rch [167:0] $end
$var reg       1 b4   wch_full  $end
$var reg       1 c4   wch_empty  $end
$var reg       4 d4   slv_aw_targeted [3:0] $end
$var reg       4 e4   slv_w_targeted [3:0] $end
$var reg       4 f4   slv_ar_targeted [3:0] $end
$var reg       1 g4   bch_en  $end
$var reg       4 h4   bch_req [3:0] $end
$var reg       4 i4   bch_grant [3:0] $end
$var reg       1 j4   rch_en  $end
$var reg       4 k4   rch_req [3:0] $end
$var reg       4 l4   rch_grant [3:0] $end
$var reg      16 m4   slv0_start_addr [15:0] $end
$var reg      16 n4   slv0_end_addr [15:0] $end
$var reg      16 o4   slv1_start_addr [15:0] $end
$var reg      16 p4   slv1_end_addr [15:0] $end
$var reg      16 q4   slv2_start_addr [15:0] $end
$var reg      16 r4   slv2_end_addr [15:0] $end
$var reg      16 s4   slv3_start_addr [15:0] $end
$var reg      16 t4   slv3_end_addr [15:0] $end
$var reg       1 u4   w_misrouting  $end
$var reg       1 v4   r_misrouting  $end
$var reg       1 w4   bch_mr_full  $end
$var reg       1 x4   bch_mr_empty  $end
$var reg       8 y4   bch_mr_id [7:0] $end
$var reg       1 z4   rch_mr_full  $end
$var reg       1 {4   rch_mr_empty  $end
$var reg      16 |4   rch_mr_info [15:0] $end
$var reg       8 }4   rch_mr_id [7:0] $end
$var reg       8 ~4   rch_mr_len [7:0] $end
$var reg       8 !5   rlen [7:0] $end
$var reg       1 "5   rch_running  $end
$var reg       4 #5   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 $5   PASS_THRU  $end
$var parameter 32 %5   ADDR_WIDTH  $end
$var parameter 32 &5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 '5   data_in [3:0] $end
$var wire      1 (5   push  $end
$var reg       1 )5   full  $end
$var reg       4 *5   data_out [3:0] $end
$var wire      1 +5   pull  $end
$var reg       1 ,5   empty  $end
$var reg       1 -5   wr_en  $end
$var reg       9 .5   wrptr [8:0] $end
$var reg       9 /5   rdptr [8:0] $end
$var reg       1 05   empty_flag  $end
$var reg       1 15   full_flag  $end
$var reg       1 25   pass_thru  $end
$var reg       4 35   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 45   ADDR_WIDTH  $end
$var parameter 32 55   DATA_WIDTH  $end
$var parameter 32 65   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 75   wr_en  $end
$var wire      8 85   addr_in [7:0] $end
$var wire      4 '5   data_in [3:0] $end
$var wire      8 95   addr_out [7:0] $end
$var reg       4 :5   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 ;5   PASS_THRU  $end
$var parameter 32 <5   ADDR_WIDTH  $end
$var parameter 32 =5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 >5   data_in [7:0] $end
$var wire      1 ?5   push  $end
$var reg       1 @5   full  $end
$var reg       8 A5   data_out [7:0] $end
$var wire      1 B5   pull  $end
$var reg       1 C5   empty  $end
$var reg       1 D5   wr_en  $end
$var reg       3 E5   wrptr [2:0] $end
$var reg       3 F5   rdptr [2:0] $end
$var reg       1 G5   empty_flag  $end
$var reg       1 H5   full_flag  $end
$var reg       1 I5   pass_thru  $end
$var reg       8 J5   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 K5   ADDR_WIDTH  $end
$var parameter 32 L5   DATA_WIDTH  $end
$var parameter 32 M5   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 N5   wr_en  $end
$var wire      2 O5   addr_in [1:0] $end
$var wire      8 >5   data_in [7:0] $end
$var wire      2 P5   addr_out [1:0] $end
$var reg       8 Q5   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 R5   REQ_NB  $end
$var parameter 32 S5   REQ0_PRIORITY  $end
$var parameter 32 T5   REQ1_PRIORITY  $end
$var parameter 32 U5   REQ2_PRIORITY  $end
$var parameter 32 V5   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 W5   en  $end
$var wire      4 X5   req [3:0] $end
$var reg       4 Y5   grant [3:0] $end
$var reg       1 Z5   p0_active  $end
$var reg       1 [5   p1_active  $end
$var reg       1 \5   p2_active  $end
$var reg       1 ]5   p3_active  $end
$var reg       4 ^5   req_p0 [3:0] $end
$var reg       4 _5   req_p1 [3:0] $end
$var reg       4 `5   req_p2 [3:0] $end
$var reg       4 a5   req_p3 [3:0] $end
$var reg       4 b5   grant_p0 [3:0] $end
$var reg       4 c5   grant_p1 [3:0] $end
$var reg       4 d5   grant_p2 [3:0] $end
$var reg       4 e5   grant_p3 [3:0] $end
$var reg       1 f5   p0  $end
$var reg       1 g5   p1  $end
$var reg       1 h5   p2  $end
$var reg       1 i5   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 j5   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 k5   en  $end
$var wire      4 l5   req [3:0] $end
$var reg       4 m5   grant [3:0] $end
$var reg       4 n5   mask [3:0] $end
$var reg       4 o5   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 p5   PASS_THRU  $end
$var parameter 32 q5   ADDR_WIDTH  $end
$var parameter 32 r5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 s5   data_in [15:0] $end
$var wire      1 t5   push  $end
$var reg       1 u5   full  $end
$var reg      16 v5   data_out [15:0] $end
$var wire      1 w5   pull  $end
$var reg       1 x5   empty  $end
$var reg       1 y5   wr_en  $end
$var reg       5 z5   wrptr [4:0] $end
$var reg       5 {5   rdptr [4:0] $end
$var reg       1 |5   empty_flag  $end
$var reg       1 }5   full_flag  $end
$var reg       1 ~5   pass_thru  $end
$var reg      16 !6   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 "6   ADDR_WIDTH  $end
$var parameter 32 #6   DATA_WIDTH  $end
$var parameter 32 $6   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 %6   wr_en  $end
$var wire      4 &6   addr_in [3:0] $end
$var wire     16 s5   data_in [15:0] $end
$var wire      4 '6   addr_out [3:0] $end
$var reg      16 (6   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 )6   REQ_NB  $end
$var parameter 32 *6   REQ0_PRIORITY  $end
$var parameter 32 +6   REQ1_PRIORITY  $end
$var parameter 32 ,6   REQ2_PRIORITY  $end
$var parameter 32 -6   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 .6   en  $end
$var wire      4 /6   req [3:0] $end
$var reg       4 06   grant [3:0] $end
$var reg       1 16   p0_active  $end
$var reg       1 26   p1_active  $end
$var reg       1 36   p2_active  $end
$var reg       1 46   p3_active  $end
$var reg       4 56   req_p0 [3:0] $end
$var reg       4 66   req_p1 [3:0] $end
$var reg       4 76   req_p2 [3:0] $end
$var reg       4 86   req_p3 [3:0] $end
$var reg       4 96   grant_p0 [3:0] $end
$var reg       4 :6   grant_p1 [3:0] $end
$var reg       4 ;6   grant_p2 [3:0] $end
$var reg       4 <6   grant_p3 [3:0] $end
$var reg       1 =6   p0  $end
$var reg       1 >6   p1  $end
$var reg       1 ?6   p2  $end
$var reg       1 @6   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 A6   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 B6   en  $end
$var wire      4 C6   req [3:0] $end
$var reg       4 D6   grant [3:0] $end
$var reg       4 E6   mask [3:0] $end
$var reg       4 F6   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[3] $end
$var parameter 32 G6   i [31:0] $end
$var reg       1 H6   pipe_awvalid  $end
$var reg       1 I6   pipe_awready  $end
$var reg      27 J6   pipe_awch [26:0] $end
$var reg       1 K6   pipe_wvalid  $end
$var reg       1 L6   pipe_wready  $end
$var reg       1 M6   pipe_wlast  $end
$var reg      36 N6   pipe_wch [35:0] $end
$var reg       1 O6   pipe_bvalid  $end
$var reg       1 P6   pipe_bready  $end
$var reg      10 Q6   pipe_bch [9:0] $end
$var reg       1 R6   pipe_arvalid  $end
$var reg       1 S6   pipe_arready  $end
$var reg      27 T6   pipe_arch [26:0] $end
$var reg       1 U6   pipe_rvalid  $end
$var reg       1 V6   pipe_rready  $end
$var reg       1 W6   pipe_rlast  $end
$var reg      42 X6   pipe_rch [41:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 Y6   DATA_BUS_W  $end
$var parameter 32 Z6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u,   i_valid  $end
$var reg       1 [6   i_ready  $end
$var wire     27 \6   i_data [26:0] $end
$var reg       1 ]6   o_valid  $end
$var wire      1 ^6   o_ready  $end
$var reg      27 _6   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 `6   DATA_BUS_W  $end
$var parameter 32 a6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 {,   i_valid  $end
$var reg       1 b6   i_ready  $end
$var wire     37 c6   i_data [36:0] $end
$var reg       1 d6   o_valid  $end
$var wire      1 e6   o_ready  $end
$var reg      37 f6   o_data [36:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 g6   DATA_BUS_W  $end
$var parameter 32 h6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 i6   i_valid  $end
$var reg       1 j6   i_ready  $end
$var wire     10 k6   i_data [9:0] $end
$var reg       1 l6   o_valid  $end
$var wire      1 %-   o_ready  $end
$var reg      10 m6   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 n6   DATA_BUS_W  $end
$var parameter 32 o6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 *-   i_valid  $end
$var reg       1 p6   i_ready  $end
$var wire     27 q6   i_data [26:0] $end
$var reg       1 r6   o_valid  $end
$var wire      1 s6   o_ready  $end
$var reg      27 t6   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 u6   DATA_BUS_W  $end
$var parameter 32 v6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w6   i_valid  $end
$var reg       1 x6   i_ready  $end
$var wire     43 y6   i_data [42:0] $end
$var reg       1 z6   o_valid  $end
$var wire      1 1-   o_ready  $end
$var reg      43 {6   o_data [42:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 |6   AXI_ADDR_W  $end
$var parameter 32 }6   AXI_ID_W  $end
$var parameter 32 ~6   AXI_SIGNALING  $end
$var parameter 32 !7   SLV_NB  $end
$var parameter 32 "7   TIMEOUT_ENABLE  $end
$var parameter  4 #7   MST_ROUTES  $end
$var parameter 32 $7   SLV0_START_ADDR  $end
$var parameter 32 %7   SLV0_END_ADDR  $end
$var parameter 32 &7   SLV1_START_ADDR  $end
$var parameter 32 '7   SLV1_END_ADDR  $end
$var parameter 32 (7   SLV2_START_ADDR  $end
$var parameter 32 )7   SLV2_END_ADDR  $end
$var parameter 32 *7   SLV3_START_ADDR  $end
$var parameter 32 +7   SLV3_END_ADDR  $end
$var parameter 32 ,7   AWCH_W  $end
$var parameter 32 -7   WCH_W  $end
$var parameter 32 .7   BCH_W  $end
$var parameter 32 /7   ARCH_W  $end
$var parameter 32 07   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 17   i_awvalid  $end
$var reg       1 27   i_awready  $end
$var wire     27 37   i_awch [26:0] $end
$var wire      1 47   i_wvalid  $end
$var reg       1 57   i_wready  $end
$var wire      1 67   i_wlast  $end
$var wire     36 77   i_wch [35:0] $end
$var reg       1 87   i_bvalid  $end
$var wire      1 97   i_bready  $end
$var reg      10 :7   i_bch [9:0] $end
$var wire      1 ;7   i_arvalid  $end
$var reg       1 <7   i_arready  $end
$var wire     27 =7   i_arch [26:0] $end
$var reg       1 >7   i_rvalid  $end
$var wire      1 ?7   i_rready  $end
$var reg       1 @7   i_rlast  $end
$var reg      42 A7   i_rch [41:0] $end
$var reg       4 B7   o_awvalid [3:0] $end
$var wire      4 C7   o_awready [3:0] $end
$var reg      27 D7   o_awch [26:0] $end
$var reg       4 E7   o_wvalid [3:0] $end
$var wire      4 F7   o_wready [3:0] $end
$var reg       4 G7   o_wlast [3:0] $end
$var reg      36 H7   o_wch [35:0] $end
$var wire      4 I7   o_bvalid [3:0] $end
$var reg       4 J7   o_bready [3:0] $end
$var wire     40 K7   o_bch [39:0] $end
$var reg       4 L7   o_arvalid [3:0] $end
$var wire      4 M7   o_arready [3:0] $end
$var reg      27 N7   o_arch [26:0] $end
$var wire      4 O7   o_rvalid [3:0] $end
$var reg       4 P7   o_rready [3:0] $end
$var wire      4 Q7   o_rlast [3:0] $end
$var wire     168 R7   o_rch [167:0] $end
$var reg       1 S7   wch_full  $end
$var reg       1 T7   wch_empty  $end
$var reg       4 U7   slv_aw_targeted [3:0] $end
$var reg       4 V7   slv_w_targeted [3:0] $end
$var reg       4 W7   slv_ar_targeted [3:0] $end
$var reg       1 X7   bch_en  $end
$var reg       4 Y7   bch_req [3:0] $end
$var reg       4 Z7   bch_grant [3:0] $end
$var reg       1 [7   rch_en  $end
$var reg       4 \7   rch_req [3:0] $end
$var reg       4 ]7   rch_grant [3:0] $end
$var reg      16 ^7   slv0_start_addr [15:0] $end
$var reg      16 _7   slv0_end_addr [15:0] $end
$var reg      16 `7   slv1_start_addr [15:0] $end
$var reg      16 a7   slv1_end_addr [15:0] $end
$var reg      16 b7   slv2_start_addr [15:0] $end
$var reg      16 c7   slv2_end_addr [15:0] $end
$var reg      16 d7   slv3_start_addr [15:0] $end
$var reg      16 e7   slv3_end_addr [15:0] $end
$var reg       1 f7   w_misrouting  $end
$var reg       1 g7   r_misrouting  $end
$var reg       1 h7   bch_mr_full  $end
$var reg       1 i7   bch_mr_empty  $end
$var reg       8 j7   bch_mr_id [7:0] $end
$var reg       1 k7   rch_mr_full  $end
$var reg       1 l7   rch_mr_empty  $end
$var reg      16 m7   rch_mr_info [15:0] $end
$var reg       8 n7   rch_mr_id [7:0] $end
$var reg       8 o7   rch_mr_len [7:0] $end
$var reg       8 p7   rlen [7:0] $end
$var reg       1 q7   rch_running  $end
$var reg       4 r7   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 s7   PASS_THRU  $end
$var parameter 32 t7   ADDR_WIDTH  $end
$var parameter 32 u7   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 v7   data_in [3:0] $end
$var wire      1 w7   push  $end
$var reg       1 x7   full  $end
$var reg       4 y7   data_out [3:0] $end
$var wire      1 z7   pull  $end
$var reg       1 {7   empty  $end
$var reg       1 |7   wr_en  $end
$var reg       9 }7   wrptr [8:0] $end
$var reg       9 ~7   rdptr [8:0] $end
$var reg       1 !8   empty_flag  $end
$var reg       1 "8   full_flag  $end
$var reg       1 #8   pass_thru  $end
$var reg       4 $8   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 %8   ADDR_WIDTH  $end
$var parameter 32 &8   DATA_WIDTH  $end
$var parameter 32 '8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 (8   wr_en  $end
$var wire      8 )8   addr_in [7:0] $end
$var wire      4 v7   data_in [3:0] $end
$var wire      8 *8   addr_out [7:0] $end
$var reg       4 +8   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 ,8   PASS_THRU  $end
$var parameter 32 -8   ADDR_WIDTH  $end
$var parameter 32 .8   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      8 /8   data_in [7:0] $end
$var wire      1 08   push  $end
$var reg       1 18   full  $end
$var reg       8 28   data_out [7:0] $end
$var wire      1 38   pull  $end
$var reg       1 48   empty  $end
$var reg       1 58   wr_en  $end
$var reg       3 68   wrptr [2:0] $end
$var reg       3 78   rdptr [2:0] $end
$var reg       1 88   empty_flag  $end
$var reg       1 98   full_flag  $end
$var reg       1 :8   pass_thru  $end
$var reg       8 ;8   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 <8   ADDR_WIDTH  $end
$var parameter 32 =8   DATA_WIDTH  $end
$var parameter 32 >8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 ?8   wr_en  $end
$var wire      2 @8   addr_in [1:0] $end
$var wire      8 /8   data_in [7:0] $end
$var wire      2 A8   addr_out [1:0] $end
$var reg       8 B8   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 C8   REQ_NB  $end
$var parameter 32 D8   REQ0_PRIORITY  $end
$var parameter 32 E8   REQ1_PRIORITY  $end
$var parameter 32 F8   REQ2_PRIORITY  $end
$var parameter 32 G8   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 H8   en  $end
$var wire      4 I8   req [3:0] $end
$var reg       4 J8   grant [3:0] $end
$var reg       1 K8   p0_active  $end
$var reg       1 L8   p1_active  $end
$var reg       1 M8   p2_active  $end
$var reg       1 N8   p3_active  $end
$var reg       4 O8   req_p0 [3:0] $end
$var reg       4 P8   req_p1 [3:0] $end
$var reg       4 Q8   req_p2 [3:0] $end
$var reg       4 R8   req_p3 [3:0] $end
$var reg       4 S8   grant_p0 [3:0] $end
$var reg       4 T8   grant_p1 [3:0] $end
$var reg       4 U8   grant_p2 [3:0] $end
$var reg       4 V8   grant_p3 [3:0] $end
$var reg       1 W8   p0  $end
$var reg       1 X8   p1  $end
$var reg       1 Y8   p2  $end
$var reg       1 Z8   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 [8   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 \8   en  $end
$var wire      4 ]8   req [3:0] $end
$var reg       4 ^8   grant [3:0] $end
$var reg       4 _8   mask [3:0] $end
$var reg       4 `8   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 a8   PASS_THRU  $end
$var parameter 32 b8   ADDR_WIDTH  $end
$var parameter 32 c8   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire     16 d8   data_in [15:0] $end
$var wire      1 e8   push  $end
$var reg       1 f8   full  $end
$var reg      16 g8   data_out [15:0] $end
$var wire      1 h8   pull  $end
$var reg       1 i8   empty  $end
$var reg       1 j8   wr_en  $end
$var reg       5 k8   wrptr [4:0] $end
$var reg       5 l8   rdptr [4:0] $end
$var reg       1 m8   empty_flag  $end
$var reg       1 n8   full_flag  $end
$var reg       1 o8   pass_thru  $end
$var reg      16 p8   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 q8   ADDR_WIDTH  $end
$var parameter 32 r8   DATA_WIDTH  $end
$var parameter 32 s8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 t8   wr_en  $end
$var wire      4 u8   addr_in [3:0] $end
$var wire     16 d8   data_in [15:0] $end
$var wire      4 v8   addr_out [3:0] $end
$var reg      16 w8   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 x8   REQ_NB  $end
$var parameter 32 y8   REQ0_PRIORITY  $end
$var parameter 32 z8   REQ1_PRIORITY  $end
$var parameter 32 {8   REQ2_PRIORITY  $end
$var parameter 32 |8   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 }8   en  $end
$var wire      4 ~8   req [3:0] $end
$var reg       4 !9   grant [3:0] $end
$var reg       1 "9   p0_active  $end
$var reg       1 #9   p1_active  $end
$var reg       1 $9   p2_active  $end
$var reg       1 %9   p3_active  $end
$var reg       4 &9   req_p0 [3:0] $end
$var reg       4 '9   req_p1 [3:0] $end
$var reg       4 (9   req_p2 [3:0] $end
$var reg       4 )9   req_p3 [3:0] $end
$var reg       4 *9   grant_p0 [3:0] $end
$var reg       4 +9   grant_p1 [3:0] $end
$var reg       4 ,9   grant_p2 [3:0] $end
$var reg       4 -9   grant_p3 [3:0] $end
$var reg       1 .9   p0  $end
$var reg       1 /9   p1  $end
$var reg       1 09   p2  $end
$var reg       1 19   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 29   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 39   en  $end
$var wire      4 49   req [3:0] $end
$var reg       4 59   grant [3:0] $end
$var reg       4 69   mask [3:0] $end
$var reg       4 79   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[0] $end
$var parameter 32 89   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 99   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 :9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 ;9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 <9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[1] $end
$var parameter 32 =9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 >9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 ?9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 @9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 A9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[2] $end
$var parameter 32 B9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 C9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 D9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 E9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 F9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[3] $end
$var parameter 32 G9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 H9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 I9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 J9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 K9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[0] $end
$var parameter 32 L9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 M9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 N9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 O9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 P9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[1] $end
$var parameter 32 Q9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 R9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 S9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 T9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 U9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[2] $end
$var parameter 32 V9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 W9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 X9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 Y9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 Z9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[3] $end
$var parameter 32 [9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 \9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 ]9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 ^9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 _9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[0] $end
$var parameter 32 `9   i [31:0] $end
$var reg       1 a9   pipe_awvalid  $end
$var reg       1 b9   pipe_awready  $end
$var reg      27 c9   pipe_awch [26:0] $end
$var reg       1 d9   pipe_wvalid  $end
$var reg       1 e9   pipe_wready  $end
$var reg       1 f9   pipe_wlast  $end
$var reg      36 g9   pipe_wch [35:0] $end
$var reg       1 h9   pipe_bvalid  $end
$var reg       1 i9   pipe_bready  $end
$var reg      10 j9   pipe_bch [9:0] $end
$var reg       1 k9   pipe_arvalid  $end
$var reg       1 l9   pipe_arready  $end
$var reg      27 m9   pipe_arch [26:0] $end
$var reg       1 n9   pipe_rvalid  $end
$var reg       1 o9   pipe_rready  $end
$var reg       1 p9   pipe_rlast  $end
$var reg      42 q9   pipe_rch [41:0] $end

$scope module mst_switch $end
$var parameter 32 r9   AXI_ID_W  $end
$var parameter 32 s9   AXI_DATA_W  $end
$var parameter 32 t9   MST_NB  $end
$var parameter 32 u9   TIMEOUT_ENABLE  $end
$var parameter  8 v9   MST0_ID_MASK [7:0] $end
$var parameter  8 w9   MST1_ID_MASK [7:0] $end
$var parameter  8 x9   MST2_ID_MASK [7:0] $end
$var parameter  8 y9   MST3_ID_MASK [7:0] $end
$var parameter 32 z9   MST0_PRIORITY  $end
$var parameter 32 {9   MST1_PRIORITY  $end
$var parameter 32 |9   MST2_PRIORITY  $end
$var parameter 32 }9   MST3_PRIORITY  $end
$var parameter 32 ~9   AWCH_W  $end
$var parameter 32 !:   WCH_W  $end
$var parameter 32 ":   BCH_W  $end
$var parameter 32 #:   ARCH_W  $end
$var parameter 32 $:   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 %:   i_awvalid [3:0] $end
$var reg       4 &:   i_awready [3:0] $end
$var wire     108 ':   i_awch [107:0] $end
$var wire      4 (:   i_wvalid [3:0] $end
$var reg       4 ):   i_wready [3:0] $end
$var wire      4 *:   i_wlast [3:0] $end
$var wire     144 +:   i_wch [143:0] $end
$var reg       4 ,:   i_bvalid [3:0] $end
$var wire      4 -:   i_bready [3:0] $end
$var reg      10 .:   i_bch [9:0] $end
$var wire      4 /:   i_arvalid [3:0] $end
$var reg       4 0:   i_arready [3:0] $end
$var wire     108 1:   i_arch [107:0] $end
$var reg       4 2:   i_rvalid [3:0] $end
$var wire      4 3:   i_rready [3:0] $end
$var reg       4 4:   i_rlast [3:0] $end
$var reg      42 5:   i_rch [41:0] $end
$var reg       1 6:   o_awvalid  $end
$var wire      1 7:   o_awready  $end
$var reg      27 8:   o_awch [26:0] $end
$var reg       1 9:   o_wvalid  $end
$var wire      1 ::   o_wready  $end
$var reg       1 ;:   o_wlast  $end
$var reg      36 <:   o_wch [35:0] $end
$var wire      1 =:   o_bvalid  $end
$var reg       1 >:   o_bready  $end
$var wire     10 ?:   o_bch [9:0] $end
$var reg       1 @:   o_arvalid  $end
$var wire      1 A:   o_arready  $end
$var reg      27 B:   o_arch [26:0] $end
$var wire      1 C:   o_rvalid  $end
$var reg       1 D:   o_rready  $end
$var wire      1 E:   o_rlast  $end
$var wire     42 F:   o_rch [41:0] $end
$var reg       1 G:   awch_en  $end
$var reg       4 H:   awch_req [3:0] $end
$var reg       4 I:   awch_grant [3:0] $end
$var reg       4 J:   wch_grant [3:0] $end
$var reg       1 K:   arch_en  $end
$var reg       4 L:   arch_req [3:0] $end
$var reg       4 M:   arch_grant [3:0] $end
$var reg       1 N:   mst0_bch_targeted  $end
$var reg       1 O:   mst1_bch_targeted  $end
$var reg       1 P:   mst2_bch_targeted  $end
$var reg       1 Q:   mst3_bch_targeted  $end
$var reg       1 R:   mst0_rch_targeted  $end
$var reg       1 S:   mst1_rch_targeted  $end
$var reg       1 T:   mst2_rch_targeted  $end
$var reg       1 U:   mst3_rch_targeted  $end
$var reg       1 V:   wch_full  $end
$var reg       1 W:   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 X:   REQ_NB  $end
$var parameter 32 Y:   REQ0_PRIORITY  $end
$var parameter 32 Z:   REQ1_PRIORITY  $end
$var parameter 32 [:   REQ2_PRIORITY  $end
$var parameter 32 \:   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ]:   en  $end
$var wire      4 ^:   req [3:0] $end
$var reg       4 _:   grant [3:0] $end
$var reg       1 `:   p0_active  $end
$var reg       1 a:   p1_active  $end
$var reg       1 b:   p2_active  $end
$var reg       1 c:   p3_active  $end
$var reg       4 d:   req_p0 [3:0] $end
$var reg       4 e:   req_p1 [3:0] $end
$var reg       4 f:   req_p2 [3:0] $end
$var reg       4 g:   req_p3 [3:0] $end
$var reg       4 h:   grant_p0 [3:0] $end
$var reg       4 i:   grant_p1 [3:0] $end
$var reg       4 j:   grant_p2 [3:0] $end
$var reg       4 k:   grant_p3 [3:0] $end
$var reg       1 l:   p0  $end
$var reg       1 m:   p1  $end
$var reg       1 n:   p2  $end
$var reg       1 o:   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 p:   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 q:   en  $end
$var wire      4 r:   req [3:0] $end
$var reg       4 s:   grant [3:0] $end
$var reg       4 t:   mask [3:0] $end
$var reg       4 u:   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 v:   PASS_THRU  $end
$var parameter 32 w:   ADDR_WIDTH  $end
$var parameter 32 x:   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 y:   data_in [3:0] $end
$var wire      1 z:   push  $end
$var reg       1 {:   full  $end
$var reg       4 |:   data_out [3:0] $end
$var wire      1 }:   pull  $end
$var reg       1 ~:   empty  $end
$var reg       1 !;   wr_en  $end
$var reg       9 ";   wrptr [8:0] $end
$var reg       9 #;   rdptr [8:0] $end
$var reg       1 $;   empty_flag  $end
$var reg       1 %;   full_flag  $end
$var reg       1 &;   pass_thru  $end
$var reg       4 ';   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 (;   ADDR_WIDTH  $end
$var parameter 32 );   DATA_WIDTH  $end
$var parameter 32 *;   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 +;   wr_en  $end
$var wire      8 ,;   addr_in [7:0] $end
$var wire      4 y:   data_in [3:0] $end
$var wire      8 -;   addr_out [7:0] $end
$var reg       4 .;   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 /;   REQ_NB  $end
$var parameter 32 0;   REQ0_PRIORITY  $end
$var parameter 32 1;   REQ1_PRIORITY  $end
$var parameter 32 2;   REQ2_PRIORITY  $end
$var parameter 32 3;   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 4;   en  $end
$var wire      4 5;   req [3:0] $end
$var reg       4 6;   grant [3:0] $end
$var reg       1 7;   p0_active  $end
$var reg       1 8;   p1_active  $end
$var reg       1 9;   p2_active  $end
$var reg       1 :;   p3_active  $end
$var reg       4 ;;   req_p0 [3:0] $end
$var reg       4 <;   req_p1 [3:0] $end
$var reg       4 =;   req_p2 [3:0] $end
$var reg       4 >;   req_p3 [3:0] $end
$var reg       4 ?;   grant_p0 [3:0] $end
$var reg       4 @;   grant_p1 [3:0] $end
$var reg       4 A;   grant_p2 [3:0] $end
$var reg       4 B;   grant_p3 [3:0] $end
$var reg       1 C;   p0  $end
$var reg       1 D;   p1  $end
$var reg       1 E;   p2  $end
$var reg       1 F;   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 G;   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 H;   en  $end
$var wire      4 I;   req [3:0] $end
$var reg       4 J;   grant [3:0] $end
$var reg       4 K;   mask [3:0] $end
$var reg       4 L;   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 M;   DATA_BUS_W  $end
$var parameter 32 N;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 O;   i_valid  $end
$var reg       1 P;   i_ready  $end
$var wire     27 Q;   i_data [26:0] $end
$var reg       1 R;   o_valid  $end
$var wire      1 ;-   o_ready  $end
$var reg      27 S;   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 T;   DATA_BUS_W  $end
$var parameter 32 U;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 V;   i_valid  $end
$var reg       1 W;   i_ready  $end
$var wire     37 X;   i_data [36:0] $end
$var reg       1 Y;   o_valid  $end
$var wire      1 A-   o_ready  $end
$var reg      37 Z;   o_data [36:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 [;   DATA_BUS_W  $end
$var parameter 32 \;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 G-   i_valid  $end
$var reg       1 ];   i_ready  $end
$var wire     10 ^;   i_data [9:0] $end
$var reg       1 _;   o_valid  $end
$var wire      1 `;   o_ready  $end
$var reg      10 a;   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 b;   DATA_BUS_W  $end
$var parameter 32 c;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 d;   i_valid  $end
$var reg       1 e;   i_ready  $end
$var wire     27 f;   i_data [26:0] $end
$var reg       1 g;   o_valid  $end
$var wire      1 N-   o_ready  $end
$var reg      27 h;   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 i;   DATA_BUS_W  $end
$var parameter 32 j;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 S-   i_valid  $end
$var reg       1 k;   i_ready  $end
$var wire     43 l;   i_data [42:0] $end
$var reg       1 m;   o_valid  $end
$var wire      1 n;   o_ready  $end
$var reg      43 o;   o_data [42:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[1] $end
$var parameter 32 p;   i [31:0] $end
$var reg       1 q;   pipe_awvalid  $end
$var reg       1 r;   pipe_awready  $end
$var reg      27 s;   pipe_awch [26:0] $end
$var reg       1 t;   pipe_wvalid  $end
$var reg       1 u;   pipe_wready  $end
$var reg       1 v;   pipe_wlast  $end
$var reg      36 w;   pipe_wch [35:0] $end
$var reg       1 x;   pipe_bvalid  $end
$var reg       1 y;   pipe_bready  $end
$var reg      10 z;   pipe_bch [9:0] $end
$var reg       1 {;   pipe_arvalid  $end
$var reg       1 |;   pipe_arready  $end
$var reg      27 };   pipe_arch [26:0] $end
$var reg       1 ~;   pipe_rvalid  $end
$var reg       1 !<   pipe_rready  $end
$var reg       1 "<   pipe_rlast  $end
$var reg      42 #<   pipe_rch [41:0] $end

$scope module mst_switch $end
$var parameter 32 $<   AXI_ID_W  $end
$var parameter 32 %<   AXI_DATA_W  $end
$var parameter 32 &<   MST_NB  $end
$var parameter 32 '<   TIMEOUT_ENABLE  $end
$var parameter  8 (<   MST0_ID_MASK [7:0] $end
$var parameter  8 )<   MST1_ID_MASK [7:0] $end
$var parameter  8 *<   MST2_ID_MASK [7:0] $end
$var parameter  8 +<   MST3_ID_MASK [7:0] $end
$var parameter 32 ,<   MST0_PRIORITY  $end
$var parameter 32 -<   MST1_PRIORITY  $end
$var parameter 32 .<   MST2_PRIORITY  $end
$var parameter 32 /<   MST3_PRIORITY  $end
$var parameter 32 0<   AWCH_W  $end
$var parameter 32 1<   WCH_W  $end
$var parameter 32 2<   BCH_W  $end
$var parameter 32 3<   ARCH_W  $end
$var parameter 32 4<   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 5<   i_awvalid [3:0] $end
$var reg       4 6<   i_awready [3:0] $end
$var wire     108 7<   i_awch [107:0] $end
$var wire      4 8<   i_wvalid [3:0] $end
$var reg       4 9<   i_wready [3:0] $end
$var wire      4 :<   i_wlast [3:0] $end
$var wire     144 ;<   i_wch [143:0] $end
$var reg       4 <<   i_bvalid [3:0] $end
$var wire      4 =<   i_bready [3:0] $end
$var reg      10 ><   i_bch [9:0] $end
$var wire      4 ?<   i_arvalid [3:0] $end
$var reg       4 @<   i_arready [3:0] $end
$var wire     108 A<   i_arch [107:0] $end
$var reg       4 B<   i_rvalid [3:0] $end
$var wire      4 C<   i_rready [3:0] $end
$var reg       4 D<   i_rlast [3:0] $end
$var reg      42 E<   i_rch [41:0] $end
$var reg       1 F<   o_awvalid  $end
$var wire      1 G<   o_awready  $end
$var reg      27 H<   o_awch [26:0] $end
$var reg       1 I<   o_wvalid  $end
$var wire      1 J<   o_wready  $end
$var reg       1 K<   o_wlast  $end
$var reg      36 L<   o_wch [35:0] $end
$var wire      1 M<   o_bvalid  $end
$var reg       1 N<   o_bready  $end
$var wire     10 O<   o_bch [9:0] $end
$var reg       1 P<   o_arvalid  $end
$var wire      1 Q<   o_arready  $end
$var reg      27 R<   o_arch [26:0] $end
$var wire      1 S<   o_rvalid  $end
$var reg       1 T<   o_rready  $end
$var wire      1 U<   o_rlast  $end
$var wire     42 V<   o_rch [41:0] $end
$var reg       1 W<   awch_en  $end
$var reg       4 X<   awch_req [3:0] $end
$var reg       4 Y<   awch_grant [3:0] $end
$var reg       4 Z<   wch_grant [3:0] $end
$var reg       1 [<   arch_en  $end
$var reg       4 \<   arch_req [3:0] $end
$var reg       4 ]<   arch_grant [3:0] $end
$var reg       1 ^<   mst0_bch_targeted  $end
$var reg       1 _<   mst1_bch_targeted  $end
$var reg       1 `<   mst2_bch_targeted  $end
$var reg       1 a<   mst3_bch_targeted  $end
$var reg       1 b<   mst0_rch_targeted  $end
$var reg       1 c<   mst1_rch_targeted  $end
$var reg       1 d<   mst2_rch_targeted  $end
$var reg       1 e<   mst3_rch_targeted  $end
$var reg       1 f<   wch_full  $end
$var reg       1 g<   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 h<   REQ_NB  $end
$var parameter 32 i<   REQ0_PRIORITY  $end
$var parameter 32 j<   REQ1_PRIORITY  $end
$var parameter 32 k<   REQ2_PRIORITY  $end
$var parameter 32 l<   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 m<   en  $end
$var wire      4 n<   req [3:0] $end
$var reg       4 o<   grant [3:0] $end
$var reg       1 p<   p0_active  $end
$var reg       1 q<   p1_active  $end
$var reg       1 r<   p2_active  $end
$var reg       1 s<   p3_active  $end
$var reg       4 t<   req_p0 [3:0] $end
$var reg       4 u<   req_p1 [3:0] $end
$var reg       4 v<   req_p2 [3:0] $end
$var reg       4 w<   req_p3 [3:0] $end
$var reg       4 x<   grant_p0 [3:0] $end
$var reg       4 y<   grant_p1 [3:0] $end
$var reg       4 z<   grant_p2 [3:0] $end
$var reg       4 {<   grant_p3 [3:0] $end
$var reg       1 |<   p0  $end
$var reg       1 }<   p1  $end
$var reg       1 ~<   p2  $end
$var reg       1 !=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 "=   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 #=   en  $end
$var wire      4 $=   req [3:0] $end
$var reg       4 %=   grant [3:0] $end
$var reg       4 &=   mask [3:0] $end
$var reg       4 '=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 (=   PASS_THRU  $end
$var parameter 32 )=   ADDR_WIDTH  $end
$var parameter 32 *=   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 +=   data_in [3:0] $end
$var wire      1 ,=   push  $end
$var reg       1 -=   full  $end
$var reg       4 .=   data_out [3:0] $end
$var wire      1 /=   pull  $end
$var reg       1 0=   empty  $end
$var reg       1 1=   wr_en  $end
$var reg       9 2=   wrptr [8:0] $end
$var reg       9 3=   rdptr [8:0] $end
$var reg       1 4=   empty_flag  $end
$var reg       1 5=   full_flag  $end
$var reg       1 6=   pass_thru  $end
$var reg       4 7=   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 8=   ADDR_WIDTH  $end
$var parameter 32 9=   DATA_WIDTH  $end
$var parameter 32 :=   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 ;=   wr_en  $end
$var wire      8 <=   addr_in [7:0] $end
$var wire      4 +=   data_in [3:0] $end
$var wire      8 ==   addr_out [7:0] $end
$var reg       4 >=   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 ?=   REQ_NB  $end
$var parameter 32 @=   REQ0_PRIORITY  $end
$var parameter 32 A=   REQ1_PRIORITY  $end
$var parameter 32 B=   REQ2_PRIORITY  $end
$var parameter 32 C=   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 D=   en  $end
$var wire      4 E=   req [3:0] $end
$var reg       4 F=   grant [3:0] $end
$var reg       1 G=   p0_active  $end
$var reg       1 H=   p1_active  $end
$var reg       1 I=   p2_active  $end
$var reg       1 J=   p3_active  $end
$var reg       4 K=   req_p0 [3:0] $end
$var reg       4 L=   req_p1 [3:0] $end
$var reg       4 M=   req_p2 [3:0] $end
$var reg       4 N=   req_p3 [3:0] $end
$var reg       4 O=   grant_p0 [3:0] $end
$var reg       4 P=   grant_p1 [3:0] $end
$var reg       4 Q=   grant_p2 [3:0] $end
$var reg       4 R=   grant_p3 [3:0] $end
$var reg       1 S=   p0  $end
$var reg       1 T=   p1  $end
$var reg       1 U=   p2  $end
$var reg       1 V=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 W=   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 X=   en  $end
$var wire      4 Y=   req [3:0] $end
$var reg       4 Z=   grant [3:0] $end
$var reg       4 [=   mask [3:0] $end
$var reg       4 \=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 ]=   DATA_BUS_W  $end
$var parameter 32 ^=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 _=   i_valid  $end
$var reg       1 `=   i_ready  $end
$var wire     27 a=   i_data [26:0] $end
$var reg       1 b=   o_valid  $end
$var wire      1 :-   o_ready  $end
$var reg      27 c=   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 d=   DATA_BUS_W  $end
$var parameter 32 e=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 f=   i_valid  $end
$var reg       1 g=   i_ready  $end
$var wire     37 h=   i_data [36:0] $end
$var reg       1 i=   o_valid  $end
$var wire      1 @-   o_ready  $end
$var reg      37 j=   o_data [36:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 k=   DATA_BUS_W  $end
$var parameter 32 l=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 F-   i_valid  $end
$var reg       1 m=   i_ready  $end
$var wire     10 n=   i_data [9:0] $end
$var reg       1 o=   o_valid  $end
$var wire      1 p=   o_ready  $end
$var reg      10 q=   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 r=   DATA_BUS_W  $end
$var parameter 32 s=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 t=   i_valid  $end
$var reg       1 u=   i_ready  $end
$var wire     27 v=   i_data [26:0] $end
$var reg       1 w=   o_valid  $end
$var wire      1 M-   o_ready  $end
$var reg      27 x=   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 y=   DATA_BUS_W  $end
$var parameter 32 z=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 R-   i_valid  $end
$var reg       1 {=   i_ready  $end
$var wire     43 |=   i_data [42:0] $end
$var reg       1 }=   o_valid  $end
$var wire      1 ~=   o_ready  $end
$var reg      43 !>   o_data [42:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[2] $end
$var parameter 32 ">   i [31:0] $end
$var reg       1 #>   pipe_awvalid  $end
$var reg       1 $>   pipe_awready  $end
$var reg      27 %>   pipe_awch [26:0] $end
$var reg       1 &>   pipe_wvalid  $end
$var reg       1 '>   pipe_wready  $end
$var reg       1 (>   pipe_wlast  $end
$var reg      36 )>   pipe_wch [35:0] $end
$var reg       1 *>   pipe_bvalid  $end
$var reg       1 +>   pipe_bready  $end
$var reg      10 ,>   pipe_bch [9:0] $end
$var reg       1 ->   pipe_arvalid  $end
$var reg       1 .>   pipe_arready  $end
$var reg      27 />   pipe_arch [26:0] $end
$var reg       1 0>   pipe_rvalid  $end
$var reg       1 1>   pipe_rready  $end
$var reg       1 2>   pipe_rlast  $end
$var reg      42 3>   pipe_rch [41:0] $end

$scope module mst_switch $end
$var parameter 32 4>   AXI_ID_W  $end
$var parameter 32 5>   AXI_DATA_W  $end
$var parameter 32 6>   MST_NB  $end
$var parameter 32 7>   TIMEOUT_ENABLE  $end
$var parameter  8 8>   MST0_ID_MASK [7:0] $end
$var parameter  8 9>   MST1_ID_MASK [7:0] $end
$var parameter  8 :>   MST2_ID_MASK [7:0] $end
$var parameter  8 ;>   MST3_ID_MASK [7:0] $end
$var parameter 32 <>   MST0_PRIORITY  $end
$var parameter 32 =>   MST1_PRIORITY  $end
$var parameter 32 >>   MST2_PRIORITY  $end
$var parameter 32 ?>   MST3_PRIORITY  $end
$var parameter 32 @>   AWCH_W  $end
$var parameter 32 A>   WCH_W  $end
$var parameter 32 B>   BCH_W  $end
$var parameter 32 C>   ARCH_W  $end
$var parameter 32 D>   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 E>   i_awvalid [3:0] $end
$var reg       4 F>   i_awready [3:0] $end
$var wire     108 G>   i_awch [107:0] $end
$var wire      4 H>   i_wvalid [3:0] $end
$var reg       4 I>   i_wready [3:0] $end
$var wire      4 J>   i_wlast [3:0] $end
$var wire     144 K>   i_wch [143:0] $end
$var reg       4 L>   i_bvalid [3:0] $end
$var wire      4 M>   i_bready [3:0] $end
$var reg      10 N>   i_bch [9:0] $end
$var wire      4 O>   i_arvalid [3:0] $end
$var reg       4 P>   i_arready [3:0] $end
$var wire     108 Q>   i_arch [107:0] $end
$var reg       4 R>   i_rvalid [3:0] $end
$var wire      4 S>   i_rready [3:0] $end
$var reg       4 T>   i_rlast [3:0] $end
$var reg      42 U>   i_rch [41:0] $end
$var reg       1 V>   o_awvalid  $end
$var wire      1 W>   o_awready  $end
$var reg      27 X>   o_awch [26:0] $end
$var reg       1 Y>   o_wvalid  $end
$var wire      1 Z>   o_wready  $end
$var reg       1 [>   o_wlast  $end
$var reg      36 \>   o_wch [35:0] $end
$var wire      1 ]>   o_bvalid  $end
$var reg       1 ^>   o_bready  $end
$var wire     10 _>   o_bch [9:0] $end
$var reg       1 `>   o_arvalid  $end
$var wire      1 a>   o_arready  $end
$var reg      27 b>   o_arch [26:0] $end
$var wire      1 c>   o_rvalid  $end
$var reg       1 d>   o_rready  $end
$var wire      1 e>   o_rlast  $end
$var wire     42 f>   o_rch [41:0] $end
$var reg       1 g>   awch_en  $end
$var reg       4 h>   awch_req [3:0] $end
$var reg       4 i>   awch_grant [3:0] $end
$var reg       4 j>   wch_grant [3:0] $end
$var reg       1 k>   arch_en  $end
$var reg       4 l>   arch_req [3:0] $end
$var reg       4 m>   arch_grant [3:0] $end
$var reg       1 n>   mst0_bch_targeted  $end
$var reg       1 o>   mst1_bch_targeted  $end
$var reg       1 p>   mst2_bch_targeted  $end
$var reg       1 q>   mst3_bch_targeted  $end
$var reg       1 r>   mst0_rch_targeted  $end
$var reg       1 s>   mst1_rch_targeted  $end
$var reg       1 t>   mst2_rch_targeted  $end
$var reg       1 u>   mst3_rch_targeted  $end
$var reg       1 v>   wch_full  $end
$var reg       1 w>   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 x>   REQ_NB  $end
$var parameter 32 y>   REQ0_PRIORITY  $end
$var parameter 32 z>   REQ1_PRIORITY  $end
$var parameter 32 {>   REQ2_PRIORITY  $end
$var parameter 32 |>   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 }>   en  $end
$var wire      4 ~>   req [3:0] $end
$var reg       4 !?   grant [3:0] $end
$var reg       1 "?   p0_active  $end
$var reg       1 #?   p1_active  $end
$var reg       1 $?   p2_active  $end
$var reg       1 %?   p3_active  $end
$var reg       4 &?   req_p0 [3:0] $end
$var reg       4 '?   req_p1 [3:0] $end
$var reg       4 (?   req_p2 [3:0] $end
$var reg       4 )?   req_p3 [3:0] $end
$var reg       4 *?   grant_p0 [3:0] $end
$var reg       4 +?   grant_p1 [3:0] $end
$var reg       4 ,?   grant_p2 [3:0] $end
$var reg       4 -?   grant_p3 [3:0] $end
$var reg       1 .?   p0  $end
$var reg       1 /?   p1  $end
$var reg       1 0?   p2  $end
$var reg       1 1?   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 2?   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 3?   en  $end
$var wire      4 4?   req [3:0] $end
$var reg       4 5?   grant [3:0] $end
$var reg       4 6?   mask [3:0] $end
$var reg       4 7?   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 8?   PASS_THRU  $end
$var parameter 32 9?   ADDR_WIDTH  $end
$var parameter 32 :?   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 ;?   data_in [3:0] $end
$var wire      1 <?   push  $end
$var reg       1 =?   full  $end
$var reg       4 >?   data_out [3:0] $end
$var wire      1 ??   pull  $end
$var reg       1 @?   empty  $end
$var reg       1 A?   wr_en  $end
$var reg       9 B?   wrptr [8:0] $end
$var reg       9 C?   rdptr [8:0] $end
$var reg       1 D?   empty_flag  $end
$var reg       1 E?   full_flag  $end
$var reg       1 F?   pass_thru  $end
$var reg       4 G?   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 H?   ADDR_WIDTH  $end
$var parameter 32 I?   DATA_WIDTH  $end
$var parameter 32 J?   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 K?   wr_en  $end
$var wire      8 L?   addr_in [7:0] $end
$var wire      4 ;?   data_in [3:0] $end
$var wire      8 M?   addr_out [7:0] $end
$var reg       4 N?   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 O?   REQ_NB  $end
$var parameter 32 P?   REQ0_PRIORITY  $end
$var parameter 32 Q?   REQ1_PRIORITY  $end
$var parameter 32 R?   REQ2_PRIORITY  $end
$var parameter 32 S?   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 T?   en  $end
$var wire      4 U?   req [3:0] $end
$var reg       4 V?   grant [3:0] $end
$var reg       1 W?   p0_active  $end
$var reg       1 X?   p1_active  $end
$var reg       1 Y?   p2_active  $end
$var reg       1 Z?   p3_active  $end
$var reg       4 [?   req_p0 [3:0] $end
$var reg       4 \?   req_p1 [3:0] $end
$var reg       4 ]?   req_p2 [3:0] $end
$var reg       4 ^?   req_p3 [3:0] $end
$var reg       4 _?   grant_p0 [3:0] $end
$var reg       4 `?   grant_p1 [3:0] $end
$var reg       4 a?   grant_p2 [3:0] $end
$var reg       4 b?   grant_p3 [3:0] $end
$var reg       1 c?   p0  $end
$var reg       1 d?   p1  $end
$var reg       1 e?   p2  $end
$var reg       1 f?   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 g?   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 h?   en  $end
$var wire      4 i?   req [3:0] $end
$var reg       4 j?   grant [3:0] $end
$var reg       4 k?   mask [3:0] $end
$var reg       4 l?   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 m?   DATA_BUS_W  $end
$var parameter 32 n?   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 o?   i_valid  $end
$var reg       1 p?   i_ready  $end
$var wire     27 q?   i_data [26:0] $end
$var reg       1 r?   o_valid  $end
$var wire      1 9-   o_ready  $end
$var reg      27 s?   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 t?   DATA_BUS_W  $end
$var parameter 32 u?   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 v?   i_valid  $end
$var reg       1 w?   i_ready  $end
$var wire     37 x?   i_data [36:0] $end
$var reg       1 y?   o_valid  $end
$var wire      1 ?-   o_ready  $end
$var reg      37 z?   o_data [36:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 {?   DATA_BUS_W  $end
$var parameter 32 |?   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 E-   i_valid  $end
$var reg       1 }?   i_ready  $end
$var wire     10 ~?   i_data [9:0] $end
$var reg       1 !@   o_valid  $end
$var wire      1 "@   o_ready  $end
$var reg      10 #@   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 $@   DATA_BUS_W  $end
$var parameter 32 %@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 &@   i_valid  $end
$var reg       1 '@   i_ready  $end
$var wire     27 (@   i_data [26:0] $end
$var reg       1 )@   o_valid  $end
$var wire      1 L-   o_ready  $end
$var reg      27 *@   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 +@   DATA_BUS_W  $end
$var parameter 32 ,@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Q-   i_valid  $end
$var reg       1 -@   i_ready  $end
$var wire     43 .@   i_data [42:0] $end
$var reg       1 /@   o_valid  $end
$var wire      1 0@   o_ready  $end
$var reg      43 1@   o_data [42:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[3] $end
$var parameter 32 2@   i [31:0] $end
$var reg       1 3@   pipe_awvalid  $end
$var reg       1 4@   pipe_awready  $end
$var reg      27 5@   pipe_awch [26:0] $end
$var reg       1 6@   pipe_wvalid  $end
$var reg       1 7@   pipe_wready  $end
$var reg       1 8@   pipe_wlast  $end
$var reg      36 9@   pipe_wch [35:0] $end
$var reg       1 :@   pipe_bvalid  $end
$var reg       1 ;@   pipe_bready  $end
$var reg      10 <@   pipe_bch [9:0] $end
$var reg       1 =@   pipe_arvalid  $end
$var reg       1 >@   pipe_arready  $end
$var reg      27 ?@   pipe_arch [26:0] $end
$var reg       1 @@   pipe_rvalid  $end
$var reg       1 A@   pipe_rready  $end
$var reg       1 B@   pipe_rlast  $end
$var reg      42 C@   pipe_rch [41:0] $end

$scope module mst_switch $end
$var parameter 32 D@   AXI_ID_W  $end
$var parameter 32 E@   AXI_DATA_W  $end
$var parameter 32 F@   MST_NB  $end
$var parameter 32 G@   TIMEOUT_ENABLE  $end
$var parameter  8 H@   MST0_ID_MASK [7:0] $end
$var parameter  8 I@   MST1_ID_MASK [7:0] $end
$var parameter  8 J@   MST2_ID_MASK [7:0] $end
$var parameter  8 K@   MST3_ID_MASK [7:0] $end
$var parameter 32 L@   MST0_PRIORITY  $end
$var parameter 32 M@   MST1_PRIORITY  $end
$var parameter 32 N@   MST2_PRIORITY  $end
$var parameter 32 O@   MST3_PRIORITY  $end
$var parameter 32 P@   AWCH_W  $end
$var parameter 32 Q@   WCH_W  $end
$var parameter 32 R@   BCH_W  $end
$var parameter 32 S@   ARCH_W  $end
$var parameter 32 T@   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 U@   i_awvalid [3:0] $end
$var reg       4 V@   i_awready [3:0] $end
$var wire     108 W@   i_awch [107:0] $end
$var wire      4 X@   i_wvalid [3:0] $end
$var reg       4 Y@   i_wready [3:0] $end
$var wire      4 Z@   i_wlast [3:0] $end
$var wire     144 [@   i_wch [143:0] $end
$var reg       4 \@   i_bvalid [3:0] $end
$var wire      4 ]@   i_bready [3:0] $end
$var reg      10 ^@   i_bch [9:0] $end
$var wire      4 _@   i_arvalid [3:0] $end
$var reg       4 `@   i_arready [3:0] $end
$var wire     108 a@   i_arch [107:0] $end
$var reg       4 b@   i_rvalid [3:0] $end
$var wire      4 c@   i_rready [3:0] $end
$var reg       4 d@   i_rlast [3:0] $end
$var reg      42 e@   i_rch [41:0] $end
$var reg       1 f@   o_awvalid  $end
$var wire      1 g@   o_awready  $end
$var reg      27 h@   o_awch [26:0] $end
$var reg       1 i@   o_wvalid  $end
$var wire      1 j@   o_wready  $end
$var reg       1 k@   o_wlast  $end
$var reg      36 l@   o_wch [35:0] $end
$var wire      1 m@   o_bvalid  $end
$var reg       1 n@   o_bready  $end
$var wire     10 o@   o_bch [9:0] $end
$var reg       1 p@   o_arvalid  $end
$var wire      1 q@   o_arready  $end
$var reg      27 r@   o_arch [26:0] $end
$var wire      1 s@   o_rvalid  $end
$var reg       1 t@   o_rready  $end
$var wire      1 u@   o_rlast  $end
$var wire     42 v@   o_rch [41:0] $end
$var reg       1 w@   awch_en  $end
$var reg       4 x@   awch_req [3:0] $end
$var reg       4 y@   awch_grant [3:0] $end
$var reg       4 z@   wch_grant [3:0] $end
$var reg       1 {@   arch_en  $end
$var reg       4 |@   arch_req [3:0] $end
$var reg       4 }@   arch_grant [3:0] $end
$var reg       1 ~@   mst0_bch_targeted  $end
$var reg       1 !A   mst1_bch_targeted  $end
$var reg       1 "A   mst2_bch_targeted  $end
$var reg       1 #A   mst3_bch_targeted  $end
$var reg       1 $A   mst0_rch_targeted  $end
$var reg       1 %A   mst1_rch_targeted  $end
$var reg       1 &A   mst2_rch_targeted  $end
$var reg       1 'A   mst3_rch_targeted  $end
$var reg       1 (A   wch_full  $end
$var reg       1 )A   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 *A   REQ_NB  $end
$var parameter 32 +A   REQ0_PRIORITY  $end
$var parameter 32 ,A   REQ1_PRIORITY  $end
$var parameter 32 -A   REQ2_PRIORITY  $end
$var parameter 32 .A   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 /A   en  $end
$var wire      4 0A   req [3:0] $end
$var reg       4 1A   grant [3:0] $end
$var reg       1 2A   p0_active  $end
$var reg       1 3A   p1_active  $end
$var reg       1 4A   p2_active  $end
$var reg       1 5A   p3_active  $end
$var reg       4 6A   req_p0 [3:0] $end
$var reg       4 7A   req_p1 [3:0] $end
$var reg       4 8A   req_p2 [3:0] $end
$var reg       4 9A   req_p3 [3:0] $end
$var reg       4 :A   grant_p0 [3:0] $end
$var reg       4 ;A   grant_p1 [3:0] $end
$var reg       4 <A   grant_p2 [3:0] $end
$var reg       4 =A   grant_p3 [3:0] $end
$var reg       1 >A   p0  $end
$var reg       1 ?A   p1  $end
$var reg       1 @A   p2  $end
$var reg       1 AA   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 BA   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 CA   en  $end
$var wire      4 DA   req [3:0] $end
$var reg       4 EA   grant [3:0] $end
$var reg       4 FA   mask [3:0] $end
$var reg       4 GA   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 HA   PASS_THRU  $end
$var parameter 32 IA   ADDR_WIDTH  $end
$var parameter 32 JA   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 u%   flush  $end
$var wire      4 KA   data_in [3:0] $end
$var wire      1 LA   push  $end
$var reg       1 MA   full  $end
$var reg       4 NA   data_out [3:0] $end
$var wire      1 OA   pull  $end
$var reg       1 PA   empty  $end
$var reg       1 QA   wr_en  $end
$var reg       9 RA   wrptr [8:0] $end
$var reg       9 SA   rdptr [8:0] $end
$var reg       1 TA   empty_flag  $end
$var reg       1 UA   full_flag  $end
$var reg       1 VA   pass_thru  $end
$var reg       4 WA   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 XA   ADDR_WIDTH  $end
$var parameter 32 YA   DATA_WIDTH  $end
$var parameter 32 ZA   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 [A   wr_en  $end
$var wire      8 \A   addr_in [7:0] $end
$var wire      4 KA   data_in [3:0] $end
$var wire      8 ]A   addr_out [7:0] $end
$var reg       4 ^A   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 _A   REQ_NB  $end
$var parameter 32 `A   REQ0_PRIORITY  $end
$var parameter 32 aA   REQ1_PRIORITY  $end
$var parameter 32 bA   REQ2_PRIORITY  $end
$var parameter 32 cA   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 dA   en  $end
$var wire      4 eA   req [3:0] $end
$var reg       4 fA   grant [3:0] $end
$var reg       1 gA   p0_active  $end
$var reg       1 hA   p1_active  $end
$var reg       1 iA   p2_active  $end
$var reg       1 jA   p3_active  $end
$var reg       4 kA   req_p0 [3:0] $end
$var reg       4 lA   req_p1 [3:0] $end
$var reg       4 mA   req_p2 [3:0] $end
$var reg       4 nA   req_p3 [3:0] $end
$var reg       4 oA   grant_p0 [3:0] $end
$var reg       4 pA   grant_p1 [3:0] $end
$var reg       4 qA   grant_p2 [3:0] $end
$var reg       4 rA   grant_p3 [3:0] $end
$var reg       1 sA   p0  $end
$var reg       1 tA   p1  $end
$var reg       1 uA   p2  $end
$var reg       1 vA   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 wA   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 xA   en  $end
$var wire      4 yA   req [3:0] $end
$var reg       4 zA   grant [3:0] $end
$var reg       4 {A   mask [3:0] $end
$var reg       4 |A   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 }A   DATA_BUS_W  $end
$var parameter 32 ~A   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 !B   i_valid  $end
$var reg       1 "B   i_ready  $end
$var wire     27 #B   i_data [26:0] $end
$var reg       1 $B   o_valid  $end
$var wire      1 8-   o_ready  $end
$var reg      27 %B   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 &B   DATA_BUS_W  $end
$var parameter 32 'B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 (B   i_valid  $end
$var reg       1 )B   i_ready  $end
$var wire     37 *B   i_data [36:0] $end
$var reg       1 +B   o_valid  $end
$var wire      1 >-   o_ready  $end
$var reg      37 ,B   o_data [36:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 -B   DATA_BUS_W  $end
$var parameter 32 .B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 D-   i_valid  $end
$var reg       1 /B   i_ready  $end
$var wire     10 0B   i_data [9:0] $end
$var reg       1 1B   o_valid  $end
$var wire      1 2B   o_ready  $end
$var reg      10 3B   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 4B   DATA_BUS_W  $end
$var parameter 32 5B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 6B   i_valid  $end
$var reg       1 7B   i_ready  $end
$var wire     27 8B   i_data [26:0] $end
$var reg       1 9B   o_valid  $end
$var wire      1 K-   o_ready  $end
$var reg      27 :B   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 ;B   DATA_BUS_W  $end
$var parameter 32 <B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 P-   i_valid  $end
$var reg       1 =B   i_ready  $end
$var wire     43 >B   i_data [42:0] $end
$var reg       1 ?B   o_valid  $end
$var wire      1 @B   o_ready  $end
$var reg      43 AB   o_data [42:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module mst0_if $end
$var parameter 32 BB   AXI_ADDR_W  $end
$var parameter 32 CB   AXI_ID_W  $end
$var parameter 32 DB   AXI_DATA_W  $end
$var parameter 32 EB   STRB_MODE  $end
$var parameter 32 FB   AXI_SIGNALING  $end
$var parameter 32 GB   KEEP_BASE_ADDR  $end
$var parameter 32 HB   BASE_ADDR  $end
$var parameter 32 IB   SLV_CDC  $end
$var parameter 32 JB   SLV_OSTDREQ_NUM  $end
$var parameter 32 KB   SLV_OSTDREQ_SIZE  $end
$var parameter 32 LB   USER_SUPPORT  $end
$var parameter 32 MB   AXI_AUSER_W  $end
$var parameter 32 NB   AXI_WUSER_W  $end
$var parameter 32 OB   AXI_BUSER_W  $end
$var parameter 32 PB   AXI_RUSER_W  $end
$var parameter 32 QB   AWCH_W  $end
$var parameter 32 RB   WCH_W  $end
$var parameter 32 SB   BCH_W  $end
$var parameter 32 TB   ARCH_W  $end
$var parameter 32 UB   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 VB   i_awvalid  $end
$var reg       1 WB   i_awready  $end
$var wire     27 XB   i_awch [26:0] $end
$var wire      1 YB   i_wvalid  $end
$var reg       1 ZB   i_wready  $end
$var wire      1 [B   i_wlast  $end
$var wire     36 \B   i_wch [35:0] $end
$var reg       1 ]B   i_bvalid  $end
$var wire      1 ^B   i_bready  $end
$var reg      10 _B   i_bch [9:0] $end
$var wire      1 `B   i_arvalid  $end
$var reg       1 aB   i_arready  $end
$var wire     27 bB   i_arch [26:0] $end
$var reg       1 cB   i_rvalid  $end
$var wire      1 dB   i_rready  $end
$var reg       1 eB   i_rlast  $end
$var reg      42 fB   i_rch [41:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 gB   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 hB   o_awaddr [15:0] $end
$var reg       8 iB   o_awlen [7:0] $end
$var reg       3 jB   o_awsize [2:0] $end
$var reg       2 kB   o_awburst [1:0] $end
$var reg       2 lB   o_awlock [1:0] $end
$var reg       4 mB   o_awcache [3:0] $end
$var reg       3 nB   o_awprot [2:0] $end
$var reg       4 oB   o_awqos [3:0] $end
$var reg       4 pB   o_awregion [3:0] $end
$var reg       8 qB   o_awid [7:0] $end
$var reg       1 rB   o_awuser [0:0] $end
$var reg       1 sB   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 tB   o_wlast  $end
$var reg      32 uB   o_wdata [31:0] $end
$var reg       4 vB   o_wstrb [3:0] $end
$var reg       1 wB   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 xB   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 yB   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 zB   o_araddr [15:0] $end
$var reg       8 {B   o_arlen [7:0] $end
$var reg       3 |B   o_arsize [2:0] $end
$var reg       2 }B   o_arburst [1:0] $end
$var reg       2 ~B   o_arlock [1:0] $end
$var reg       4 !C   o_arcache [3:0] $end
$var reg       3 "C   o_arprot [2:0] $end
$var reg       4 #C   o_arqos [3:0] $end
$var reg       4 $C   o_arregion [3:0] $end
$var reg       8 %C   o_arid [7:0] $end
$var reg       1 &C   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 'C   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     32 k    o_rdata [31:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 (C   awch [26:0] $end
$var reg      36 )C   wch [35:0] $end
$var reg      10 *C   bch [9:0] $end
$var reg      27 +C   arch [26:0] $end
$var reg      42 ,C   rch [41:0] $end
$var reg       1 -C   rlast  $end
$var reg      16 .C   awaddr [15:0] $end
$var reg      16 /C   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 0C   PASS_THRU  $end
$var parameter 32 1C   AW_ASIZE  $end
$var parameter 32 2C   W_ASIZE  $end
$var parameter 32 3C   B_ASIZE  $end
$var parameter 32 4C   AR_ASIZE  $end
$var parameter 32 5C   R_ASIZE  $end
$var reg       1 6C   aw_full  $end
$var reg       1 7C   aw_empty  $end
$var reg       1 8C   w_full  $end
$var reg       1 9C   w_empty  $end
$var reg       1 :C   ar_full  $end
$var reg       1 ;C   ar_empty  $end
$var reg       1 <C   r_full  $end
$var reg       1 =C   r_empty  $end
$var reg       1 >C   b_full  $end
$var reg       1 ?C   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 @C   PASS_THRU  $end
$var parameter 32 AC   ADDR_WIDTH  $end
$var parameter 32 BC   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 XB   data_in [26:0] $end
$var wire      1 VB   push  $end
$var reg       1 CC   full  $end
$var reg      27 DC   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 EC   empty  $end
$var reg       1 FC   wr_en  $end
$var reg       3 GC   wrptr [2:0] $end
$var reg       3 HC   rdptr [2:0] $end
$var reg       1 IC   empty_flag  $end
$var reg       1 JC   full_flag  $end
$var reg       1 KC   pass_thru  $end
$var reg      27 LC   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 MC   ADDR_WIDTH  $end
$var parameter 32 NC   DATA_WIDTH  $end
$var parameter 32 OC   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 PC   wr_en  $end
$var wire      2 QC   addr_in [1:0] $end
$var wire     27 XB   data_in [26:0] $end
$var wire      2 RC   addr_out [1:0] $end
$var reg      27 SC   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 TC   PASS_THRU  $end
$var parameter 32 UC   ADDR_WIDTH  $end
$var parameter 32 VC   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 WC   data_in [36:0] $end
$var wire      1 YB   push  $end
$var reg       1 XC   full  $end
$var reg      37 YC   data_out [36:0] $end
$var wire      1 e    pull  $end
$var reg       1 ZC   empty  $end
$var reg       1 [C   wr_en  $end
$var reg       3 \C   wrptr [2:0] $end
$var reg       3 ]C   rdptr [2:0] $end
$var reg       1 ^C   empty_flag  $end
$var reg       1 _C   full_flag  $end
$var reg       1 `C   pass_thru  $end
$var reg      37 aC   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 bC   ADDR_WIDTH  $end
$var parameter 32 cC   DATA_WIDTH  $end
$var parameter 32 dC   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 eC   wr_en  $end
$var wire      2 fC   addr_in [1:0] $end
$var wire     37 WC   data_in [36:0] $end
$var wire      2 gC   addr_out [1:0] $end
$var reg      37 hC   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 iC   PASS_THRU  $end
$var parameter 32 jC   ADDR_WIDTH  $end
$var parameter 32 kC   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 lC   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 mC   full  $end
$var reg      10 nC   data_out [9:0] $end
$var wire      1 ^B   pull  $end
$var reg       1 oC   empty  $end
$var reg       1 pC   wr_en  $end
$var reg       3 qC   wrptr [2:0] $end
$var reg       3 rC   rdptr [2:0] $end
$var reg       1 sC   empty_flag  $end
$var reg       1 tC   full_flag  $end
$var reg       1 uC   pass_thru  $end
$var reg      10 vC   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 wC   ADDR_WIDTH  $end
$var parameter 32 xC   DATA_WIDTH  $end
$var parameter 32 yC   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 zC   wr_en  $end
$var wire      2 {C   addr_in [1:0] $end
$var wire     10 lC   data_in [9:0] $end
$var wire      2 |C   addr_out [1:0] $end
$var reg      10 }C   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 ~C   PASS_THRU  $end
$var parameter 32 !D   ADDR_WIDTH  $end
$var parameter 32 "D   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 bB   data_in [26:0] $end
$var wire      1 `B   push  $end
$var reg       1 #D   full  $end
$var reg      27 $D   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 %D   empty  $end
$var reg       1 &D   wr_en  $end
$var reg       3 'D   wrptr [2:0] $end
$var reg       3 (D   rdptr [2:0] $end
$var reg       1 )D   empty_flag  $end
$var reg       1 *D   full_flag  $end
$var reg       1 +D   pass_thru  $end
$var reg      27 ,D   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 -D   ADDR_WIDTH  $end
$var parameter 32 .D   DATA_WIDTH  $end
$var parameter 32 /D   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 0D   wr_en  $end
$var wire      2 1D   addr_in [1:0] $end
$var wire     27 bB   data_in [26:0] $end
$var wire      2 2D   addr_out [1:0] $end
$var reg      27 3D   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 4D   PASS_THRU  $end
$var parameter 32 5D   ADDR_WIDTH  $end
$var parameter 32 6D   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 7D   data_in [42:0] $end
$var wire      1 e    push  $end
$var reg       1 8D   full  $end
$var reg      43 9D   data_out [42:0] $end
$var wire      1 dB   pull  $end
$var reg       1 :D   empty  $end
$var reg       1 ;D   wr_en  $end
$var reg       3 <D   wrptr [2:0] $end
$var reg       3 =D   rdptr [2:0] $end
$var reg       1 >D   empty_flag  $end
$var reg       1 ?D   full_flag  $end
$var reg       1 @D   pass_thru  $end
$var reg      43 AD   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 BD   ADDR_WIDTH  $end
$var parameter 32 CD   DATA_WIDTH  $end
$var parameter 32 DD   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 ED   wr_en  $end
$var wire      2 FD   addr_in [1:0] $end
$var wire     43 7D   data_in [42:0] $end
$var wire      2 GD   addr_out [1:0] $end
$var reg      43 HD   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module mst1_if $end
$var parameter 32 ID   AXI_ADDR_W  $end
$var parameter 32 JD   AXI_ID_W  $end
$var parameter 32 KD   AXI_DATA_W  $end
$var parameter 32 LD   STRB_MODE  $end
$var parameter 32 MD   AXI_SIGNALING  $end
$var parameter 32 ND   KEEP_BASE_ADDR  $end
$var parameter 32 OD   BASE_ADDR  $end
$var parameter 32 PD   SLV_CDC  $end
$var parameter 32 QD   SLV_OSTDREQ_NUM  $end
$var parameter 32 RD   SLV_OSTDREQ_SIZE  $end
$var parameter 32 SD   USER_SUPPORT  $end
$var parameter 32 TD   AXI_AUSER_W  $end
$var parameter 32 UD   AXI_WUSER_W  $end
$var parameter 32 VD   AXI_BUSER_W  $end
$var parameter 32 WD   AXI_RUSER_W  $end
$var parameter 32 XD   AWCH_W  $end
$var parameter 32 YD   WCH_W  $end
$var parameter 32 ZD   BCH_W  $end
$var parameter 32 [D   ARCH_W  $end
$var parameter 32 \D   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 ]D   i_awvalid  $end
$var reg       1 ^D   i_awready  $end
$var wire     27 _D   i_awch [26:0] $end
$var wire      1 `D   i_wvalid  $end
$var reg       1 aD   i_wready  $end
$var wire      1 bD   i_wlast  $end
$var wire     36 cD   i_wch [35:0] $end
$var reg       1 dD   i_bvalid  $end
$var wire      1 eD   i_bready  $end
$var reg      10 fD   i_bch [9:0] $end
$var wire      1 gD   i_arvalid  $end
$var reg       1 hD   i_arready  $end
$var wire     27 iD   i_arch [26:0] $end
$var reg       1 jD   i_rvalid  $end
$var wire      1 kD   i_rready  $end
$var reg       1 lD   i_rlast  $end
$var reg      42 mD   i_rch [41:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 nD   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 oD   o_awaddr [15:0] $end
$var reg       8 pD   o_awlen [7:0] $end
$var reg       3 qD   o_awsize [2:0] $end
$var reg       2 rD   o_awburst [1:0] $end
$var reg       2 sD   o_awlock [1:0] $end
$var reg       4 tD   o_awcache [3:0] $end
$var reg       3 uD   o_awprot [2:0] $end
$var reg       4 vD   o_awqos [3:0] $end
$var reg       4 wD   o_awregion [3:0] $end
$var reg       8 xD   o_awid [7:0] $end
$var reg       1 yD   o_awuser [0:0] $end
$var reg       1 zD   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 {D   o_wlast  $end
$var reg      32 |D   o_wdata [31:0] $end
$var reg       4 }D   o_wstrb [3:0] $end
$var reg       1 ~D   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 !E   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 "E   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 #E   o_araddr [15:0] $end
$var reg       8 $E   o_arlen [7:0] $end
$var reg       3 %E   o_arsize [2:0] $end
$var reg       2 &E   o_arburst [1:0] $end
$var reg       2 'E   o_arlock [1:0] $end
$var reg       4 (E   o_arcache [3:0] $end
$var reg       3 )E   o_arprot [2:0] $end
$var reg       4 *E   o_arqos [3:0] $end
$var reg       4 +E   o_arregion [3:0] $end
$var reg       8 ,E   o_arid [7:0] $end
$var reg       1 -E   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 .E   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     32 k    o_rdata [31:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 /E   awch [26:0] $end
$var reg      36 0E   wch [35:0] $end
$var reg      10 1E   bch [9:0] $end
$var reg      27 2E   arch [26:0] $end
$var reg      42 3E   rch [41:0] $end
$var reg       1 4E   rlast  $end
$var reg      16 5E   awaddr [15:0] $end
$var reg      16 6E   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 7E   PASS_THRU  $end
$var parameter 32 8E   AW_ASIZE  $end
$var parameter 32 9E   W_ASIZE  $end
$var parameter 32 :E   B_ASIZE  $end
$var parameter 32 ;E   AR_ASIZE  $end
$var parameter 32 <E   R_ASIZE  $end
$var reg       1 =E   aw_full  $end
$var reg       1 >E   aw_empty  $end
$var reg       1 ?E   w_full  $end
$var reg       1 @E   w_empty  $end
$var reg       1 AE   ar_full  $end
$var reg       1 BE   ar_empty  $end
$var reg       1 CE   r_full  $end
$var reg       1 DE   r_empty  $end
$var reg       1 EE   b_full  $end
$var reg       1 FE   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 GE   PASS_THRU  $end
$var parameter 32 HE   ADDR_WIDTH  $end
$var parameter 32 IE   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 _D   data_in [26:0] $end
$var wire      1 ]D   push  $end
$var reg       1 JE   full  $end
$var reg      27 KE   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 LE   empty  $end
$var reg       1 ME   wr_en  $end
$var reg       3 NE   wrptr [2:0] $end
$var reg       3 OE   rdptr [2:0] $end
$var reg       1 PE   empty_flag  $end
$var reg       1 QE   full_flag  $end
$var reg       1 RE   pass_thru  $end
$var reg      27 SE   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 TE   ADDR_WIDTH  $end
$var parameter 32 UE   DATA_WIDTH  $end
$var parameter 32 VE   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 WE   wr_en  $end
$var wire      2 XE   addr_in [1:0] $end
$var wire     27 _D   data_in [26:0] $end
$var wire      2 YE   addr_out [1:0] $end
$var reg      27 ZE   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 [E   PASS_THRU  $end
$var parameter 32 \E   ADDR_WIDTH  $end
$var parameter 32 ]E   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 ^E   data_in [36:0] $end
$var wire      1 `D   push  $end
$var reg       1 _E   full  $end
$var reg      37 `E   data_out [36:0] $end
$var wire      1 e    pull  $end
$var reg       1 aE   empty  $end
$var reg       1 bE   wr_en  $end
$var reg       3 cE   wrptr [2:0] $end
$var reg       3 dE   rdptr [2:0] $end
$var reg       1 eE   empty_flag  $end
$var reg       1 fE   full_flag  $end
$var reg       1 gE   pass_thru  $end
$var reg      37 hE   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 iE   ADDR_WIDTH  $end
$var parameter 32 jE   DATA_WIDTH  $end
$var parameter 32 kE   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 lE   wr_en  $end
$var wire      2 mE   addr_in [1:0] $end
$var wire     37 ^E   data_in [36:0] $end
$var wire      2 nE   addr_out [1:0] $end
$var reg      37 oE   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 pE   PASS_THRU  $end
$var parameter 32 qE   ADDR_WIDTH  $end
$var parameter 32 rE   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 sE   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 tE   full  $end
$var reg      10 uE   data_out [9:0] $end
$var wire      1 eD   pull  $end
$var reg       1 vE   empty  $end
$var reg       1 wE   wr_en  $end
$var reg       3 xE   wrptr [2:0] $end
$var reg       3 yE   rdptr [2:0] $end
$var reg       1 zE   empty_flag  $end
$var reg       1 {E   full_flag  $end
$var reg       1 |E   pass_thru  $end
$var reg      10 }E   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 ~E   ADDR_WIDTH  $end
$var parameter 32 !F   DATA_WIDTH  $end
$var parameter 32 "F   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 #F   wr_en  $end
$var wire      2 $F   addr_in [1:0] $end
$var wire     10 sE   data_in [9:0] $end
$var wire      2 %F   addr_out [1:0] $end
$var reg      10 &F   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 'F   PASS_THRU  $end
$var parameter 32 (F   ADDR_WIDTH  $end
$var parameter 32 )F   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 iD   data_in [26:0] $end
$var wire      1 gD   push  $end
$var reg       1 *F   full  $end
$var reg      27 +F   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 ,F   empty  $end
$var reg       1 -F   wr_en  $end
$var reg       3 .F   wrptr [2:0] $end
$var reg       3 /F   rdptr [2:0] $end
$var reg       1 0F   empty_flag  $end
$var reg       1 1F   full_flag  $end
$var reg       1 2F   pass_thru  $end
$var reg      27 3F   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 4F   ADDR_WIDTH  $end
$var parameter 32 5F   DATA_WIDTH  $end
$var parameter 32 6F   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 7F   wr_en  $end
$var wire      2 8F   addr_in [1:0] $end
$var wire     27 iD   data_in [26:0] $end
$var wire      2 9F   addr_out [1:0] $end
$var reg      27 :F   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 ;F   PASS_THRU  $end
$var parameter 32 <F   ADDR_WIDTH  $end
$var parameter 32 =F   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 >F   data_in [42:0] $end
$var wire      1 e    push  $end
$var reg       1 ?F   full  $end
$var reg      43 @F   data_out [42:0] $end
$var wire      1 kD   pull  $end
$var reg       1 AF   empty  $end
$var reg       1 BF   wr_en  $end
$var reg       3 CF   wrptr [2:0] $end
$var reg       3 DF   rdptr [2:0] $end
$var reg       1 EF   empty_flag  $end
$var reg       1 FF   full_flag  $end
$var reg       1 GF   pass_thru  $end
$var reg      43 HF   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 IF   ADDR_WIDTH  $end
$var parameter 32 JF   DATA_WIDTH  $end
$var parameter 32 KF   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 LF   wr_en  $end
$var wire      2 MF   addr_in [1:0] $end
$var wire     43 >F   data_in [42:0] $end
$var wire      2 NF   addr_out [1:0] $end
$var reg      43 OF   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module mst2_if $end
$var parameter 32 PF   AXI_ADDR_W  $end
$var parameter 32 QF   AXI_ID_W  $end
$var parameter 32 RF   AXI_DATA_W  $end
$var parameter 32 SF   STRB_MODE  $end
$var parameter 32 TF   AXI_SIGNALING  $end
$var parameter 32 UF   KEEP_BASE_ADDR  $end
$var parameter 32 VF   BASE_ADDR  $end
$var parameter 32 WF   SLV_CDC  $end
$var parameter 32 XF   SLV_OSTDREQ_NUM  $end
$var parameter 32 YF   SLV_OSTDREQ_SIZE  $end
$var parameter 32 ZF   USER_SUPPORT  $end
$var parameter 32 [F   AXI_AUSER_W  $end
$var parameter 32 \F   AXI_WUSER_W  $end
$var parameter 32 ]F   AXI_BUSER_W  $end
$var parameter 32 ^F   AXI_RUSER_W  $end
$var parameter 32 _F   AWCH_W  $end
$var parameter 32 `F   WCH_W  $end
$var parameter 32 aF   BCH_W  $end
$var parameter 32 bF   ARCH_W  $end
$var parameter 32 cF   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 dF   i_awvalid  $end
$var reg       1 eF   i_awready  $end
$var wire     27 fF   i_awch [26:0] $end
$var wire      1 gF   i_wvalid  $end
$var reg       1 hF   i_wready  $end
$var wire      1 iF   i_wlast  $end
$var wire     36 jF   i_wch [35:0] $end
$var reg       1 kF   i_bvalid  $end
$var wire      1 lF   i_bready  $end
$var reg      10 mF   i_bch [9:0] $end
$var wire      1 nF   i_arvalid  $end
$var reg       1 oF   i_arready  $end
$var wire     27 pF   i_arch [26:0] $end
$var reg       1 qF   i_rvalid  $end
$var wire      1 rF   i_rready  $end
$var reg       1 sF   i_rlast  $end
$var reg      42 tF   i_rch [41:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 uF   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 vF   o_awaddr [15:0] $end
$var reg       8 wF   o_awlen [7:0] $end
$var reg       3 xF   o_awsize [2:0] $end
$var reg       2 yF   o_awburst [1:0] $end
$var reg       2 zF   o_awlock [1:0] $end
$var reg       4 {F   o_awcache [3:0] $end
$var reg       3 |F   o_awprot [2:0] $end
$var reg       4 }F   o_awqos [3:0] $end
$var reg       4 ~F   o_awregion [3:0] $end
$var reg       8 !G   o_awid [7:0] $end
$var reg       1 "G   o_awuser [0:0] $end
$var reg       1 #G   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 $G   o_wlast  $end
$var reg      32 %G   o_wdata [31:0] $end
$var reg       4 &G   o_wstrb [3:0] $end
$var reg       1 'G   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 (G   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 )G   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 *G   o_araddr [15:0] $end
$var reg       8 +G   o_arlen [7:0] $end
$var reg       3 ,G   o_arsize [2:0] $end
$var reg       2 -G   o_arburst [1:0] $end
$var reg       2 .G   o_arlock [1:0] $end
$var reg       4 /G   o_arcache [3:0] $end
$var reg       3 0G   o_arprot [2:0] $end
$var reg       4 1G   o_arqos [3:0] $end
$var reg       4 2G   o_arregion [3:0] $end
$var reg       8 3G   o_arid [7:0] $end
$var reg       1 4G   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 5G   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     32 k    o_rdata [31:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 6G   awch [26:0] $end
$var reg      36 7G   wch [35:0] $end
$var reg      10 8G   bch [9:0] $end
$var reg      27 9G   arch [26:0] $end
$var reg      42 :G   rch [41:0] $end
$var reg       1 ;G   rlast  $end
$var reg      16 <G   awaddr [15:0] $end
$var reg      16 =G   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 >G   PASS_THRU  $end
$var parameter 32 ?G   AW_ASIZE  $end
$var parameter 32 @G   W_ASIZE  $end
$var parameter 32 AG   B_ASIZE  $end
$var parameter 32 BG   AR_ASIZE  $end
$var parameter 32 CG   R_ASIZE  $end
$var reg       1 DG   aw_full  $end
$var reg       1 EG   aw_empty  $end
$var reg       1 FG   w_full  $end
$var reg       1 GG   w_empty  $end
$var reg       1 HG   ar_full  $end
$var reg       1 IG   ar_empty  $end
$var reg       1 JG   r_full  $end
$var reg       1 KG   r_empty  $end
$var reg       1 LG   b_full  $end
$var reg       1 MG   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 NG   PASS_THRU  $end
$var parameter 32 OG   ADDR_WIDTH  $end
$var parameter 32 PG   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 fF   data_in [26:0] $end
$var wire      1 dF   push  $end
$var reg       1 QG   full  $end
$var reg      27 RG   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 SG   empty  $end
$var reg       1 TG   wr_en  $end
$var reg       3 UG   wrptr [2:0] $end
$var reg       3 VG   rdptr [2:0] $end
$var reg       1 WG   empty_flag  $end
$var reg       1 XG   full_flag  $end
$var reg       1 YG   pass_thru  $end
$var reg      27 ZG   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 [G   ADDR_WIDTH  $end
$var parameter 32 \G   DATA_WIDTH  $end
$var parameter 32 ]G   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ^G   wr_en  $end
$var wire      2 _G   addr_in [1:0] $end
$var wire     27 fF   data_in [26:0] $end
$var wire      2 `G   addr_out [1:0] $end
$var reg      27 aG   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 bG   PASS_THRU  $end
$var parameter 32 cG   ADDR_WIDTH  $end
$var parameter 32 dG   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 eG   data_in [36:0] $end
$var wire      1 gF   push  $end
$var reg       1 fG   full  $end
$var reg      37 gG   data_out [36:0] $end
$var wire      1 e    pull  $end
$var reg       1 hG   empty  $end
$var reg       1 iG   wr_en  $end
$var reg       3 jG   wrptr [2:0] $end
$var reg       3 kG   rdptr [2:0] $end
$var reg       1 lG   empty_flag  $end
$var reg       1 mG   full_flag  $end
$var reg       1 nG   pass_thru  $end
$var reg      37 oG   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 pG   ADDR_WIDTH  $end
$var parameter 32 qG   DATA_WIDTH  $end
$var parameter 32 rG   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 sG   wr_en  $end
$var wire      2 tG   addr_in [1:0] $end
$var wire     37 eG   data_in [36:0] $end
$var wire      2 uG   addr_out [1:0] $end
$var reg      37 vG   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 wG   PASS_THRU  $end
$var parameter 32 xG   ADDR_WIDTH  $end
$var parameter 32 yG   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 zG   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 {G   full  $end
$var reg      10 |G   data_out [9:0] $end
$var wire      1 lF   pull  $end
$var reg       1 }G   empty  $end
$var reg       1 ~G   wr_en  $end
$var reg       3 !H   wrptr [2:0] $end
$var reg       3 "H   rdptr [2:0] $end
$var reg       1 #H   empty_flag  $end
$var reg       1 $H   full_flag  $end
$var reg       1 %H   pass_thru  $end
$var reg      10 &H   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 'H   ADDR_WIDTH  $end
$var parameter 32 (H   DATA_WIDTH  $end
$var parameter 32 )H   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 *H   wr_en  $end
$var wire      2 +H   addr_in [1:0] $end
$var wire     10 zG   data_in [9:0] $end
$var wire      2 ,H   addr_out [1:0] $end
$var reg      10 -H   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 .H   PASS_THRU  $end
$var parameter 32 /H   ADDR_WIDTH  $end
$var parameter 32 0H   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 pF   data_in [26:0] $end
$var wire      1 nF   push  $end
$var reg       1 1H   full  $end
$var reg      27 2H   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 3H   empty  $end
$var reg       1 4H   wr_en  $end
$var reg       3 5H   wrptr [2:0] $end
$var reg       3 6H   rdptr [2:0] $end
$var reg       1 7H   empty_flag  $end
$var reg       1 8H   full_flag  $end
$var reg       1 9H   pass_thru  $end
$var reg      27 :H   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 ;H   ADDR_WIDTH  $end
$var parameter 32 <H   DATA_WIDTH  $end
$var parameter 32 =H   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 >H   wr_en  $end
$var wire      2 ?H   addr_in [1:0] $end
$var wire     27 pF   data_in [26:0] $end
$var wire      2 @H   addr_out [1:0] $end
$var reg      27 AH   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 BH   PASS_THRU  $end
$var parameter 32 CH   ADDR_WIDTH  $end
$var parameter 32 DH   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 EH   data_in [42:0] $end
$var wire      1 e    push  $end
$var reg       1 FH   full  $end
$var reg      43 GH   data_out [42:0] $end
$var wire      1 rF   pull  $end
$var reg       1 HH   empty  $end
$var reg       1 IH   wr_en  $end
$var reg       3 JH   wrptr [2:0] $end
$var reg       3 KH   rdptr [2:0] $end
$var reg       1 LH   empty_flag  $end
$var reg       1 MH   full_flag  $end
$var reg       1 NH   pass_thru  $end
$var reg      43 OH   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 PH   ADDR_WIDTH  $end
$var parameter 32 QH   DATA_WIDTH  $end
$var parameter 32 RH   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 SH   wr_en  $end
$var wire      2 TH   addr_in [1:0] $end
$var wire     43 EH   data_in [42:0] $end
$var wire      2 UH   addr_out [1:0] $end
$var reg      43 VH   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module mst3_if $end
$var parameter 32 WH   AXI_ADDR_W  $end
$var parameter 32 XH   AXI_ID_W  $end
$var parameter 32 YH   AXI_DATA_W  $end
$var parameter 32 ZH   STRB_MODE  $end
$var parameter 32 [H   AXI_SIGNALING  $end
$var parameter 32 \H   KEEP_BASE_ADDR  $end
$var parameter 32 ]H   BASE_ADDR  $end
$var parameter 32 ^H   SLV_CDC  $end
$var parameter 32 _H   SLV_OSTDREQ_NUM  $end
$var parameter 32 `H   SLV_OSTDREQ_SIZE  $end
$var parameter 32 aH   USER_SUPPORT  $end
$var parameter 32 bH   AXI_AUSER_W  $end
$var parameter 32 cH   AXI_WUSER_W  $end
$var parameter 32 dH   AXI_BUSER_W  $end
$var parameter 32 eH   AXI_RUSER_W  $end
$var parameter 32 fH   AWCH_W  $end
$var parameter 32 gH   WCH_W  $end
$var parameter 32 hH   BCH_W  $end
$var parameter 32 iH   ARCH_W  $end
$var parameter 32 jH   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 kH   i_awvalid  $end
$var reg       1 lH   i_awready  $end
$var wire     27 mH   i_awch [26:0] $end
$var wire      1 nH   i_wvalid  $end
$var reg       1 oH   i_wready  $end
$var wire      1 pH   i_wlast  $end
$var wire     36 qH   i_wch [35:0] $end
$var reg       1 rH   i_bvalid  $end
$var wire      1 sH   i_bready  $end
$var reg      10 tH   i_bch [9:0] $end
$var wire      1 uH   i_arvalid  $end
$var reg       1 vH   i_arready  $end
$var wire     27 wH   i_arch [26:0] $end
$var reg       1 xH   i_rvalid  $end
$var wire      1 yH   i_rready  $end
$var reg       1 zH   i_rlast  $end
$var reg      42 {H   i_rch [41:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 |H   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 }H   o_awaddr [15:0] $end
$var reg       8 ~H   o_awlen [7:0] $end
$var reg       3 !I   o_awsize [2:0] $end
$var reg       2 "I   o_awburst [1:0] $end
$var reg       2 #I   o_awlock [1:0] $end
$var reg       4 $I   o_awcache [3:0] $end
$var reg       3 %I   o_awprot [2:0] $end
$var reg       4 &I   o_awqos [3:0] $end
$var reg       4 'I   o_awregion [3:0] $end
$var reg       8 (I   o_awid [7:0] $end
$var reg       1 )I   o_awuser [0:0] $end
$var reg       1 *I   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 +I   o_wlast  $end
$var reg      32 ,I   o_wdata [31:0] $end
$var reg       4 -I   o_wstrb [3:0] $end
$var reg       1 .I   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 /I   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 0I   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 1I   o_araddr [15:0] $end
$var reg       8 2I   o_arlen [7:0] $end
$var reg       3 3I   o_arsize [2:0] $end
$var reg       2 4I   o_arburst [1:0] $end
$var reg       2 5I   o_arlock [1:0] $end
$var reg       4 6I   o_arcache [3:0] $end
$var reg       3 7I   o_arprot [2:0] $end
$var reg       4 8I   o_arqos [3:0] $end
$var reg       4 9I   o_arregion [3:0] $end
$var reg       8 :I   o_arid [7:0] $end
$var reg       1 ;I   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 <I   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     32 k    o_rdata [31:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 =I   awch [26:0] $end
$var reg      36 >I   wch [35:0] $end
$var reg      10 ?I   bch [9:0] $end
$var reg      27 @I   arch [26:0] $end
$var reg      42 AI   rch [41:0] $end
$var reg       1 BI   rlast  $end
$var reg      16 CI   awaddr [15:0] $end
$var reg      16 DI   araddr [15:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 EI   PASS_THRU  $end
$var parameter 32 FI   AW_ASIZE  $end
$var parameter 32 GI   W_ASIZE  $end
$var parameter 32 HI   B_ASIZE  $end
$var parameter 32 II   AR_ASIZE  $end
$var parameter 32 JI   R_ASIZE  $end
$var reg       1 KI   aw_full  $end
$var reg       1 LI   aw_empty  $end
$var reg       1 MI   w_full  $end
$var reg       1 NI   w_empty  $end
$var reg       1 OI   ar_full  $end
$var reg       1 PI   ar_empty  $end
$var reg       1 QI   r_full  $end
$var reg       1 RI   r_empty  $end
$var reg       1 SI   b_full  $end
$var reg       1 TI   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 UI   PASS_THRU  $end
$var parameter 32 VI   ADDR_WIDTH  $end
$var parameter 32 WI   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 mH   data_in [26:0] $end
$var wire      1 kH   push  $end
$var reg       1 XI   full  $end
$var reg      27 YI   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 ZI   empty  $end
$var reg       1 [I   wr_en  $end
$var reg       3 \I   wrptr [2:0] $end
$var reg       3 ]I   rdptr [2:0] $end
$var reg       1 ^I   empty_flag  $end
$var reg       1 _I   full_flag  $end
$var reg       1 `I   pass_thru  $end
$var reg      27 aI   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 bI   ADDR_WIDTH  $end
$var parameter 32 cI   DATA_WIDTH  $end
$var parameter 32 dI   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 eI   wr_en  $end
$var wire      2 fI   addr_in [1:0] $end
$var wire     27 mH   data_in [26:0] $end
$var wire      2 gI   addr_out [1:0] $end
$var reg      27 hI   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 iI   PASS_THRU  $end
$var parameter 32 jI   ADDR_WIDTH  $end
$var parameter 32 kI   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     37 lI   data_in [36:0] $end
$var wire      1 nH   push  $end
$var reg       1 mI   full  $end
$var reg      37 nI   data_out [36:0] $end
$var wire      1 e    pull  $end
$var reg       1 oI   empty  $end
$var reg       1 pI   wr_en  $end
$var reg       3 qI   wrptr [2:0] $end
$var reg       3 rI   rdptr [2:0] $end
$var reg       1 sI   empty_flag  $end
$var reg       1 tI   full_flag  $end
$var reg       1 uI   pass_thru  $end
$var reg      37 vI   data_fifo [36:0] $end

$scope module fifo_ram $end
$var parameter 32 wI   ADDR_WIDTH  $end
$var parameter 32 xI   DATA_WIDTH  $end
$var parameter 32 yI   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 zI   wr_en  $end
$var wire      2 {I   addr_in [1:0] $end
$var wire     37 lI   data_in [36:0] $end
$var wire      2 |I   addr_out [1:0] $end
$var reg      37 }I   data_out [36:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 ~I   PASS_THRU  $end
$var parameter 32 !J   ADDR_WIDTH  $end
$var parameter 32 "J   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     10 #J   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 $J   full  $end
$var reg      10 %J   data_out [9:0] $end
$var wire      1 sH   pull  $end
$var reg       1 &J   empty  $end
$var reg       1 'J   wr_en  $end
$var reg       3 (J   wrptr [2:0] $end
$var reg       3 )J   rdptr [2:0] $end
$var reg       1 *J   empty_flag  $end
$var reg       1 +J   full_flag  $end
$var reg       1 ,J   pass_thru  $end
$var reg      10 -J   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 .J   ADDR_WIDTH  $end
$var parameter 32 /J   DATA_WIDTH  $end
$var parameter 32 0J   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 1J   wr_en  $end
$var wire      2 2J   addr_in [1:0] $end
$var wire     10 #J   data_in [9:0] $end
$var wire      2 3J   addr_out [1:0] $end
$var reg      10 4J   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 5J   PASS_THRU  $end
$var parameter 32 6J   ADDR_WIDTH  $end
$var parameter 32 7J   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     27 wH   data_in [26:0] $end
$var wire      1 uH   push  $end
$var reg       1 8J   full  $end
$var reg      27 9J   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 :J   empty  $end
$var reg       1 ;J   wr_en  $end
$var reg       3 <J   wrptr [2:0] $end
$var reg       3 =J   rdptr [2:0] $end
$var reg       1 >J   empty_flag  $end
$var reg       1 ?J   full_flag  $end
$var reg       1 @J   pass_thru  $end
$var reg      27 AJ   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 BJ   ADDR_WIDTH  $end
$var parameter 32 CJ   DATA_WIDTH  $end
$var parameter 32 DJ   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 EJ   wr_en  $end
$var wire      2 FJ   addr_in [1:0] $end
$var wire     27 wH   data_in [26:0] $end
$var wire      2 GJ   addr_out [1:0] $end
$var reg      27 HJ   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 IJ   PASS_THRU  $end
$var parameter 32 JJ   ADDR_WIDTH  $end
$var parameter 32 KJ   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 u%   flush  $end
$var wire     43 LJ   data_in [42:0] $end
$var wire      1 e    push  $end
$var reg       1 MJ   full  $end
$var reg      43 NJ   data_out [42:0] $end
$var wire      1 yH   pull  $end
$var reg       1 OJ   empty  $end
$var reg       1 PJ   wr_en  $end
$var reg       3 QJ   wrptr [2:0] $end
$var reg       3 RJ   rdptr [2:0] $end
$var reg       1 SJ   empty_flag  $end
$var reg       1 TJ   full_flag  $end
$var reg       1 UJ   pass_thru  $end
$var reg      43 VJ   data_fifo [42:0] $end

$scope module fifo_ram $end
$var parameter 32 WJ   ADDR_WIDTH  $end
$var parameter 32 XJ   DATA_WIDTH  $end
$var parameter 32 YJ   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 ZJ   wr_en  $end
$var wire      2 [J   addr_in [1:0] $end
$var wire     43 LJ   data_in [42:0] $end
$var wire      2 \J   addr_out [1:0] $end
$var reg      43 ]J   data_out [42:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 YJ
b101011 XJ
b10 WJ
b101011 KJ
b10 JJ
b0 IJ
b0 DJ
b11011 CJ
b10 BJ
b11011 7J
b10 6J
b0 5J
b0 0J
b1010 /J
b10 .J
b1010 "J
b10 !J
b0 ~I
b0 yI
b100101 xI
b10 wI
b100101 kI
b10 jI
b0 iI
b0 dI
b11011 cI
b10 bI
b11011 WI
b10 VI
b0 UI
b10 JI
b10 II
b10 HI
b10 GI
b10 FI
b0 EI
b101010 jH
b11011 iH
b1010 hH
b100100 gH
b11011 fH
b1 eH
b1 dH
b1 cH
b1 bH
b0 aH
b1 `H
b100 _H
b0 ^H
b11000000000000 ]H
b0 \H
b0 [H
b1 ZH
b100000 YH
b1000 XH
b10000 WH
b0 RH
b101011 QH
b10 PH
b101011 DH
b10 CH
b0 BH
b0 =H
b11011 <H
b10 ;H
b11011 0H
b10 /H
b0 .H
b0 )H
b1010 (H
b10 'H
b1010 yG
b10 xG
b0 wG
b0 rG
b100101 qG
b10 pG
b100101 dG
b10 cG
b0 bG
b0 ]G
b11011 \G
b10 [G
b11011 PG
b10 OG
b0 NG
b10 CG
b10 BG
b10 AG
b10 @G
b10 ?G
b0 >G
b101010 cF
b11011 bF
b1010 aF
b100100 `F
b11011 _F
b1 ^F
b1 ]F
b1 \F
b1 [F
b0 ZF
b1 YF
b100 XF
b0 WF
b10000000000000 VF
b0 UF
b0 TF
b1 SF
b100000 RF
b1000 QF
b10000 PF
b0 KF
b101011 JF
b10 IF
b101011 =F
b10 <F
b0 ;F
b0 6F
b11011 5F
b10 4F
b11011 )F
b10 (F
b0 'F
b0 "F
b1010 !F
b10 ~E
b1010 rE
b10 qE
b0 pE
b0 kE
b100101 jE
b10 iE
b100101 ]E
b10 \E
b0 [E
b0 VE
b11011 UE
b10 TE
b11011 IE
b10 HE
b0 GE
b10 <E
b10 ;E
b10 :E
b10 9E
b10 8E
b0 7E
b101010 \D
b11011 [D
b1010 ZD
b100100 YD
b11011 XD
b1 WD
b1 VD
b1 UD
b1 TD
b0 SD
b1 RD
b100 QD
b0 PD
b1000000000000 OD
b0 ND
b0 MD
b1 LD
b100000 KD
b1000 JD
b10000 ID
b0 DD
b101011 CD
b10 BD
b101011 6D
b10 5D
b0 4D
b0 /D
b11011 .D
b10 -D
b11011 "D
b10 !D
b0 ~C
b0 yC
b1010 xC
b10 wC
b1010 kC
b10 jC
b0 iC
b0 dC
b100101 cC
b10 bC
b100101 VC
b10 UC
b0 TC
b0 OC
b11011 NC
b10 MC
b11011 BC
b10 AC
b0 @C
b10 5C
b10 4C
b10 3C
b10 2C
b10 1C
b0 0C
b101010 UB
b11011 TB
b1010 SB
b100100 RB
b11011 QB
b1 PB
b1 OB
b1 NB
b1 MB
b0 LB
b1 KB
b100 JB
b0 IB
b0 HB
b0 GB
b0 FB
b1 EB
b100000 DB
b1000 CB
b10000 BB
b0 <B
b101011 ;B
b0 5B
b11011 4B
b0 .B
b1010 -B
b0 'B
b100101 &B
b0 ~A
b11011 }A
b100 wA
b0 cA
b0 bA
b0 aA
b0 `A
b100 _A
b0 ZA
b100 YA
b1000 XA
b100 JA
b1000 IA
b0 HA
b100 BA
b0 .A
b0 -A
b0 ,A
b0 +A
b100 *A
b101010 T@
b11011 S@
b1010 R@
b100100 Q@
b11011 P@
b0 O@
b0 N@
b0 M@
b0 L@
b1000000 K@
b110000 J@
b100000 I@
b10000 H@
b1 G@
b100 F@
b100000 E@
b1000 D@
b11 2@
b0 ,@
b101011 +@
b0 %@
b11011 $@
b0 |?
b1010 {?
b0 u?
b100101 t?
b0 n?
b11011 m?
b100 g?
b0 S?
b0 R?
b0 Q?
b0 P?
b100 O?
b0 J?
b100 I?
b1000 H?
b100 :?
b1000 9?
b0 8?
b100 2?
b0 |>
b0 {>
b0 z>
b0 y>
b100 x>
b101010 D>
b11011 C>
b1010 B>
b100100 A>
b11011 @>
b0 ?>
b0 >>
b0 =>
b0 <>
b1000000 ;>
b110000 :>
b100000 9>
b10000 8>
b1 7>
b100 6>
b100000 5>
b1000 4>
b10 ">
b0 z=
b101011 y=
b0 s=
b11011 r=
b0 l=
b1010 k=
b0 e=
b100101 d=
b0 ^=
b11011 ]=
b100 W=
b0 C=
b0 B=
b0 A=
b0 @=
b100 ?=
b0 :=
b100 9=
b1000 8=
b100 *=
b1000 )=
b0 (=
b100 "=
b0 l<
b0 k<
b0 j<
b0 i<
b100 h<
b101010 4<
b11011 3<
b1010 2<
b100100 1<
b11011 0<
b0 /<
b0 .<
b0 -<
b0 ,<
b1000000 +<
b110000 *<
b100000 )<
b10000 (<
b1 '<
b100 &<
b100000 %<
b1000 $<
b1 p;
b0 j;
b101011 i;
b0 c;
b11011 b;
b0 \;
b1010 [;
b0 U;
b100101 T;
b0 N;
b11011 M;
b100 G;
b0 3;
b0 2;
b0 1;
b0 0;
b100 /;
b0 *;
b100 );
b1000 (;
b100 x:
b1000 w:
b0 v:
b100 p:
b0 \:
b0 [:
b0 Z:
b0 Y:
b100 X:
b101010 $:
b11011 #:
b1010 ":
b100100 !:
b11011 ~9
b0 }9
b0 |9
b0 {9
b0 z9
b1000000 y9
b110000 x9
b100000 w9
b10000 v9
b1 u9
b100 t9
b100000 s9
b1000 r9
b0 `9
b11 _9
b10 ^9
b1 ]9
b0 \9
b11 [9
b11 Z9
b10 Y9
b1 X9
b0 W9
b10 V9
b11 U9
b10 T9
b1 S9
b0 R9
b1 Q9
b11 P9
b10 O9
b1 N9
b0 M9
b0 L9
b11 K9
b10 J9
b1 I9
b0 H9
b11 G9
b11 F9
b10 E9
b1 D9
b0 C9
b10 B9
b11 A9
b10 @9
b1 ?9
b0 >9
b1 =9
b11 <9
b10 ;9
b1 :9
b0 99
b0 89
b100 29
b0 |8
b0 {8
b0 z8
b0 y8
b100 x8
b0 s8
b10000 r8
b100 q8
b10000 c8
b100 b8
b0 a8
b100 [8
b0 G8
b0 F8
b0 E8
b0 D8
b100 C8
b0 >8
b1000 =8
b10 <8
b1000 .8
b10 -8
b0 ,8
b0 '8
b100 &8
b1000 %8
b100 u7
b1000 t7
b0 s7
b101010 07
b11011 /7
b1010 .7
b100100 -7
b11011 ,7
b11111111111111 +7
b11000000000000 *7
b10111111111111 )7
b10000000000000 (7
b1111111111111 '7
b1000000000000 &7
b111111111111 %7
b0 $7
b1111 #7
b1 "7
b100 !7
b0 ~6
b1000 }6
b10000 |6
b0 v6
b101011 u6
b0 o6
b11011 n6
b0 h6
b1010 g6
b0 a6
b100101 `6
b0 Z6
b11011 Y6
b11 G6
b100 A6
b0 -6
b0 ,6
b0 +6
b0 *6
b100 )6
b0 $6
b10000 #6
b100 "6
b10000 r5
b100 q5
b0 p5
b100 j5
b0 V5
b0 U5
b0 T5
b0 S5
b100 R5
b0 M5
b1000 L5
b10 K5
b1000 =5
b10 <5
b0 ;5
b0 65
b100 55
b1000 45
b100 &5
b1000 %5
b0 $5
b101010 ?4
b11011 >4
b1010 =4
b100100 <4
b11011 ;4
b11111111111111 :4
b11000000000000 94
b10111111111111 84
b10000000000000 74
b1111111111111 64
b1000000000000 54
b111111111111 44
b0 34
b1111 24
b1 14
b100 04
b0 /4
b1000 .4
b10000 -4
b0 '4
b101011 &4
b0 ~3
b11011 }3
b0 w3
b1010 v3
b0 p3
b100101 o3
b0 i3
b11011 h3
b10 V3
b100 P3
b0 <3
b0 ;3
b0 :3
b0 93
b100 83
b0 33
b10000 23
b100 13
b10000 #3
b100 "3
b0 !3
b100 y2
b0 e2
b0 d2
b0 c2
b0 b2
b100 a2
b0 \2
b1000 [2
b10 Z2
b1000 L2
b10 K2
b0 J2
b0 E2
b100 D2
b1000 C2
b100 52
b1000 42
b0 32
b101010 N1
b11011 M1
b1010 L1
b100100 K1
b11011 J1
b11111111111111 I1
b11000000000000 H1
b10111111111111 G1
b10000000000000 F1
b1111111111111 E1
b1000000000000 D1
b111111111111 C1
b0 B1
b1111 A1
b1 @1
b100 ?1
b0 >1
b1000 =1
b10000 <1
b0 61
b101011 51
b0 /1
b11011 .1
b0 (1
b1010 '1
b0 !1
b100101 ~0
b0 x0
b11011 w0
b1 e0
b100 _0
b0 K0
b0 J0
b0 I0
b0 H0
b100 G0
b0 B0
b10000 A0
b100 @0
b10000 20
b100 10
b0 00
b100 *0
b0 t/
b0 s/
b0 r/
b0 q/
b100 p/
b0 k/
b1000 j/
b10 i/
b1000 [/
b10 Z/
b0 Y/
b0 T/
b100 S/
b1000 R/
b100 D/
b1000 C/
b0 B/
b101010 ].
b11011 \.
b1010 [.
b100100 Z.
b11011 Y.
b11111111111111 X.
b11000000000000 W.
b10111111111111 V.
b10000000000000 U.
b1111111111111 T.
b1000000000000 S.
b111111111111 R.
b0 Q.
b1111 P.
b1 O.
b100 N.
b0 M.
b1000 L.
b10000 K.
b0 E.
b101011 D.
b0 >.
b11011 =.
b0 7.
b1010 6.
b0 0.
b100101 /.
b0 ).
b11011 (.
b0 t-
b101010 t,
b11011 s,
b1010 r,
b100100 q,
b11011 p,
b11111111111111 o,
b11000000000000 n,
b10111111111111 m,
b10000000000000 l,
b1111111111111 k,
b1000000000000 j,
b111111111111 i,
b0 h,
b0 g,
b0 f,
b0 e,
b0 d,
b1000000 c,
b110000 b,
b100000 a,
b10000 `,
b1111111111111111 _,
b1 ^,
b0 ],
b0 \,
b100 [,
b100 Z,
b0 Y,
b100000 X,
b1000 W,
b10000 V,
b0 Q,
b101011 P,
b10 O,
b101011 C,
b10 B,
b0 A,
b0 <,
b11011 ;,
b10 :,
b11011 .,
b10 -,
b0 ,,
b0 ',
b1010 &,
b10 %,
b1010 x+
b10 w+
b0 v+
b0 q+
b100101 p+
b10 o+
b100101 c+
b10 b+
b0 a+
b0 \+
b11011 [+
b10 Z+
b11011 N+
b10 M+
b0 L+
b10 A+
b10 @+
b10 ?+
b10 >+
b10 =+
b0 <+
b101010 u*
b11011 t*
b1010 s*
b100100 r*
b11011 q*
b1 p*
b1 o*
b1 n*
b1 m*
b0 l*
b1 k*
b100 j*
b0 i*
b0 h*
b1 g*
b100 f*
b100000 e*
b1000 d*
b10000 c*
b0 ^*
b101011 ]*
b10 \*
b101011 P*
b10 O*
b0 N*
b0 I*
b11011 H*
b10 G*
b11011 ;*
b10 :*
b0 9*
b0 4*
b1010 3*
b10 2*
b1010 '*
b10 &*
b0 %*
b0 ~)
b100101 })
b10 |)
b100101 p)
b10 o)
b0 n)
b0 i)
b11011 h)
b10 g)
b11011 [)
b10 Z)
b0 Y)
b10 N)
b10 M)
b10 L)
b10 K)
b10 J)
b0 I)
b101010 $)
b11011 #)
b1010 ")
b100100 !)
b11011 ~(
b1 }(
b1 |(
b1 {(
b1 z(
b0 y(
b1 x(
b100 w(
b0 v(
b0 u(
b1 t(
b100 s(
b100000 r(
b1000 q(
b10000 p(
b0 k(
b101011 j(
b10 i(
b101011 ](
b10 \(
b0 [(
b0 V(
b11011 U(
b10 T(
b11011 H(
b10 G(
b0 F(
b0 A(
b1010 @(
b10 ?(
b1010 4(
b10 3(
b0 2(
b0 -(
b100101 ,(
b10 +(
b100101 }'
b10 |'
b0 {'
b0 v'
b11011 u'
b10 t'
b11011 h'
b10 g'
b0 f'
b10 ['
b10 Z'
b10 Y'
b10 X'
b10 W'
b0 V'
b101010 1'
b11011 0'
b1010 /'
b100100 .'
b11011 -'
b1 ,'
b1 +'
b1 *'
b1 )'
b0 ('
b1 ''
b100 &'
b0 %'
b0 $'
b1 #'
b100 "'
b100000 !'
b1000 ~&
b10000 }&
b0 x&
b101011 w&
b10 v&
b101011 j&
b10 i&
b0 h&
b0 c&
b11011 b&
b10 a&
b11011 U&
b10 T&
b0 S&
b0 N&
b1010 M&
b10 L&
b1010 A&
b10 @&
b0 ?&
b0 :&
b100101 9&
b10 8&
b100101 ,&
b10 +&
b0 *&
b0 %&
b11011 $&
b10 #&
b11011 t%
b10 s%
b0 r%
b10 g%
b10 f%
b10 e%
b10 d%
b10 c%
b0 b%
b101010 =%
b11011 <%
b1010 ;%
b100100 :%
b11011 9%
b1 8%
b1 7%
b1 6%
b1 5%
b0 4%
b1 3%
b100 2%
b0 1%
b0 0%
b1 /%
b100 .%
b100000 -%
b1000 ,%
b10000 +%
b1111111111111111 f$
b101010 e$
b11011 d$
b1010 c$
b100100 b$
b11011 a$
b0 `$
b0 _$
b0 ^$
b0 ]$
b0 d"
b1 c"
b100 b"
b11111111111111 a"
b11000000000000 `"
b0 _"
b0 ^"
b1 ]"
b100 \"
b10111111111111 ["
b10000000000000 Z"
b0 Y"
b0 X"
b1 W"
b100 V"
b1111111111111 U"
b1000000000000 T"
b0 S"
b0 R"
b1 Q"
b100 P"
b111111111111 O"
b0 N"
b0 M"
b0 L"
b1000000 K"
b1111 J"
b0 I"
b1 H"
b100 G"
b0 F"
b0 E"
b110000 D"
b1111 C"
b0 B"
b1 A"
b100 @"
b0 ?"
b0 >"
b100000 ="
b1111 <"
b0 ;"
b1 :"
b100 9"
b0 8"
b0 7"
b10000 6"
b1111 5"
b0 4"
b1 3"
b100 2"
b0 1"
b1 0"
b10011100010000 /"
b1 ."
b1 -"
b1 ,"
b1 +"
b0 *"
b0 )"
b1 ("
b0 '"
b0 &"
b100 %"
b100 $"
b100000 #"
b1000 ""
b10000 !"
b0 _
b100 ^
b11111111111111 ]
b11000000000000 \
b0 [
b0 Z
b100 Y
b10111111111111 X
b10000000000000 W
b0 V
b0 U
b100 T
b1111111111111 S
b1000000000000 R
b0 Q
b0 P
b100 O
b111111111111 N
b0 M
b0 L
b0 K
b1000000 J
b1111 I
b0 H
b100 G
b0 F
b0 E
b110000 D
b1111 C
b0 B
b100 A
b0 @
b0 ?
b100000 >
b1111 =
b0 <
b100 ;
b0 :
b0 9
b10000 8
b1111 7
b0 6
b100 5
b0 4
b1 3
b10011100010000 2
b1 1
b1 0
b1 /
b1 .
b0 -
b1 ,
b0 +
b0 *
b100 )
b100 (
b100000 '
b1000 &
b10000 %
0!
0"
0#
0$
0`
1a
0b
0c
1d
0e
xf
b0 g
b0 h
b0 i
xj
b0 k
b0 l
xm
bx n
bx o
xp
xq
xr
bx s
bx t
bx u
xv
xw
xx
xy
bx z
bx {
x|
x}
x~
bx !!
bx "!
bx #!
x$!
x%!
x&!
x'!
bx (!
bx )!
x*!
x+!
x,!
bx -!
bx .!
bx /!
x0!
x1!
x2!
x3!
bx 4!
bx 5!
x6!
x7!
x8!
bx 9!
bx :!
bx ;!
x<!
0=!
x>!
bx ?!
bx @!
bx A!
xB!
xC!
bx D!
bx E!
xF!
xG!
b0 H!
xI!
bx J!
bx K!
bx L!
xM!
xN!
xO!
bx P!
bx Q!
bx R!
xS!
xT!
bx U!
bx V!
xW!
xX!
xY!
bx Z!
bx [!
bx \!
x]!
x^!
x_!
bx `!
bx a!
bx b!
xc!
xd!
bx e!
bx f!
xg!
xh!
xi!
bx j!
bx k!
bx l!
xm!
xn!
xo!
bx p!
bx q!
bx r!
xs!
xt!
bx u!
bx v!
xw!
xx!
xy!
bx z!
bx {!
bx |!
x}!
x~!
xe"
b0 f"
b0 g"
b0 h"
b0 i"
xj"
xk"
bx l"
bx m"
xn"
xo"
xp"
bx q"
bx r"
bx s"
xt"
xu"
xv"
xw"
xx"
bx y"
bx z"
x{"
x|"
x}"
bx ~"
bx !#
bx "#
x##
x$#
x%#
x&#
x'#
bx (#
bx )#
x*#
x+#
x,#
bx -#
bx .#
bx /#
x0#
x1#
x2#
x3#
x4#
bx 5#
bx 6#
x7#
x8#
x9#
bx :#
bx ;#
bx <#
x=#
x>#
x?#
bx @#
bx A#
bx B#
bx C#
bx D#
bx E#
bx F#
bx G#
bx H#
bx I#
xJ#
xK#
xL#
bx M#
bx N#
xO#
xP#
xQ#
bx R#
bx S#
bx T#
bx U#
bx V#
bx W#
bx X#
bx Y#
bx Z#
bx [#
x\#
x]#
x^#
bx _#
bx `#
bx a#
bx b#
bx c#
bx d#
bx e#
bx f#
bx g#
bx h#
xi#
xj#
xk#
bx l#
bx m#
xn#
xo#
xp#
bx q#
bx r#
bx s#
bx t#
bx u#
bx v#
bx w#
bx x#
bx y#
bx z#
x{#
x|#
x}#
bx ~#
bx !$
bx "$
bx #$
bx $$
bx %$
bx &$
bx '$
bx ($
bx )$
x*$
x+$
x,$
bx -$
bx .$
x/$
x0$
x1$
bx 2$
bx 3$
bx 4$
bx 5$
bx 6$
bx 7$
bx 8$
bx 9$
bx :$
bx ;$
x<$
x=$
x>$
bx ?$
bx @$
bx A$
bx B$
bx C$
bx D$
bx E$
bx F$
bx G$
bx H$
xI$
xJ$
xK$
bx L$
bx M$
xN$
xO$
xP$
bx Q$
bx R$
bx S$
bx T$
bx U$
bx V$
bx W$
bx X$
bx Y$
bx Z$
x[$
x\$
bx g$
bx h$
bx i$
bx j$
bx k$
bx l$
bx m$
bx n$
bx o$
bx p$
bx q$
bx r$
bx s$
bx t$
bx u$
bx v$
bx w$
bx x$
bx y$
bx z$
bx {$
bx |$
bx }$
bx ~$
bx !%
bx "%
bx #%
bx $%
bx %%
bx &%
bx '%
bx (%
bx )%
bx *%
x>%
x?%
x@%
bx A%
bx B%
xC%
xD%
xE%
bx F%
bx G%
bx H%
xI%
xJ%
xK%
xL%
bx M%
xN%
xO%
xP%
bx Q%
xR%
xS%
bx T%
xU%
xV%
bx W%
xX%
xY%
xZ%
bx [%
b0 \%
b0 ]%
bx ^%
b0 _%
bx `%
1a%
xh%
xi%
xj%
xk%
xl%
xm%
xn%
xo%
xp%
xq%
0u%
b0 v%
xw%
bx x%
xy%
0z%
bx {%
bx |%
x}%
x~%
0!&
bx "&
0&&
bx '&
bx (&
bx )&
b1000000000000000000000000000000000000 -&
x.&
bx /&
x0&
01&
bx 2&
bx 3&
x4&
x5&
06&
bx 7&
0;&
bx <&
bx =&
bx >&
xB&
bx C&
xD&
xE&
bx F&
bx G&
xH&
xI&
0J&
bx K&
xO&
bx P&
bx Q&
bx R&
b0 V&
xW&
bx X&
xY&
0Z&
bx [&
bx \&
x]&
x^&
0_&
bx `&
0d&
bx e&
bx f&
bx g&
bx k&
xl&
bx m&
xn&
xo&
bx p&
bx q&
xr&
xs&
0t&
bx u&
xy&
bx z&
bx {&
bx |&
x2'
x3'
x4'
bx 5'
bx 6'
x7'
x8'
x9'
bx :'
bx ;'
bx <'
x='
x>'
x?'
x@'
bx A'
xB'
xC'
xD'
bx E'
xF'
xG'
bx H'
xI'
xJ'
bx K'
xL'
xM'
xN'
bx O'
b0 P'
b0 Q'
bx R'
b0 S'
bx T'
1U'
x\'
x]'
x^'
x_'
x`'
xa'
xb'
xc'
xd'
xe'
b0 i'
xj'
bx k'
xl'
0m'
bx n'
bx o'
xp'
xq'
0r'
bx s'
0w'
bx x'
bx y'
bx z'
b1000000000000000000000000000000000000 ~'
x!(
bx "(
x#(
0$(
bx %(
bx &(
x'(
x((
0)(
bx *(
0.(
bx /(
bx 0(
bx 1(
x5(
bx 6(
x7(
x8(
bx 9(
bx :(
x;(
x<(
0=(
bx >(
xB(
bx C(
bx D(
bx E(
b0 I(
xJ(
bx K(
xL(
0M(
bx N(
bx O(
xP(
xQ(
0R(
bx S(
0W(
bx X(
bx Y(
bx Z(
bx ^(
x_(
bx `(
xa(
xb(
bx c(
bx d(
xe(
xf(
0g(
bx h(
xl(
bx m(
bx n(
bx o(
x%)
x&)
x')
bx ()
bx ))
x*)
x+)
x,)
bx -)
bx .)
bx /)
x0)
x1)
x2)
x3)
bx 4)
x5)
x6)
x7)
bx 8)
x9)
x:)
bx ;)
x<)
x=)
bx >)
x?)
x@)
xA)
bx B)
b0 C)
b0 D)
bx E)
b0 F)
bx G)
1H)
xO)
xP)
xQ)
xR)
xS)
xT)
xU)
xV)
xW)
xX)
b0 \)
x])
bx ^)
x_)
0`)
bx a)
bx b)
xc)
xd)
0e)
bx f)
0j)
bx k)
bx l)
bx m)
b1000000000000000000000000000000000000 q)
xr)
bx s)
xt)
0u)
bx v)
bx w)
xx)
xy)
0z)
bx {)
0!*
bx "*
bx #*
bx $*
x(*
bx )*
x**
x+*
bx ,*
bx -*
x.*
x/*
00*
bx 1*
x5*
bx 6*
bx 7*
bx 8*
b0 <*
x=*
bx >*
x?*
0@*
bx A*
bx B*
xC*
xD*
0E*
bx F*
0J*
bx K*
bx L*
bx M*
bx Q*
xR*
bx S*
xT*
xU*
bx V*
bx W*
xX*
xY*
0Z*
bx [*
x_*
bx `*
bx a*
bx b*
xv*
xw*
xx*
bx y*
bx z*
x{*
x|*
x}*
bx ~*
bx !+
bx "+
x#+
x$+
x%+
x&+
bx '+
x(+
x)+
x*+
bx ++
x,+
x-+
bx .+
x/+
x0+
bx 1+
x2+
x3+
x4+
bx 5+
b0 6+
b0 7+
bx 8+
b0 9+
bx :+
1;+
xB+
xC+
xD+
xE+
xF+
xG+
xH+
xI+
xJ+
xK+
b0 O+
xP+
bx Q+
xR+
0S+
bx T+
bx U+
xV+
xW+
0X+
bx Y+
0]+
bx ^+
bx _+
bx `+
b1000000000000000000000000000000000000 d+
xe+
bx f+
xg+
0h+
bx i+
bx j+
xk+
xl+
0m+
bx n+
0r+
bx s+
bx t+
bx u+
xy+
bx z+
x{+
x|+
bx }+
bx ~+
x!,
x",
0#,
bx $,
x(,
bx ),
bx *,
bx +,
b0 /,
x0,
bx 1,
x2,
03,
bx 4,
bx 5,
x6,
x7,
08,
bx 9,
0=,
bx >,
bx ?,
bx @,
bx D,
xE,
bx F,
xG,
xH,
bx I,
bx J,
xK,
xL,
0M,
bx N,
xR,
bx S,
bx T,
bx U,
xu,
xv,
xw,
xx,
bx y,
bx z,
x{,
x|,
x},
x~,
bx !-
bx "-
bx #-
bx $-
x%-
x&-
x'-
x(-
bx )-
x*-
x+-
x,-
x--
bx .-
bx /-
bx 0-
x1-
x2-
x3-
x4-
bx 5-
bx 6-
bx 7-
x8-
x9-
x:-
x;-
bx <-
bx =-
x>-
x?-
x@-
xA-
bx B-
bx C-
xD-
xE-
xF-
xG-
bx H-
bx I-
bx J-
xK-
xL-
xM-
xN-
bx O-
xP-
xQ-
xR-
xS-
bx T-
bx U-
bx V-
bx W-
bx X-
bx Y-
bx Z-
bx [-
bx \-
bx ]-
bx ^-
bx _-
bx `-
bx a-
bx b-
bx c-
bx d-
bx e-
bx f-
bx g-
bx h-
bx i-
bx j-
bx k-
bx l-
bx m-
bx n-
bx o-
bx p-
bx q-
bx r-
bx s-
xu-
xv-
bx w-
xx-
xy-
xz-
bx {-
x|-
x}-
bx ~-
x!.
x".
bx #.
x$.
x%.
x&.
bx '.
x*.
bx +.
x,.
x-.
bx ..
x1.
bx 2.
x3.
x4.
bx 5.
x8.
x9.
bx :.
x;.
bx <.
x?.
bx @.
xA.
xB.
bx C.
xF.
xG.
bx H.
xI.
bx J.
x^.
x_.
bx `.
xa.
xb.
xc.
bx d.
xe.
xf.
bx g.
xh.
xi.
bx j.
xk.
xl.
xm.
bx n.
bx o.
bx p.
bx q.
bx r.
bx s.
bx t.
bx u.
bx v.
bx w.
bx x.
bx y.
bx z.
bx {.
bx |.
bx }.
bx ~.
bx !/
x"/
x#/
bx $/
bx %/
bx &/
x'/
bx (/
bx )/
x*/
bx +/
bx ,/
b0 -/
b111111111111 ./
b1000000000000 //
b1111111111111 0/
b10000000000000 1/
b10111111111111 2/
b11000000000000 3/
b11111111111111 4/
x5/
x6/
x7/
x8/
bx 9/
x:/
x;/
b0xxxxxxxx </
bx =/
bx >/
bx ?/
x@/
b1111 A/
bx E/
xF/
xG/
bx H/
xI/
xJ/
xK/
bx L/
bx M/
xN/
xO/
0P/
bx Q/
xU/
bx V/
bx W/
bx X/
bx \/
x]/
x^/
bx _/
x`/
xa/
xb/
bx c/
bx d/
xe/
xf/
0g/
bx h/
xl/
bx m/
bx n/
bx o/
xu/
bx v/
bx w/
xx/
0y/
0z/
0{/
bx |/
b0 }/
b0 ~/
b0 !0
bx "0
b0 #0
b0 $0
b0 %0
0&0
0'0
0(0
0)0
x+0
bx ,0
bx -0
bx .0
bx /0
b0xxxxxxxx 30
x40
x50
bx 60
x70
x80
x90
bx :0
bx ;0
x<0
x=0
0>0
bx ?0
xC0
bx D0
bx E0
bx F0
xL0
bx M0
bx N0
xO0
0P0
0Q0
0R0
bx S0
b0 T0
b0 U0
b0 V0
bx W0
b0 X0
b0 Y0
b0 Z0
0[0
0\0
0]0
0^0
x`0
bx a0
bx b0
bx c0
bx d0
xf0
xg0
bx h0
xi0
xj0
xk0
bx l0
xm0
xn0
bx o0
xp0
xq0
bx r0
xs0
xt0
xu0
bx v0
xy0
bx z0
x{0
x|0
bx }0
x"1
bx #1
x$1
x%1
bx &1
x)1
x*1
bx +1
x,1
bx -1
x01
bx 11
x21
x31
bx 41
x71
x81
bx 91
x:1
bx ;1
xO1
xP1
bx Q1
xR1
xS1
xT1
bx U1
xV1
xW1
bx X1
xY1
xZ1
bx [1
x\1
x]1
x^1
bx _1
bx `1
bx a1
bx b1
bx c1
bx d1
bx e1
bx f1
bx g1
bx h1
bx i1
bx j1
bx k1
bx l1
bx m1
bx n1
bx o1
bx p1
xq1
xr1
bx s1
bx t1
bx u1
xv1
bx w1
bx x1
xy1
bx z1
bx {1
b0 |1
b111111111111 }1
b1000000000000 ~1
b1111111111111 !2
b10000000000000 "2
b10111111111111 #2
b11000000000000 $2
b11111111111111 %2
x&2
x'2
x(2
x)2
bx *2
x+2
x,2
b0xxxxxxxx -2
bx .2
bx /2
bx 02
x12
b1111 22
bx 62
x72
x82
bx 92
x:2
x;2
x<2
bx =2
bx >2
x?2
x@2
0A2
bx B2
xF2
bx G2
bx H2
bx I2
bx M2
xN2
xO2
bx P2
xQ2
xR2
xS2
bx T2
bx U2
xV2
xW2
0X2
bx Y2
x]2
bx ^2
bx _2
bx `2
xf2
bx g2
bx h2
xi2
0j2
0k2
0l2
bx m2
b0 n2
b0 o2
b0 p2
bx q2
b0 r2
b0 s2
b0 t2
0u2
0v2
0w2
0x2
xz2
bx {2
bx |2
bx }2
bx ~2
b0xxxxxxxx $3
x%3
x&3
bx '3
x(3
x)3
x*3
bx +3
bx ,3
x-3
x.3
0/3
bx 03
x43
bx 53
bx 63
bx 73
x=3
bx >3
bx ?3
x@3
0A3
0B3
0C3
bx D3
b0 E3
b0 F3
b0 G3
bx H3
b0 I3
b0 J3
b0 K3
0L3
0M3
0N3
0O3
xQ3
bx R3
bx S3
bx T3
bx U3
xW3
xX3
bx Y3
xZ3
x[3
x\3
bx ]3
x^3
x_3
bx `3
xa3
xb3
bx c3
xd3
xe3
xf3
bx g3
xj3
bx k3
xl3
xm3
bx n3
xq3
bx r3
xs3
xt3
bx u3
xx3
xy3
bx z3
x{3
bx |3
x!4
bx "4
x#4
x$4
bx %4
x(4
x)4
bx *4
x+4
bx ,4
x@4
xA4
bx B4
xC4
xD4
xE4
bx F4
xG4
xH4
bx I4
xJ4
xK4
bx L4
xM4
xN4
xO4
bx P4
bx Q4
bx R4
bx S4
bx T4
bx U4
bx V4
bx W4
bx X4
bx Y4
bx Z4
bx [4
bx \4
bx ]4
bx ^4
bx _4
bx `4
bx a4
xb4
xc4
bx d4
bx e4
bx f4
xg4
bx h4
bx i4
xj4
bx k4
bx l4
b0 m4
b111111111111 n4
b1000000000000 o4
b1111111111111 p4
b10000000000000 q4
b10111111111111 r4
b11000000000000 s4
b11111111111111 t4
xu4
xv4
xw4
xx4
bx y4
xz4
x{4
b0xxxxxxxx |4
bx }4
bx ~4
bx !5
x"5
b1111 #5
bx '5
x(5
x)5
bx *5
x+5
x,5
x-5
bx .5
bx /5
x05
x15
025
bx 35
x75
bx 85
bx 95
bx :5
bx >5
x?5
x@5
bx A5
xB5
xC5
xD5
bx E5
bx F5
xG5
xH5
0I5
bx J5
xN5
bx O5
bx P5
bx Q5
xW5
bx X5
bx Y5
xZ5
0[5
0\5
0]5
bx ^5
b0 _5
b0 `5
b0 a5
bx b5
b0 c5
b0 d5
b0 e5
0f5
0g5
0h5
0i5
xk5
bx l5
bx m5
bx n5
bx o5
b0xxxxxxxx s5
xt5
xu5
bx v5
xw5
xx5
xy5
bx z5
bx {5
x|5
x}5
0~5
bx !6
x%6
bx &6
bx '6
bx (6
x.6
bx /6
bx 06
x16
026
036
046
bx 56
b0 66
b0 76
b0 86
bx 96
b0 :6
b0 ;6
b0 <6
0=6
0>6
0?6
0@6
xB6
bx C6
bx D6
bx E6
bx F6
xH6
xI6
bx J6
xK6
xL6
xM6
bx N6
xO6
xP6
bx Q6
xR6
xS6
bx T6
xU6
xV6
xW6
bx X6
x[6
bx \6
x]6
x^6
bx _6
xb6
bx c6
xd6
xe6
bx f6
xi6
xj6
bx k6
xl6
bx m6
xp6
bx q6
xr6
xs6
bx t6
xw6
xx6
bx y6
xz6
bx {6
x17
x27
bx 37
x47
x57
x67
bx 77
x87
x97
bx :7
x;7
x<7
bx =7
x>7
x?7
x@7
bx A7
bx B7
bx C7
bx D7
bx E7
bx F7
bx G7
bx H7
bx I7
bx J7
bx K7
bx L7
bx M7
bx N7
bx O7
bx P7
bx Q7
bx R7
xS7
xT7
bx U7
bx V7
bx W7
xX7
bx Y7
bx Z7
x[7
bx \7
bx ]7
b0 ^7
b111111111111 _7
b1000000000000 `7
b1111111111111 a7
b10000000000000 b7
b10111111111111 c7
b11000000000000 d7
b11111111111111 e7
xf7
xg7
xh7
xi7
bx j7
xk7
xl7
b0xxxxxxxx m7
bx n7
bx o7
bx p7
xq7
b1111 r7
bx v7
xw7
xx7
bx y7
xz7
x{7
x|7
bx }7
bx ~7
x!8
x"8
0#8
bx $8
x(8
bx )8
bx *8
bx +8
bx /8
x08
x18
bx 28
x38
x48
x58
bx 68
bx 78
x88
x98
0:8
bx ;8
x?8
bx @8
bx A8
bx B8
xH8
bx I8
bx J8
xK8
0L8
0M8
0N8
bx O8
b0 P8
b0 Q8
b0 R8
bx S8
b0 T8
b0 U8
b0 V8
0W8
0X8
0Y8
0Z8
x\8
bx ]8
bx ^8
bx _8
bx `8
b0xxxxxxxx d8
xe8
xf8
bx g8
xh8
xi8
xj8
bx k8
bx l8
xm8
xn8
0o8
bx p8
xt8
bx u8
bx v8
bx w8
x}8
bx ~8
bx !9
x"9
0#9
0$9
0%9
bx &9
b0 '9
b0 (9
b0 )9
bx *9
b0 +9
b0 ,9
b0 -9
0.9
0/9
009
019
x39
bx 49
bx 59
bx 69
bx 79
xa9
xb9
bx c9
xd9
xe9
xf9
bx g9
xh9
xi9
bx j9
xk9
xl9
bx m9
xn9
xo9
xp9
bx q9
bx %:
bx &:
bx ':
bx (:
bx ):
bx *:
bx +:
bx ,:
bx -:
bx .:
bx /:
bx 0:
bx 1:
bx 2:
bx 3:
bx 4:
bx 5:
x6:
x7:
bx 8:
x9:
x::
x;:
bx <:
x=:
x>:
bx ?:
x@:
xA:
bx B:
xC:
xD:
xE:
bx F:
xG:
bx H:
bx I:
bx J:
xK:
bx L:
bx M:
xN:
xO:
xP:
xQ:
xR:
xS:
xT:
xU:
xV:
xW:
x]:
bx ^:
bx _:
x`:
0a:
0b:
0c:
bx d:
b0 e:
b0 f:
b0 g:
bx h:
b0 i:
b0 j:
b0 k:
0l:
0m:
0n:
0o:
xq:
bx r:
bx s:
bx t:
bx u:
bx y:
xz:
x{:
bx |:
x}:
x~:
x!;
bx ";
bx #;
x$;
x%;
0&;
bx ';
x+;
bx ,;
bx -;
bx .;
x4;
bx 5;
bx 6;
x7;
08;
09;
0:;
bx ;;
b0 <;
b0 =;
b0 >;
bx ?;
b0 @;
b0 A;
b0 B;
0C;
0D;
0E;
0F;
xH;
bx I;
bx J;
bx K;
bx L;
xO;
xP;
bx Q;
xR;
bx S;
xV;
xW;
bx X;
xY;
bx Z;
x];
bx ^;
x_;
x`;
bx a;
xd;
xe;
bx f;
xg;
bx h;
xk;
bx l;
xm;
xn;
bx o;
xq;
xr;
bx s;
xt;
xu;
xv;
bx w;
xx;
xy;
bx z;
x{;
x|;
bx };
x~;
x!<
x"<
bx #<
bx 5<
bx 6<
bx 7<
bx 8<
bx 9<
bx :<
bx ;<
bx <<
bx =<
bx ><
bx ?<
bx @<
bx A<
bx B<
bx C<
bx D<
bx E<
xF<
xG<
bx H<
xI<
xJ<
xK<
bx L<
xM<
xN<
bx O<
xP<
xQ<
bx R<
xS<
xT<
xU<
bx V<
xW<
bx X<
bx Y<
bx Z<
x[<
bx \<
bx ]<
x^<
x_<
x`<
xa<
xb<
xc<
xd<
xe<
xf<
xg<
xm<
bx n<
bx o<
xp<
0q<
0r<
0s<
bx t<
b0 u<
b0 v<
b0 w<
bx x<
b0 y<
b0 z<
b0 {<
0|<
0}<
0~<
0!=
x#=
bx $=
bx %=
bx &=
bx '=
bx +=
x,=
x-=
bx .=
x/=
x0=
x1=
bx 2=
bx 3=
x4=
x5=
06=
bx 7=
x;=
bx <=
bx ==
bx >=
xD=
bx E=
bx F=
xG=
0H=
0I=
0J=
bx K=
b0 L=
b0 M=
b0 N=
bx O=
b0 P=
b0 Q=
b0 R=
0S=
0T=
0U=
0V=
xX=
bx Y=
bx Z=
bx [=
bx \=
x_=
x`=
bx a=
xb=
bx c=
xf=
xg=
bx h=
xi=
bx j=
xm=
bx n=
xo=
xp=
bx q=
xt=
xu=
bx v=
xw=
bx x=
x{=
bx |=
x}=
x~=
bx !>
x#>
x$>
bx %>
x&>
x'>
x(>
bx )>
x*>
x+>
bx ,>
x->
x.>
bx />
x0>
x1>
x2>
bx 3>
bx E>
bx F>
bx G>
bx H>
bx I>
bx J>
bx K>
bx L>
bx M>
bx N>
bx O>
bx P>
bx Q>
bx R>
bx S>
bx T>
bx U>
xV>
xW>
bx X>
xY>
xZ>
x[>
bx \>
x]>
x^>
bx _>
x`>
xa>
bx b>
xc>
xd>
xe>
bx f>
xg>
bx h>
bx i>
bx j>
xk>
bx l>
bx m>
xn>
xo>
xp>
xq>
xr>
xs>
xt>
xu>
xv>
xw>
x}>
bx ~>
bx !?
x"?
0#?
0$?
0%?
bx &?
b0 '?
b0 (?
b0 )?
bx *?
b0 +?
b0 ,?
b0 -?
0.?
0/?
00?
01?
x3?
bx 4?
bx 5?
bx 6?
bx 7?
bx ;?
x<?
x=?
bx >?
x??
x@?
xA?
bx B?
bx C?
xD?
xE?
0F?
bx G?
xK?
bx L?
bx M?
bx N?
xT?
bx U?
bx V?
xW?
0X?
0Y?
0Z?
bx [?
b0 \?
b0 ]?
b0 ^?
bx _?
b0 `?
b0 a?
b0 b?
0c?
0d?
0e?
0f?
xh?
bx i?
bx j?
bx k?
bx l?
xo?
xp?
bx q?
xr?
bx s?
xv?
xw?
bx x?
xy?
bx z?
x}?
bx ~?
x!@
x"@
bx #@
x&@
x'@
bx (@
x)@
bx *@
x-@
bx .@
x/@
x0@
bx 1@
x3@
x4@
bx 5@
x6@
x7@
x8@
bx 9@
x:@
x;@
bx <@
x=@
x>@
bx ?@
x@@
xA@
xB@
bx C@
bx U@
bx V@
bx W@
bx X@
bx Y@
bx Z@
bx [@
bx \@
bx ]@
bx ^@
bx _@
bx `@
bx a@
bx b@
bx c@
bx d@
bx e@
xf@
xg@
bx h@
xi@
xj@
xk@
bx l@
xm@
xn@
bx o@
xp@
xq@
bx r@
xs@
xt@
xu@
bx v@
xw@
bx x@
bx y@
bx z@
x{@
bx |@
bx }@
x~@
x!A
x"A
x#A
x$A
x%A
x&A
x'A
x(A
x)A
x/A
bx 0A
bx 1A
x2A
03A
04A
05A
bx 6A
b0 7A
b0 8A
b0 9A
bx :A
b0 ;A
b0 <A
b0 =A
0>A
0?A
0@A
0AA
xCA
bx DA
bx EA
bx FA
bx GA
bx KA
xLA
xMA
bx NA
xOA
xPA
xQA
bx RA
bx SA
xTA
xUA
0VA
bx WA
x[A
bx \A
bx ]A
bx ^A
xdA
bx eA
bx fA
xgA
0hA
0iA
0jA
bx kA
b0 lA
b0 mA
b0 nA
bx oA
b0 pA
b0 qA
b0 rA
0sA
0tA
0uA
0vA
xxA
bx yA
bx zA
bx {A
bx |A
x!B
x"B
bx #B
x$B
bx %B
x(B
x)B
bx *B
x+B
bx ,B
x/B
bx 0B
x1B
x2B
bx 3B
x6B
x7B
bx 8B
x9B
bx :B
x=B
bx >B
x?B
x@B
bx AB
xVB
xWB
bx XB
xYB
xZB
x[B
bx \B
x]B
x^B
bx _B
x`B
xaB
bx bB
xcB
xdB
xeB
bx fB
xgB
bx hB
bx iB
bx jB
bx kB
bx lB
bx mB
bx nB
bx oB
bx pB
bx qB
xrB
xsB
xtB
bx uB
bx vB
xwB
xxB
xyB
bx zB
bx {B
bx |B
bx }B
bx ~B
bx !C
bx "C
bx #C
bx $C
bx %C
x&C
x'C
bx (C
bx )C
b0 *C
bx +C
b0 ,C
1-C
bx .C
bx /C
x6C
x7C
x8C
x9C
x:C
x;C
x<C
x=C
x>C
x?C
xCC
bx DC
xEC
xFC
bx GC
bx HC
xIC
xJC
0KC
bx LC
xPC
bx QC
bx RC
bx SC
bx WC
xXC
bx YC
xZC
x[C
bx \C
bx ]C
x^C
x_C
0`C
bx aC
xeC
bx fC
bx gC
bx hC
b0 lC
xmC
bx nC
xoC
0pC
bx qC
bx rC
xsC
xtC
0uC
bx vC
0zC
bx {C
bx |C
bx }C
x#D
bx $D
x%D
x&D
bx 'D
bx (D
x)D
x*D
0+D
bx ,D
x0D
bx 1D
bx 2D
bx 3D
b1000000000000000000000000000000000000000000 7D
x8D
bx 9D
x:D
0;D
bx <D
bx =D
x>D
x?D
0@D
bx AD
0ED
bx FD
bx GD
bx HD
x]D
x^D
bx _D
x`D
xaD
xbD
bx cD
xdD
xeD
bx fD
xgD
xhD
bx iD
xjD
xkD
xlD
bx mD
xnD
bx oD
bx pD
bx qD
bx rD
bx sD
bx tD
bx uD
bx vD
bx wD
bx xD
xyD
xzD
x{D
bx |D
bx }D
x~D
x!E
x"E
bx #E
bx $E
bx %E
bx &E
bx 'E
bx (E
bx )E
bx *E
bx +E
bx ,E
x-E
x.E
bx /E
bx 0E
b0 1E
bx 2E
b0 3E
14E
bx 5E
bx 6E
x=E
x>E
x?E
x@E
xAE
xBE
xCE
xDE
xEE
xFE
xJE
bx KE
xLE
xME
bx NE
bx OE
xPE
xQE
0RE
bx SE
xWE
bx XE
bx YE
bx ZE
bx ^E
x_E
bx `E
xaE
xbE
bx cE
bx dE
xeE
xfE
0gE
bx hE
xlE
bx mE
bx nE
bx oE
b0 sE
xtE
bx uE
xvE
0wE
bx xE
bx yE
xzE
x{E
0|E
bx }E
0#F
bx $F
bx %F
bx &F
x*F
bx +F
x,F
x-F
bx .F
bx /F
x0F
x1F
02F
bx 3F
x7F
bx 8F
bx 9F
bx :F
b1000000000000000000000000000000000000000000 >F
x?F
bx @F
xAF
0BF
bx CF
bx DF
xEF
xFF
0GF
bx HF
0LF
bx MF
bx NF
bx OF
xdF
xeF
bx fF
xgF
xhF
xiF
bx jF
xkF
xlF
bx mF
xnF
xoF
bx pF
xqF
xrF
xsF
bx tF
xuF
bx vF
bx wF
bx xF
bx yF
bx zF
bx {F
bx |F
bx }F
bx ~F
bx !G
x"G
x#G
x$G
bx %G
bx &G
x'G
x(G
x)G
bx *G
bx +G
bx ,G
bx -G
bx .G
bx /G
bx 0G
bx 1G
bx 2G
bx 3G
x4G
x5G
bx 6G
bx 7G
b0 8G
bx 9G
b0 :G
1;G
bx <G
bx =G
xDG
xEG
xFG
xGG
xHG
xIG
xJG
xKG
xLG
xMG
xQG
bx RG
xSG
xTG
bx UG
bx VG
xWG
xXG
0YG
bx ZG
x^G
bx _G
bx `G
bx aG
bx eG
xfG
bx gG
xhG
xiG
bx jG
bx kG
xlG
xmG
0nG
bx oG
xsG
bx tG
bx uG
bx vG
b0 zG
x{G
bx |G
x}G
0~G
bx !H
bx "H
x#H
x$H
0%H
bx &H
0*H
bx +H
bx ,H
bx -H
x1H
bx 2H
x3H
x4H
bx 5H
bx 6H
x7H
x8H
09H
bx :H
x>H
bx ?H
bx @H
bx AH
b1000000000000000000000000000000000000000000 EH
xFH
bx GH
xHH
0IH
bx JH
bx KH
xLH
xMH
0NH
bx OH
0SH
bx TH
bx UH
bx VH
xkH
xlH
bx mH
xnH
xoH
xpH
bx qH
xrH
xsH
bx tH
xuH
xvH
bx wH
xxH
xyH
xzH
bx {H
x|H
bx }H
bx ~H
bx !I
bx "I
bx #I
bx $I
bx %I
bx &I
bx 'I
bx (I
x)I
x*I
x+I
bx ,I
bx -I
x.I
x/I
x0I
bx 1I
bx 2I
bx 3I
bx 4I
bx 5I
bx 6I
bx 7I
bx 8I
bx 9I
bx :I
x;I
x<I
bx =I
bx >I
b0 ?I
bx @I
b0 AI
1BI
bx CI
bx DI
xKI
xLI
xMI
xNI
xOI
xPI
xQI
xRI
xSI
xTI
xXI
bx YI
xZI
x[I
bx \I
bx ]I
x^I
x_I
0`I
bx aI
xeI
bx fI
bx gI
bx hI
bx lI
xmI
bx nI
xoI
xpI
bx qI
bx rI
xsI
xtI
0uI
bx vI
xzI
bx {I
bx |I
bx }I
b0 #J
x$J
bx %J
x&J
0'J
bx (J
bx )J
x*J
x+J
0,J
bx -J
01J
bx 2J
bx 3J
bx 4J
x8J
bx 9J
x:J
x;J
bx <J
bx =J
x>J
x?J
0@J
bx AJ
xEJ
bx FJ
bx GJ
bx HJ
b1000000000000000000000000000000000000000000 LJ
xMJ
bx NJ
xOJ
0PJ
bx QJ
bx RJ
xSJ
xTJ
0UJ
bx VJ
0ZJ
bx [J
bx \J
bx ]J
$end
#50
1!
1`
#150
1"
1c
#350
1#
1=!
#750
1$
#800
0!
0`
#900
0"
0c
#1100
0#
0=!
#1500
0$
#1550
1!
1`
#1650
1"
1c
#1850
1#
1=!
#2250
1$
#2300
0!
0`
#2400
0"
0c
#2600
0#
0=!
#3000
0$
#3050
1!
1`
#3150
1"
1c
#3350
1#
1=!
#3750
1$
#3800
0!
0`
#3900
0"
0c
#4100
0#
0=!
#4500
0$
#4550
1!
1`
#4650
1"
1c
#4850
1#
1=!
#5250
1$
#5300
0!
0`
#5400
0"
0c
#5600
0#
0=!
#6000
0$
#6050
1!
1`
#6150
1"
1c
#6350
1#
1=!
#6750
1$
#6800
0!
0`
#6900
0"
0c
#7100
0#
0=!
#7500
0$
#7550
1!
1`
#7650
1"
1c
#7850
1#
1=!
#8250
1$
#8300
0!
0`
#8400
0"
0c
#8600
0#
0=!
#9000
0$
#9050
1!
1`
#9150
1"
1c
#9350
1#
1=!
#9750
1$
#9800
0!
0`
#9900
0"
0c
#10000

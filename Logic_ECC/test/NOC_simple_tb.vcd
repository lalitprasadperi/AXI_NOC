$date
    Apr 25, 2024  22:42:46
$end
$version
    TOOL:	ncsim(64)	15.20-s073
$end
$timescale
    1 ns
$end

$scope module testbench $end
$var reg       1 !    clk  $end
$var reg       1 "    clk_div2  $end
$var reg       1 #    clk_div4  $end
$var reg       1 $    clk_div8  $end

$scope module axicb_crossbar_top $end
$var parameter 32 %    AXI_ADDR_W  $end
$var parameter 32 &    AXI_ID_W  $end
$var parameter 32 '    AXI_DATA_W  $end
$var parameter 32 (    MST_NB  $end
$var parameter 32 )    SLV_NB  $end
$var parameter 32 *    MST_PIPELINE  $end
$var parameter 32 +    SLV_PIPELINE  $end
$var parameter 32 ,    STRB_MODE  $end
$var parameter 32 -    USER_SUPPORT  $end
$var parameter 32 .    AXI_AUSER_W  $end
$var parameter 32 /    AXI_WUSER_W  $end
$var parameter 32 0    AXI_BUSER_W  $end
$var parameter 32 1    AXI_RUSER_W  $end
$var parameter 32 2    TIMEOUT_VALUE  $end
$var parameter 32 3    TIMEOUT_ENABLE  $end
$var parameter 32 4    MST0_CDC  $end
$var parameter 32 5    MST0_OSTDREQ_NUM  $end
$var parameter 32 6    MST0_PRIORITY  $end
$var parameter  4 7    MST0_ROUTES [3:0] $end
$var parameter  8 8    MST0_ID_MASK [7:0] $end
$var parameter 32 9    MST0_RW  $end
$var parameter 32 :    MST1_CDC  $end
$var parameter 32 ;    MST1_OSTDREQ_NUM  $end
$var parameter 32 <    MST1_PRIORITY  $end
$var parameter  4 =    MST1_ROUTES [3:0] $end
$var parameter  8 >    MST1_ID_MASK [7:0] $end
$var parameter 32 ?    MST1_RW  $end
$var parameter 32 @    MST2_CDC  $end
$var parameter 32 A    MST2_OSTDREQ_NUM  $end
$var parameter 32 B    MST2_PRIORITY  $end
$var parameter  4 C    MST2_ROUTES [3:0] $end
$var parameter  8 D    MST2_ID_MASK [7:0] $end
$var parameter 32 E    MST2_RW  $end
$var parameter 32 F    MST3_CDC  $end
$var parameter 32 G    MST3_OSTDREQ_NUM  $end
$var parameter 32 H    MST3_PRIORITY  $end
$var parameter  4 I    MST3_ROUTES [3:0] $end
$var parameter  8 J    MST3_ID_MASK [7:0] $end
$var parameter 32 K    MST3_RW  $end
$var parameter 32 L    SLV0_CDC  $end
$var parameter 32 M    SLV0_START_ADDR  $end
$var parameter 32 N    SLV0_END_ADDR  $end
$var parameter 32 O    SLV0_OSTDREQ_NUM  $end
$var parameter 32 P    SLV0_KEEP_BASE_ADDR  $end
$var parameter 32 Q    SLV1_CDC  $end
$var parameter 32 R    SLV1_START_ADDR  $end
$var parameter 32 S    SLV1_END_ADDR  $end
$var parameter 32 T    SLV1_OSTDREQ_NUM  $end
$var parameter 32 U    SLV1_KEEP_BASE_ADDR  $end
$var parameter 32 V    SLV2_CDC  $end
$var parameter 32 W    SLV2_START_ADDR  $end
$var parameter 32 X    SLV2_END_ADDR  $end
$var parameter 32 Y    SLV2_OSTDREQ_NUM  $end
$var parameter 32 Z    SLV2_KEEP_BASE_ADDR  $end
$var parameter 32 [    SLV3_CDC  $end
$var parameter 32 \    SLV3_START_ADDR  $end
$var parameter 32 ]    SLV3_END_ADDR  $end
$var parameter 32 ^    SLV3_OSTDREQ_NUM  $end
$var parameter 32 _    SLV3_KEEP_BASE_ADDR  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c    slv0_aclk  $end
$var wire      1 d    slv0_aresetn  $end
$var wire      1 e    slv0_srst  $end
$var wire      1 e    slv0_awvalid  $end
$var reg       1 f    slv0_awready  $end
$var wire     16 g    slv0_awaddr [15:0] $end
$var wire      3 h    slv0_awprot [2:0] $end
$var wire      8 i    slv0_awid [7:0] $end
$var wire      1 e    slv0_awuser [0] $end
$var wire      1 e    slv0_wvalid  $end
$var reg       1 j    slv0_wready  $end
$var wire     40 k    slv0_wdata [39:0] $end
$var wire      5 l    slv0_wstrb [4:0] $end
$var wire      1 e    slv0_wuser [0] $end
$var reg       1 m    slv0_bvalid  $end
$var wire      1 e    slv0_bready  $end
$var reg       8 n    slv0_bid [7:0] $end
$var reg       2 o    slv0_bresp [1:0] $end
$var reg       1 p    slv0_buser [0:0] $end
$var wire      1 e    slv0_arvalid  $end
$var reg       1 q    slv0_arready  $end
$var wire     16 g    slv0_araddr [15:0] $end
$var wire      3 h    slv0_arprot [2:0] $end
$var wire      8 i    slv0_arid [7:0] $end
$var wire      1 e    slv0_aruser [0] $end
$var reg       1 r    slv0_rvalid  $end
$var wire      1 e    slv0_rready  $end
$var reg       8 s    slv0_rid [7:0] $end
$var reg       2 t    slv0_rresp [1:0] $end
$var reg      40 u    slv0_rdata [39:0] $end
$var reg       1 v    slv0_ruser [0:0] $end
$var wire      1 c    slv1_aclk  $end
$var wire      1 d    slv1_aresetn  $end
$var wire      1 e    slv1_srst  $end
$var wire      1 e    slv1_awvalid  $end
$var reg       1 w    slv1_awready  $end
$var wire     16 g    slv1_awaddr [15:0] $end
$var wire      3 h    slv1_awprot [2:0] $end
$var wire      8 i    slv1_awid [7:0] $end
$var wire      1 e    slv1_awuser [0] $end
$var wire      1 e    slv1_wvalid  $end
$var reg       1 x    slv1_wready  $end
$var wire     40 k    slv1_wdata [39:0] $end
$var wire      5 l    slv1_wstrb [4:0] $end
$var wire      1 e    slv1_wuser [0] $end
$var reg       1 y    slv1_bvalid  $end
$var wire      1 e    slv1_bready  $end
$var reg       8 z    slv1_bid [7:0] $end
$var reg       2 {    slv1_bresp [1:0] $end
$var reg       1 |    slv1_buser [0:0] $end
$var wire      1 e    slv1_arvalid  $end
$var reg       1 }    slv1_arready  $end
$var wire     16 g    slv1_araddr [15:0] $end
$var wire      3 h    slv1_arprot [2:0] $end
$var wire      8 i    slv1_arid [7:0] $end
$var wire      1 e    slv1_aruser [0] $end
$var reg       1 ~    slv1_rvalid  $end
$var wire      1 e    slv1_rready  $end
$var reg       8 !!   slv1_rid [7:0] $end
$var reg       2 "!   slv1_rresp [1:0] $end
$var reg      40 #!   slv1_rdata [39:0] $end
$var reg       1 $!   slv1_ruser [0:0] $end
$var wire      1 c    slv2_aclk  $end
$var wire      1 d    slv2_aresetn  $end
$var wire      1 e    slv2_srst  $end
$var wire      1 e    slv2_awvalid  $end
$var reg       1 %!   slv2_awready  $end
$var wire     16 g    slv2_awaddr [15:0] $end
$var wire      3 h    slv2_awprot [2:0] $end
$var wire      8 i    slv2_awid [7:0] $end
$var wire      1 e    slv2_awuser [0] $end
$var wire      1 e    slv2_wvalid  $end
$var reg       1 &!   slv2_wready  $end
$var wire     40 k    slv2_wdata [39:0] $end
$var wire      5 l    slv2_wstrb [4:0] $end
$var wire      1 e    slv2_wuser [0] $end
$var reg       1 '!   slv2_bvalid  $end
$var wire      1 e    slv2_bready  $end
$var reg       8 (!   slv2_bid [7:0] $end
$var reg       2 )!   slv2_bresp [1:0] $end
$var reg       1 *!   slv2_buser [0:0] $end
$var wire      1 e    slv2_arvalid  $end
$var reg       1 +!   slv2_arready  $end
$var wire     16 g    slv2_araddr [15:0] $end
$var wire      3 h    slv2_arprot [2:0] $end
$var wire      8 i    slv2_arid [7:0] $end
$var wire      1 e    slv2_aruser [0] $end
$var reg       1 ,!   slv2_rvalid  $end
$var wire      1 e    slv2_rready  $end
$var reg       8 -!   slv2_rid [7:0] $end
$var reg       2 .!   slv2_rresp [1:0] $end
$var reg      40 /!   slv2_rdata [39:0] $end
$var reg       1 0!   slv2_ruser [0:0] $end
$var wire      1 c    slv3_aclk  $end
$var wire      1 d    slv3_aresetn  $end
$var wire      1 e    slv3_srst  $end
$var wire      1 e    slv3_awvalid  $end
$var reg       1 1!   slv3_awready  $end
$var wire     16 g    slv3_awaddr [15:0] $end
$var wire      3 h    slv3_awprot [2:0] $end
$var wire      8 i    slv3_awid [7:0] $end
$var wire      1 e    slv3_awuser [0] $end
$var wire      1 e    slv3_wvalid  $end
$var reg       1 2!   slv3_wready  $end
$var wire     40 k    slv3_wdata [39:0] $end
$var wire      5 l    slv3_wstrb [4:0] $end
$var wire      1 e    slv3_wuser [0] $end
$var reg       1 3!   slv3_bvalid  $end
$var wire      1 e    slv3_bready  $end
$var reg       8 4!   slv3_bid [7:0] $end
$var reg       2 5!   slv3_bresp [1:0] $end
$var reg       1 6!   slv3_buser [0:0] $end
$var wire      1 e    slv3_arvalid  $end
$var reg       1 7!   slv3_arready  $end
$var wire     16 g    slv3_araddr [15:0] $end
$var wire      3 h    slv3_arprot [2:0] $end
$var wire      8 i    slv3_arid [7:0] $end
$var wire      1 e    slv3_aruser [0] $end
$var reg       1 8!   slv3_rvalid  $end
$var wire      1 e    slv3_rready  $end
$var reg       8 9!   slv3_rid [7:0] $end
$var reg       2 :!   slv3_rresp [1:0] $end
$var reg      40 ;!   slv3_rdata [39:0] $end
$var reg       1 <!   slv3_ruser [0:0] $end
$var wire      1 =!   mst0_aclk  $end
$var wire      1 d    mst0_aresetn  $end
$var wire      1 e    mst0_srst  $end
$var reg       1 >!   mst0_awvalid  $end
$var wire      1 e    mst0_awready  $end
$var reg      16 ?!   mst0_awaddr [15:0] $end
$var reg       3 @!   mst0_awprot [2:0] $end
$var reg       8 A!   mst0_awid [7:0] $end
$var reg       1 B!   mst0_awuser [0:0] $end
$var reg       1 C!   mst0_wvalid  $end
$var wire      1 e    mst0_wready  $end
$var reg      40 D!   mst0_wdata [39:0] $end
$var reg       5 E!   mst0_wstrb [4:0] $end
$var reg       1 F!   mst0_wuser [0:0] $end
$var wire      1 e    mst0_bvalid  $end
$var reg       1 G!   mst0_bready  $end
$var wire      8 i    mst0_bid [7:0] $end
$var wire      2 H!   mst0_bresp [1:0] $end
$var wire      1 e    mst0_buser [0] $end
$var reg       1 I!   mst0_arvalid  $end
$var wire      1 e    mst0_arready  $end
$var reg      16 J!   mst0_araddr [15:0] $end
$var reg       3 K!   mst0_arprot [2:0] $end
$var reg       8 L!   mst0_arid [7:0] $end
$var reg       1 M!   mst0_aruser [0:0] $end
$var wire      1 e    mst0_rvalid  $end
$var reg       1 N!   mst0_rready  $end
$var wire      8 i    mst0_rid [7:0] $end
$var wire      2 H!   mst0_rresp [1:0] $end
$var wire     40 k    mst0_rdata [39:0] $end
$var wire      1 e    mst0_ruser [0] $end
$var wire      1 =!   mst1_aclk  $end
$var wire      1 d    mst1_aresetn  $end
$var wire      1 e    mst1_srst  $end
$var reg       1 O!   mst1_awvalid  $end
$var wire      1 e    mst1_awready  $end
$var reg      16 P!   mst1_awaddr [15:0] $end
$var reg       3 Q!   mst1_awprot [2:0] $end
$var reg       8 R!   mst1_awid [7:0] $end
$var reg       1 S!   mst1_awuser [0:0] $end
$var reg       1 T!   mst1_wvalid  $end
$var wire      1 e    mst1_wready  $end
$var reg      40 U!   mst1_wdata [39:0] $end
$var reg       5 V!   mst1_wstrb [4:0] $end
$var reg       1 W!   mst1_wuser [0:0] $end
$var wire      1 e    mst1_bvalid  $end
$var reg       1 X!   mst1_bready  $end
$var wire      8 i    mst1_bid [7:0] $end
$var wire      2 H!   mst1_bresp [1:0] $end
$var wire      1 e    mst1_buser [0] $end
$var reg       1 Y!   mst1_arvalid  $end
$var wire      1 e    mst1_arready  $end
$var reg      16 Z!   mst1_araddr [15:0] $end
$var reg       3 [!   mst1_arprot [2:0] $end
$var reg       8 \!   mst1_arid [7:0] $end
$var reg       1 ]!   mst1_aruser [0:0] $end
$var wire      1 e    mst1_rvalid  $end
$var reg       1 ^!   mst1_rready  $end
$var wire      8 i    mst1_rid [7:0] $end
$var wire      2 H!   mst1_rresp [1:0] $end
$var wire     40 k    mst1_rdata [39:0] $end
$var wire      1 e    mst1_ruser [0] $end
$var wire      1 =!   mst2_aclk  $end
$var wire      1 d    mst2_aresetn  $end
$var wire      1 e    mst2_srst  $end
$var reg       1 _!   mst2_awvalid  $end
$var wire      1 e    mst2_awready  $end
$var reg      16 `!   mst2_awaddr [15:0] $end
$var reg       3 a!   mst2_awprot [2:0] $end
$var reg       8 b!   mst2_awid [7:0] $end
$var reg       1 c!   mst2_awuser [0:0] $end
$var reg       1 d!   mst2_wvalid  $end
$var wire      1 e    mst2_wready  $end
$var reg      40 e!   mst2_wdata [39:0] $end
$var reg       5 f!   mst2_wstrb [4:0] $end
$var reg       1 g!   mst2_wuser [0:0] $end
$var wire      1 e    mst2_bvalid  $end
$var reg       1 h!   mst2_bready  $end
$var wire      8 i    mst2_bid [7:0] $end
$var wire      2 H!   mst2_bresp [1:0] $end
$var wire      1 e    mst2_buser [0] $end
$var reg       1 i!   mst2_arvalid  $end
$var wire      1 e    mst2_arready  $end
$var reg      16 j!   mst2_araddr [15:0] $end
$var reg       3 k!   mst2_arprot [2:0] $end
$var reg       8 l!   mst2_arid [7:0] $end
$var reg       1 m!   mst2_aruser [0:0] $end
$var wire      1 e    mst2_rvalid  $end
$var reg       1 n!   mst2_rready  $end
$var wire      8 i    mst2_rid [7:0] $end
$var wire      2 H!   mst2_rresp [1:0] $end
$var wire     40 k    mst2_rdata [39:0] $end
$var wire      1 e    mst2_ruser [0] $end
$var wire      1 =!   mst3_aclk  $end
$var wire      1 d    mst3_aresetn  $end
$var wire      1 e    mst3_srst  $end
$var reg       1 o!   mst3_awvalid  $end
$var wire      1 e    mst3_awready  $end
$var reg      16 p!   mst3_awaddr [15:0] $end
$var reg       3 q!   mst3_awprot [2:0] $end
$var reg       8 r!   mst3_awid [7:0] $end
$var reg       1 s!   mst3_awuser [0:0] $end
$var reg       1 t!   mst3_wvalid  $end
$var wire      1 e    mst3_wready  $end
$var reg      40 u!   mst3_wdata [39:0] $end
$var reg       5 v!   mst3_wstrb [4:0] $end
$var reg       1 w!   mst3_wuser [0:0] $end
$var wire      1 e    mst3_bvalid  $end
$var reg       1 x!   mst3_bready  $end
$var wire      8 i    mst3_bid [7:0] $end
$var wire      2 H!   mst3_bresp [1:0] $end
$var wire      1 e    mst3_buser [0] $end
$var reg       1 y!   mst3_arvalid  $end
$var wire      1 e    mst3_arready  $end
$var reg      16 z!   mst3_araddr [15:0] $end
$var reg       3 {!   mst3_arprot [2:0] $end
$var reg       8 |!   mst3_arid [7:0] $end
$var reg       1 }!   mst3_aruser [0:0] $end
$var wire      1 e    mst3_rvalid  $end
$var reg       1 ~!   mst3_rready  $end
$var wire      8 i    mst3_rid [7:0] $end
$var wire      2 H!   mst3_rresp [1:0] $end
$var wire     40 k    mst3_rdata [39:0] $end
$var wire      1 e    mst3_ruser [0] $end

$scope module axi4lite_crossbar_inst $end
$var parameter 32 !"   AXI_ADDR_W  $end
$var parameter 32 ""   AXI_ID_W  $end
$var parameter 32 #"   AXI_DATA_W  $end
$var parameter 32 $"   MST_NB  $end
$var parameter 32 %"   SLV_NB  $end
$var parameter 32 &"   MST_PIPELINE  $end
$var parameter 32 '"   SLV_PIPELINE  $end
$var parameter 32 ("   STRB_MODE  $end
$var parameter 32 )"   AXI_SIGNALING  $end
$var parameter 32 *"   USER_SUPPORT  $end
$var parameter 32 +"   AXI_AUSER_W  $end
$var parameter 32 ,"   AXI_WUSER_W  $end
$var parameter 32 -"   AXI_BUSER_W  $end
$var parameter 32 ."   AXI_RUSER_W  $end
$var parameter 32 /"   TIMEOUT_VALUE  $end
$var parameter 32 0"   TIMEOUT_ENABLE  $end
$var parameter 32 1"   MST0_CDC  $end
$var parameter 32 2"   MST0_OSTDREQ_NUM  $end
$var parameter 32 3"   MST0_OSTDREQ_SIZE  $end
$var parameter 32 4"   MST0_PRIORITY  $end
$var parameter  4 5"   MST0_ROUTES [3:0] $end
$var parameter  8 6"   MST0_ID_MASK [7:0] $end
$var parameter 32 7"   MST0_RW  $end
$var parameter 32 8"   MST1_CDC  $end
$var parameter 32 9"   MST1_OSTDREQ_NUM  $end
$var parameter 32 :"   MST1_OSTDREQ_SIZE  $end
$var parameter 32 ;"   MST1_PRIORITY  $end
$var parameter  4 <"   MST1_ROUTES [3:0] $end
$var parameter  8 ="   MST1_ID_MASK [7:0] $end
$var parameter 32 >"   MST1_RW  $end
$var parameter 32 ?"   MST2_CDC  $end
$var parameter 32 @"   MST2_OSTDREQ_NUM  $end
$var parameter 32 A"   MST2_OSTDREQ_SIZE  $end
$var parameter 32 B"   MST2_PRIORITY  $end
$var parameter  4 C"   MST2_ROUTES [3:0] $end
$var parameter  8 D"   MST2_ID_MASK [7:0] $end
$var parameter 32 E"   MST2_RW  $end
$var parameter 32 F"   MST3_CDC  $end
$var parameter 32 G"   MST3_OSTDREQ_NUM  $end
$var parameter 32 H"   MST3_OSTDREQ_SIZE  $end
$var parameter 32 I"   MST3_PRIORITY  $end
$var parameter  4 J"   MST3_ROUTES [3:0] $end
$var parameter  8 K"   MST3_ID_MASK [7:0] $end
$var parameter 32 L"   MST3_RW  $end
$var parameter 32 M"   SLV0_CDC  $end
$var parameter 32 N"   SLV0_START_ADDR  $end
$var parameter 32 O"   SLV0_END_ADDR  $end
$var parameter 32 P"   SLV0_OSTDREQ_NUM  $end
$var parameter 32 Q"   SLV0_OSTDREQ_SIZE  $end
$var parameter 32 R"   SLV0_KEEP_BASE_ADDR  $end
$var parameter 32 S"   SLV1_CDC  $end
$var parameter 32 T"   SLV1_START_ADDR  $end
$var parameter 32 U"   SLV1_END_ADDR  $end
$var parameter 32 V"   SLV1_OSTDREQ_NUM  $end
$var parameter 32 W"   SLV1_OSTDREQ_SIZE  $end
$var parameter 32 X"   SLV1_KEEP_BASE_ADDR  $end
$var parameter 32 Y"   SLV2_CDC  $end
$var parameter 32 Z"   SLV2_START_ADDR  $end
$var parameter 32 ["   SLV2_END_ADDR  $end
$var parameter 32 \"   SLV2_OSTDREQ_NUM  $end
$var parameter 32 ]"   SLV2_OSTDREQ_SIZE  $end
$var parameter 32 ^"   SLV2_KEEP_BASE_ADDR  $end
$var parameter 32 _"   SLV3_CDC  $end
$var parameter 32 `"   SLV3_START_ADDR  $end
$var parameter 32 a"   SLV3_END_ADDR  $end
$var parameter 32 b"   SLV3_OSTDREQ_NUM  $end
$var parameter 32 c"   SLV3_OSTDREQ_SIZE  $end
$var parameter 32 d"   SLV3_KEEP_BASE_ADDR  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c    slv0_aclk  $end
$var wire      1 d    slv0_aresetn  $end
$var wire      1 e    slv0_srst  $end
$var wire      1 e    slv0_awvalid  $end
$var reg       1 e"   slv0_awready  $end
$var wire     16 g    slv0_awaddr [15:0] $end
$var wire      8 f"   slv0_awlen [7:0] $end
$var wire      3 g"   slv0_awsize [2:0] $end
$var wire      2 h"   slv0_awburst [1:0] $end
$var wire      2 h"   slv0_awlock [1:0] $end
$var wire      4 i"   slv0_awcache [3:0] $end
$var wire      3 h    slv0_awprot [2:0] $end
$var wire      4 i"   slv0_awqos [3:0] $end
$var wire      4 i"   slv0_awregion [3:0] $end
$var wire      8 i    slv0_awid [7:0] $end
$var wire      1 e    slv0_awuser [0] $end
$var wire      1 e    slv0_wvalid  $end
$var reg       1 j"   slv0_wready  $end
$var wire      1 d    slv0_wlast  $end
$var wire     40 k    slv0_wdata [39:0] $end
$var wire      5 l    slv0_wstrb [4:0] $end
$var wire      1 e    slv0_wuser [0] $end
$var reg       1 k"   slv0_bvalid  $end
$var wire      1 e    slv0_bready  $end
$var reg       8 l"   slv0_bid [7:0] $end
$var reg       2 m"   slv0_bresp [1:0] $end
$var reg       1 n"   slv0_buser [0:0] $end
$var wire      1 e    slv0_arvalid  $end
$var reg       1 o"   slv0_arready  $end
$var wire     16 g    slv0_araddr [15:0] $end
$var wire      8 f"   slv0_arlen [7:0] $end
$var wire      3 g"   slv0_arsize [2:0] $end
$var wire      2 h"   slv0_arburst [1:0] $end
$var wire      2 h"   slv0_arlock [1:0] $end
$var wire      4 i"   slv0_arcache [3:0] $end
$var wire      3 h    slv0_arprot [2:0] $end
$var wire      4 i"   slv0_arqos [3:0] $end
$var wire      4 i"   slv0_arregion [3:0] $end
$var wire      8 i    slv0_arid [7:0] $end
$var wire      1 e    slv0_aruser [0] $end
$var reg       1 p"   slv0_rvalid  $end
$var wire      1 e    slv0_rready  $end
$var reg       8 q"   slv0_rid [7:0] $end
$var reg       2 r"   slv0_rresp [1:0] $end
$var reg      40 s"   slv0_rdata [39:0] $end
$var reg       1 t"   slv0_rlast  $end
$var reg       1 u"   slv0_ruser [0:0] $end
$var wire      1 c    slv1_aclk  $end
$var wire      1 d    slv1_aresetn  $end
$var wire      1 e    slv1_srst  $end
$var wire      1 e    slv1_awvalid  $end
$var reg       1 v"   slv1_awready  $end
$var wire     16 g    slv1_awaddr [15:0] $end
$var wire      8 f"   slv1_awlen [7:0] $end
$var wire      3 g"   slv1_awsize [2:0] $end
$var wire      2 h"   slv1_awburst [1:0] $end
$var wire      2 h"   slv1_awlock [1:0] $end
$var wire      4 i"   slv1_awcache [3:0] $end
$var wire      3 h    slv1_awprot [2:0] $end
$var wire      4 i"   slv1_awqos [3:0] $end
$var wire      4 i"   slv1_awregion [3:0] $end
$var wire      8 i    slv1_awid [7:0] $end
$var wire      1 e    slv1_awuser [0] $end
$var wire      1 e    slv1_wvalid  $end
$var reg       1 w"   slv1_wready  $end
$var wire      1 d    slv1_wlast  $end
$var wire     40 k    slv1_wdata [39:0] $end
$var wire      5 l    slv1_wstrb [4:0] $end
$var wire      1 e    slv1_wuser [0] $end
$var reg       1 x"   slv1_bvalid  $end
$var wire      1 e    slv1_bready  $end
$var reg       8 y"   slv1_bid [7:0] $end
$var reg       2 z"   slv1_bresp [1:0] $end
$var reg       1 {"   slv1_buser [0:0] $end
$var wire      1 e    slv1_arvalid  $end
$var reg       1 |"   slv1_arready  $end
$var wire     16 g    slv1_araddr [15:0] $end
$var wire      8 f"   slv1_arlen [7:0] $end
$var wire      3 g"   slv1_arsize [2:0] $end
$var wire      2 h"   slv1_arburst [1:0] $end
$var wire      2 h"   slv1_arlock [1:0] $end
$var wire      4 i"   slv1_arcache [3:0] $end
$var wire      3 h    slv1_arprot [2:0] $end
$var wire      4 i"   slv1_arqos [3:0] $end
$var wire      4 i"   slv1_arregion [3:0] $end
$var wire      8 i    slv1_arid [7:0] $end
$var wire      1 e    slv1_aruser [0] $end
$var reg       1 }"   slv1_rvalid  $end
$var wire      1 e    slv1_rready  $end
$var reg       8 ~"   slv1_rid [7:0] $end
$var reg       2 !#   slv1_rresp [1:0] $end
$var reg      40 "#   slv1_rdata [39:0] $end
$var reg       1 ##   slv1_rlast  $end
$var reg       1 $#   slv1_ruser [0:0] $end
$var wire      1 c    slv2_aclk  $end
$var wire      1 d    slv2_aresetn  $end
$var wire      1 e    slv2_srst  $end
$var wire      1 e    slv2_awvalid  $end
$var reg       1 %#   slv2_awready  $end
$var wire     16 g    slv2_awaddr [15:0] $end
$var wire      8 f"   slv2_awlen [7:0] $end
$var wire      3 g"   slv2_awsize [2:0] $end
$var wire      2 h"   slv2_awburst [1:0] $end
$var wire      2 h"   slv2_awlock [1:0] $end
$var wire      4 i"   slv2_awcache [3:0] $end
$var wire      3 h    slv2_awprot [2:0] $end
$var wire      4 i"   slv2_awqos [3:0] $end
$var wire      4 i"   slv2_awregion [3:0] $end
$var wire      8 i    slv2_awid [7:0] $end
$var wire      1 e    slv2_awuser [0] $end
$var wire      1 e    slv2_wvalid  $end
$var reg       1 &#   slv2_wready  $end
$var wire      1 d    slv2_wlast  $end
$var wire     40 k    slv2_wdata [39:0] $end
$var wire      5 l    slv2_wstrb [4:0] $end
$var wire      1 e    slv2_wuser [0] $end
$var reg       1 '#   slv2_bvalid  $end
$var wire      1 e    slv2_bready  $end
$var reg       8 (#   slv2_bid [7:0] $end
$var reg       2 )#   slv2_bresp [1:0] $end
$var reg       1 *#   slv2_buser [0:0] $end
$var wire      1 e    slv2_arvalid  $end
$var reg       1 +#   slv2_arready  $end
$var wire     16 g    slv2_araddr [15:0] $end
$var wire      8 f"   slv2_arlen [7:0] $end
$var wire      3 g"   slv2_arsize [2:0] $end
$var wire      2 h"   slv2_arburst [1:0] $end
$var wire      2 h"   slv2_arlock [1:0] $end
$var wire      4 i"   slv2_arcache [3:0] $end
$var wire      3 h    slv2_arprot [2:0] $end
$var wire      4 i"   slv2_arqos [3:0] $end
$var wire      4 i"   slv2_arregion [3:0] $end
$var wire      8 i    slv2_arid [7:0] $end
$var wire      1 e    slv2_aruser [0] $end
$var reg       1 ,#   slv2_rvalid  $end
$var wire      1 e    slv2_rready  $end
$var reg       8 -#   slv2_rid [7:0] $end
$var reg       2 .#   slv2_rresp [1:0] $end
$var reg      40 /#   slv2_rdata [39:0] $end
$var reg       1 0#   slv2_rlast  $end
$var reg       1 1#   slv2_ruser [0:0] $end
$var wire      1 c    slv3_aclk  $end
$var wire      1 d    slv3_aresetn  $end
$var wire      1 e    slv3_srst  $end
$var wire      1 e    slv3_awvalid  $end
$var reg       1 2#   slv3_awready  $end
$var wire     16 g    slv3_awaddr [15:0] $end
$var wire      8 f"   slv3_awlen [7:0] $end
$var wire      3 g"   slv3_awsize [2:0] $end
$var wire      2 h"   slv3_awburst [1:0] $end
$var wire      2 h"   slv3_awlock [1:0] $end
$var wire      4 i"   slv3_awcache [3:0] $end
$var wire      3 h    slv3_awprot [2:0] $end
$var wire      4 i"   slv3_awqos [3:0] $end
$var wire      4 i"   slv3_awregion [3:0] $end
$var wire      8 i    slv3_awid [7:0] $end
$var wire      1 e    slv3_awuser [0] $end
$var wire      1 e    slv3_wvalid  $end
$var reg       1 3#   slv3_wready  $end
$var wire      1 d    slv3_wlast  $end
$var wire     40 k    slv3_wdata [39:0] $end
$var wire      5 l    slv3_wstrb [4:0] $end
$var wire      1 e    slv3_wuser [0] $end
$var reg       1 4#   slv3_bvalid  $end
$var wire      1 e    slv3_bready  $end
$var reg       8 5#   slv3_bid [7:0] $end
$var reg       2 6#   slv3_bresp [1:0] $end
$var reg       1 7#   slv3_buser [0:0] $end
$var wire      1 e    slv3_arvalid  $end
$var reg       1 8#   slv3_arready  $end
$var wire     16 g    slv3_araddr [15:0] $end
$var wire      8 f"   slv3_arlen [7:0] $end
$var wire      3 g"   slv3_arsize [2:0] $end
$var wire      2 h"   slv3_arburst [1:0] $end
$var wire      2 h"   slv3_arlock [1:0] $end
$var wire      4 i"   slv3_arcache [3:0] $end
$var wire      3 h    slv3_arprot [2:0] $end
$var wire      4 i"   slv3_arqos [3:0] $end
$var wire      4 i"   slv3_arregion [3:0] $end
$var wire      8 i    slv3_arid [7:0] $end
$var wire      1 e    slv3_aruser [0] $end
$var reg       1 9#   slv3_rvalid  $end
$var wire      1 e    slv3_rready  $end
$var reg       8 :#   slv3_rid [7:0] $end
$var reg       2 ;#   slv3_rresp [1:0] $end
$var reg      40 <#   slv3_rdata [39:0] $end
$var reg       1 =#   slv3_rlast  $end
$var reg       1 >#   slv3_ruser [0:0] $end
$var wire      1 =!   mst0_aclk  $end
$var wire      1 d    mst0_aresetn  $end
$var wire      1 e    mst0_srst  $end
$var reg       1 ?#   mst0_awvalid  $end
$var wire      1 e    mst0_awready  $end
$var reg      16 @#   mst0_awaddr [15:0] $end
$var reg       8 A#   mst0_awlen [7:0] $end
$var reg       3 B#   mst0_awsize [2:0] $end
$var reg       2 C#   mst0_awburst [1:0] $end
$var reg       2 D#   mst0_awlock [1:0] $end
$var reg       4 E#   mst0_awcache [3:0] $end
$var reg       3 F#   mst0_awprot [2:0] $end
$var reg       4 G#   mst0_awqos [3:0] $end
$var reg       4 H#   mst0_awregion [3:0] $end
$var reg       8 I#   mst0_awid [7:0] $end
$var reg       1 J#   mst0_awuser [0:0] $end
$var reg       1 K#   mst0_wvalid  $end
$var wire      1 e    mst0_wready  $end
$var reg       1 L#   mst0_wlast  $end
$var reg      40 M#   mst0_wdata [39:0] $end
$var reg       5 N#   mst0_wstrb [4:0] $end
$var reg       1 O#   mst0_wuser [0:0] $end
$var wire      1 e    mst0_bvalid  $end
$var reg       1 P#   mst0_bready  $end
$var wire      8 i    mst0_bid [7:0] $end
$var wire      2 H!   mst0_bresp [1:0] $end
$var wire      1 e    mst0_buser [0] $end
$var reg       1 Q#   mst0_arvalid  $end
$var wire      1 e    mst0_arready  $end
$var reg      16 R#   mst0_araddr [15:0] $end
$var reg       8 S#   mst0_arlen [7:0] $end
$var reg       3 T#   mst0_arsize [2:0] $end
$var reg       2 U#   mst0_arburst [1:0] $end
$var reg       2 V#   mst0_arlock [1:0] $end
$var reg       4 W#   mst0_arcache [3:0] $end
$var reg       3 X#   mst0_arprot [2:0] $end
$var reg       4 Y#   mst0_arqos [3:0] $end
$var reg       4 Z#   mst0_arregion [3:0] $end
$var reg       8 [#   mst0_arid [7:0] $end
$var reg       1 \#   mst0_aruser [0:0] $end
$var wire      1 e    mst0_rvalid  $end
$var reg       1 ]#   mst0_rready  $end
$var wire      8 i    mst0_rid [7:0] $end
$var wire      2 H!   mst0_rresp [1:0] $end
$var wire     40 k    mst0_rdata [39:0] $end
$var wire      1 d    mst0_rlast  $end
$var wire      1 e    mst0_ruser [0] $end
$var wire      1 =!   mst1_aclk  $end
$var wire      1 d    mst1_aresetn  $end
$var wire      1 e    mst1_srst  $end
$var reg       1 ^#   mst1_awvalid  $end
$var wire      1 e    mst1_awready  $end
$var reg      16 _#   mst1_awaddr [15:0] $end
$var reg       8 `#   mst1_awlen [7:0] $end
$var reg       3 a#   mst1_awsize [2:0] $end
$var reg       2 b#   mst1_awburst [1:0] $end
$var reg       2 c#   mst1_awlock [1:0] $end
$var reg       4 d#   mst1_awcache [3:0] $end
$var reg       3 e#   mst1_awprot [2:0] $end
$var reg       4 f#   mst1_awqos [3:0] $end
$var reg       4 g#   mst1_awregion [3:0] $end
$var reg       8 h#   mst1_awid [7:0] $end
$var reg       1 i#   mst1_awuser [0:0] $end
$var reg       1 j#   mst1_wvalid  $end
$var wire      1 e    mst1_wready  $end
$var reg       1 k#   mst1_wlast  $end
$var reg      40 l#   mst1_wdata [39:0] $end
$var reg       5 m#   mst1_wstrb [4:0] $end
$var reg       1 n#   mst1_wuser [0:0] $end
$var wire      1 e    mst1_bvalid  $end
$var reg       1 o#   mst1_bready  $end
$var wire      8 i    mst1_bid [7:0] $end
$var wire      2 H!   mst1_bresp [1:0] $end
$var wire      1 e    mst1_buser [0] $end
$var reg       1 p#   mst1_arvalid  $end
$var wire      1 e    mst1_arready  $end
$var reg      16 q#   mst1_araddr [15:0] $end
$var reg       8 r#   mst1_arlen [7:0] $end
$var reg       3 s#   mst1_arsize [2:0] $end
$var reg       2 t#   mst1_arburst [1:0] $end
$var reg       2 u#   mst1_arlock [1:0] $end
$var reg       4 v#   mst1_arcache [3:0] $end
$var reg       3 w#   mst1_arprot [2:0] $end
$var reg       4 x#   mst1_arqos [3:0] $end
$var reg       4 y#   mst1_arregion [3:0] $end
$var reg       8 z#   mst1_arid [7:0] $end
$var reg       1 {#   mst1_aruser [0:0] $end
$var wire      1 e    mst1_rvalid  $end
$var reg       1 |#   mst1_rready  $end
$var wire      8 i    mst1_rid [7:0] $end
$var wire      2 H!   mst1_rresp [1:0] $end
$var wire     40 k    mst1_rdata [39:0] $end
$var wire      1 d    mst1_rlast  $end
$var wire      1 e    mst1_ruser [0] $end
$var wire      1 =!   mst2_aclk  $end
$var wire      1 d    mst2_aresetn  $end
$var wire      1 e    mst2_srst  $end
$var reg       1 }#   mst2_awvalid  $end
$var wire      1 e    mst2_awready  $end
$var reg      16 ~#   mst2_awaddr [15:0] $end
$var reg       8 !$   mst2_awlen [7:0] $end
$var reg       3 "$   mst2_awsize [2:0] $end
$var reg       2 #$   mst2_awburst [1:0] $end
$var reg       2 $$   mst2_awlock [1:0] $end
$var reg       4 %$   mst2_awcache [3:0] $end
$var reg       3 &$   mst2_awprot [2:0] $end
$var reg       4 '$   mst2_awqos [3:0] $end
$var reg       4 ($   mst2_awregion [3:0] $end
$var reg       8 )$   mst2_awid [7:0] $end
$var reg       1 *$   mst2_awuser [0:0] $end
$var reg       1 +$   mst2_wvalid  $end
$var wire      1 e    mst2_wready  $end
$var reg       1 ,$   mst2_wlast  $end
$var reg      40 -$   mst2_wdata [39:0] $end
$var reg       5 .$   mst2_wstrb [4:0] $end
$var reg       1 /$   mst2_wuser [0:0] $end
$var wire      1 e    mst2_bvalid  $end
$var reg       1 0$   mst2_bready  $end
$var wire      8 i    mst2_bid [7:0] $end
$var wire      2 H!   mst2_bresp [1:0] $end
$var wire      1 e    mst2_buser [0] $end
$var reg       1 1$   mst2_arvalid  $end
$var wire      1 e    mst2_arready  $end
$var reg      16 2$   mst2_araddr [15:0] $end
$var reg       8 3$   mst2_arlen [7:0] $end
$var reg       3 4$   mst2_arsize [2:0] $end
$var reg       2 5$   mst2_arburst [1:0] $end
$var reg       2 6$   mst2_arlock [1:0] $end
$var reg       4 7$   mst2_arcache [3:0] $end
$var reg       3 8$   mst2_arprot [2:0] $end
$var reg       4 9$   mst2_arqos [3:0] $end
$var reg       4 :$   mst2_arregion [3:0] $end
$var reg       8 ;$   mst2_arid [7:0] $end
$var reg       1 <$   mst2_aruser [0:0] $end
$var wire      1 e    mst2_rvalid  $end
$var reg       1 =$   mst2_rready  $end
$var wire      8 i    mst2_rid [7:0] $end
$var wire      2 H!   mst2_rresp [1:0] $end
$var wire     40 k    mst2_rdata [39:0] $end
$var wire      1 d    mst2_rlast  $end
$var wire      1 e    mst2_ruser [0] $end
$var wire      1 =!   mst3_aclk  $end
$var wire      1 d    mst3_aresetn  $end
$var wire      1 e    mst3_srst  $end
$var reg       1 >$   mst3_awvalid  $end
$var wire      1 e    mst3_awready  $end
$var reg      16 ?$   mst3_awaddr [15:0] $end
$var reg       8 @$   mst3_awlen [7:0] $end
$var reg       3 A$   mst3_awsize [2:0] $end
$var reg       2 B$   mst3_awburst [1:0] $end
$var reg       2 C$   mst3_awlock [1:0] $end
$var reg       4 D$   mst3_awcache [3:0] $end
$var reg       3 E$   mst3_awprot [2:0] $end
$var reg       4 F$   mst3_awqos [3:0] $end
$var reg       4 G$   mst3_awregion [3:0] $end
$var reg       8 H$   mst3_awid [7:0] $end
$var reg       1 I$   mst3_awuser [0:0] $end
$var reg       1 J$   mst3_wvalid  $end
$var wire      1 e    mst3_wready  $end
$var reg       1 K$   mst3_wlast  $end
$var reg      40 L$   mst3_wdata [39:0] $end
$var reg       5 M$   mst3_wstrb [4:0] $end
$var reg       1 N$   mst3_wuser [0:0] $end
$var wire      1 e    mst3_bvalid  $end
$var reg       1 O$   mst3_bready  $end
$var wire      8 i    mst3_bid [7:0] $end
$var wire      2 H!   mst3_bresp [1:0] $end
$var wire      1 e    mst3_buser [0] $end
$var reg       1 P$   mst3_arvalid  $end
$var wire      1 e    mst3_arready  $end
$var reg      16 Q$   mst3_araddr [15:0] $end
$var reg       8 R$   mst3_arlen [7:0] $end
$var reg       3 S$   mst3_arsize [2:0] $end
$var reg       2 T$   mst3_arburst [1:0] $end
$var reg       2 U$   mst3_arlock [1:0] $end
$var reg       4 V$   mst3_arcache [3:0] $end
$var reg       3 W$   mst3_arprot [2:0] $end
$var reg       4 X$   mst3_arqos [3:0] $end
$var reg       4 Y$   mst3_arregion [3:0] $end
$var reg       8 Z$   mst3_arid [7:0] $end
$var reg       1 [$   mst3_aruser [0:0] $end
$var wire      1 e    mst3_rvalid  $end
$var reg       1 \$   mst3_rready  $end
$var wire      8 i    mst3_rid [7:0] $end
$var wire      2 H!   mst3_rresp [1:0] $end
$var wire     40 k    mst3_rdata [39:0] $end
$var wire      1 d    mst3_rlast  $end
$var wire      1 e    mst3_ruser [0] $end
$var parameter 32 ]$   AUSER_W  $end
$var parameter 32 ^$   WUSER_W  $end
$var parameter 32 _$   BUSER_W  $end
$var parameter 32 `$   RUSER_W  $end
$var parameter 32 a$   AWCH_W  $end
$var parameter 32 b$   WCH_W  $end
$var parameter 32 c$   BCH_W  $end
$var parameter 32 d$   ARCH_W  $end
$var parameter 32 e$   RCH_W  $end
$var parameter 16 f$   MST_ROUTES  $end
$var reg       4 g$   i_awvalid [3:0] $end
$var reg       4 h$   i_awready [3:0] $end
$var reg      108 i$   i_awch [107:0] $end
$var reg       4 j$   i_wvalid [3:0] $end
$var reg       4 k$   i_wready [3:0] $end
$var reg       4 l$   i_wlast [3:0] $end
$var reg      180 m$   i_wch [179:0] $end
$var reg       4 n$   i_bvalid [3:0] $end
$var reg       4 o$   i_bready [3:0] $end
$var reg      40 p$   i_bch [39:0] $end
$var reg       4 q$   i_arvalid [3:0] $end
$var reg       4 r$   i_arready [3:0] $end
$var reg      108 s$   i_arch [107:0] $end
$var reg       4 t$   i_rvalid [3:0] $end
$var reg       4 u$   i_rready [3:0] $end
$var reg       4 v$   i_rlast [3:0] $end
$var reg      200 w$   i_rch [199:0] $end
$var reg       4 x$   o_awvalid [3:0] $end
$var reg       4 y$   o_awready [3:0] $end
$var reg      108 z$   o_awch [107:0] $end
$var reg       4 {$   o_wvalid [3:0] $end
$var reg       4 |$   o_wready [3:0] $end
$var reg       4 }$   o_wlast [3:0] $end
$var reg      180 ~$   o_wch [179:0] $end
$var reg       4 !%   o_bvalid [3:0] $end
$var reg       4 "%   o_bready [3:0] $end
$var reg      40 #%   o_bch [39:0] $end
$var reg       4 $%   o_arvalid [3:0] $end
$var reg       4 %%   o_arready [3:0] $end
$var reg      108 &%   o_arch [107:0] $end
$var reg       4 '%   o_rvalid [3:0] $end
$var reg       4 (%   o_rready [3:0] $end
$var reg       4 )%   o_rlast [3:0] $end
$var reg      200 *%   o_rch [199:0] $end

$scope module slv0_if $end
$var parameter 32 +%   AXI_ADDR_W  $end
$var parameter 32 ,%   AXI_ID_W  $end
$var parameter 32 -%   AXI_DATA_W  $end
$var parameter 32 .%   SLV_NB  $end
$var parameter 32 /%   STRB_MODE  $end
$var parameter 32 0%   AXI_SIGNALING  $end
$var parameter 32 1%   MST_CDC  $end
$var parameter 32 2%   MST_OSTDREQ_NUM  $end
$var parameter 32 3%   MST_OSTDREQ_SIZE  $end
$var parameter 32 4%   USER_SUPPORT  $end
$var parameter 32 5%   AXI_AUSER_W  $end
$var parameter 32 6%   AXI_WUSER_W  $end
$var parameter 32 7%   AXI_BUSER_W  $end
$var parameter 32 8%   AXI_RUSER_W  $end
$var parameter 32 9%   AWCH_W  $end
$var parameter 32 :%   WCH_W  $end
$var parameter 32 ;%   BCH_W  $end
$var parameter 32 <%   ARCH_W  $end
$var parameter 32 =%   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 >%   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 ?%   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 @%   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 A%   i_bid [7:0] $end
$var reg       2 B%   i_bresp [1:0] $end
$var reg       1 C%   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 D%   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 E%   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 F%   i_rid [7:0] $end
$var reg       2 G%   i_rresp [1:0] $end
$var reg      40 H%   i_rdata [39:0] $end
$var reg       1 I%   i_rlast  $end
$var reg       1 J%   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 K%   o_awvalid  $end
$var wire      1 L%   o_awready  $end
$var reg      27 M%   o_awch [26:0] $end
$var reg       1 N%   o_wvalid  $end
$var wire      1 O%   o_wready  $end
$var reg       1 P%   o_wlast  $end
$var reg      45 Q%   o_wch [44:0] $end
$var wire      1 R%   o_bvalid  $end
$var reg       1 S%   o_bready  $end
$var wire     10 T%   o_bch [9:0] $end
$var reg       1 U%   o_arvalid  $end
$var wire      1 V%   o_arready  $end
$var reg      27 W%   o_arch [26:0] $end
$var wire      1 X%   o_rvalid  $end
$var reg       1 Y%   o_rready  $end
$var wire      1 Z%   o_rlast  $end
$var wire     50 [%   o_rch [49:0] $end
$var reg      27 \%   awch [26:0] $end
$var reg      45 ]%   wch [44:0] $end
$var reg      10 ^%   bch [9:0] $end
$var reg      27 _%   arch [26:0] $end
$var reg      50 `%   rch [49:0] $end
$var reg       1 a%   wlast  $end
$var wire     40 b%   i_wdata_w [39:0] $end
$var wire      1 c%   i_wvalid_w  $end

$scope begin BUFF_STAGE $end
$var parameter 32 d%   PASS_THRU  $end
$var parameter 32 e%   AW_ASIZE  $end
$var parameter 32 f%   W_ASIZE  $end
$var parameter 32 g%   B_ASIZE  $end
$var parameter 32 h%   AR_ASIZE  $end
$var parameter 32 i%   R_ASIZE  $end
$var reg       1 j%   aw_full  $end
$var reg       1 k%   aw_empty  $end
$var reg       1 l%   w_full  $end
$var reg       1 m%   w_empty  $end
$var reg       1 n%   ar_full  $end
$var reg       1 o%   ar_empty  $end
$var reg       1 p%   r_full  $end
$var reg       1 q%   r_empty  $end
$var reg       1 r%   b_full  $end
$var reg       1 s%   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 t%   PASS_THRU  $end
$var parameter 32 u%   ADDR_WIDTH  $end
$var parameter 32 v%   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 x%   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 y%   full  $end
$var reg      27 z%   data_out [26:0] $end
$var wire      1 L%   pull  $end
$var reg       1 {%   empty  $end
$var reg       1 |%   wr_en  $end
$var reg       3 }%   wrptr [2:0] $end
$var reg       3 ~%   rdptr [2:0] $end
$var reg       1 !&   empty_flag  $end
$var reg       1 "&   full_flag  $end
$var reg       1 #&   pass_thru  $end
$var reg      27 $&   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 %&   ADDR_WIDTH  $end
$var parameter 32 &&   DATA_WIDTH  $end
$var parameter 32 '&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 (&   wr_en  $end
$var wire      2 )&   addr_in [1:0] $end
$var wire     27 x%   data_in [26:0] $end
$var wire      2 *&   addr_out [1:0] $end
$var reg      27 +&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 ,&   PASS_THRU  $end
$var parameter 32 -&   ADDR_WIDTH  $end
$var parameter 32 .&   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 /&   data_in [45:0] $end
$var wire      1 c%   push  $end
$var reg       1 0&   full  $end
$var reg      46 1&   data_out [45:0] $end
$var wire      1 O%   pull  $end
$var reg       1 2&   empty  $end
$var reg       1 3&   wr_en  $end
$var reg       3 4&   wrptr [2:0] $end
$var reg       3 5&   rdptr [2:0] $end
$var reg       1 6&   empty_flag  $end
$var reg       1 7&   full_flag  $end
$var reg       1 8&   pass_thru  $end
$var reg      46 9&   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 :&   ADDR_WIDTH  $end
$var parameter 32 ;&   DATA_WIDTH  $end
$var parameter 32 <&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 =&   wr_en  $end
$var wire      2 >&   addr_in [1:0] $end
$var wire     46 /&   data_in [45:0] $end
$var wire      2 ?&   addr_out [1:0] $end
$var reg      46 @&   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 A&   PASS_THRU  $end
$var parameter 32 B&   ADDR_WIDTH  $end
$var parameter 32 C&   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 T%   data_in [9:0] $end
$var wire      1 R%   push  $end
$var reg       1 D&   full  $end
$var reg      10 E&   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 F&   empty  $end
$var reg       1 G&   wr_en  $end
$var reg       3 H&   wrptr [2:0] $end
$var reg       3 I&   rdptr [2:0] $end
$var reg       1 J&   empty_flag  $end
$var reg       1 K&   full_flag  $end
$var reg       1 L&   pass_thru  $end
$var reg      10 M&   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 N&   ADDR_WIDTH  $end
$var parameter 32 O&   DATA_WIDTH  $end
$var parameter 32 P&   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 Q&   wr_en  $end
$var wire      2 R&   addr_in [1:0] $end
$var wire     10 T%   data_in [9:0] $end
$var wire      2 S&   addr_out [1:0] $end
$var reg      10 T&   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 U&   PASS_THRU  $end
$var parameter 32 V&   ADDR_WIDTH  $end
$var parameter 32 W&   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 X&   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 Y&   full  $end
$var reg      27 Z&   data_out [26:0] $end
$var wire      1 V%   pull  $end
$var reg       1 [&   empty  $end
$var reg       1 \&   wr_en  $end
$var reg       3 ]&   wrptr [2:0] $end
$var reg       3 ^&   rdptr [2:0] $end
$var reg       1 _&   empty_flag  $end
$var reg       1 `&   full_flag  $end
$var reg       1 a&   pass_thru  $end
$var reg      27 b&   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 c&   ADDR_WIDTH  $end
$var parameter 32 d&   DATA_WIDTH  $end
$var parameter 32 e&   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 f&   wr_en  $end
$var wire      2 g&   addr_in [1:0] $end
$var wire     27 X&   data_in [26:0] $end
$var wire      2 h&   addr_out [1:0] $end
$var reg      27 i&   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 j&   PASS_THRU  $end
$var parameter 32 k&   ADDR_WIDTH  $end
$var parameter 32 l&   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 m&   data_in [50:0] $end
$var wire      1 X%   push  $end
$var reg       1 n&   full  $end
$var reg      51 o&   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 p&   empty  $end
$var reg       1 q&   wr_en  $end
$var reg       3 r&   wrptr [2:0] $end
$var reg       3 s&   rdptr [2:0] $end
$var reg       1 t&   empty_flag  $end
$var reg       1 u&   full_flag  $end
$var reg       1 v&   pass_thru  $end
$var reg      51 w&   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 x&   ADDR_WIDTH  $end
$var parameter 32 y&   DATA_WIDTH  $end
$var parameter 32 z&   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 {&   wr_en  $end
$var wire      2 |&   addr_in [1:0] $end
$var wire     51 m&   data_in [50:0] $end
$var wire      2 }&   addr_out [1:0] $end
$var reg      51 ~&   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_encode $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 e    i_wvalid  $end
$var wire     40 k    i_wdata [39:0] $end
$var reg       1 !'   o_wvalid  $end
$var reg      40 "'   o_wdata [39:0] $end
$var wire      8 #'   r_eccdata [7:0] $end
$upscope $end

$upscope $end


$scope module slv1_if $end
$var parameter 32 $'   AXI_ADDR_W  $end
$var parameter 32 %'   AXI_ID_W  $end
$var parameter 32 &'   AXI_DATA_W  $end
$var parameter 32 ''   SLV_NB  $end
$var parameter 32 ('   STRB_MODE  $end
$var parameter 32 )'   AXI_SIGNALING  $end
$var parameter 32 *'   MST_CDC  $end
$var parameter 32 +'   MST_OSTDREQ_NUM  $end
$var parameter 32 ,'   MST_OSTDREQ_SIZE  $end
$var parameter 32 -'   USER_SUPPORT  $end
$var parameter 32 .'   AXI_AUSER_W  $end
$var parameter 32 /'   AXI_WUSER_W  $end
$var parameter 32 0'   AXI_BUSER_W  $end
$var parameter 32 1'   AXI_RUSER_W  $end
$var parameter 32 2'   AWCH_W  $end
$var parameter 32 3'   WCH_W  $end
$var parameter 32 4'   BCH_W  $end
$var parameter 32 5'   ARCH_W  $end
$var parameter 32 6'   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 7'   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 8'   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 9'   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 :'   i_bid [7:0] $end
$var reg       2 ;'   i_bresp [1:0] $end
$var reg       1 <'   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 ='   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 >'   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 ?'   i_rid [7:0] $end
$var reg       2 @'   i_rresp [1:0] $end
$var reg      40 A'   i_rdata [39:0] $end
$var reg       1 B'   i_rlast  $end
$var reg       1 C'   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 D'   o_awvalid  $end
$var wire      1 E'   o_awready  $end
$var reg      27 F'   o_awch [26:0] $end
$var reg       1 G'   o_wvalid  $end
$var wire      1 H'   o_wready  $end
$var reg       1 I'   o_wlast  $end
$var reg      45 J'   o_wch [44:0] $end
$var wire      1 K'   o_bvalid  $end
$var reg       1 L'   o_bready  $end
$var wire     10 M'   o_bch [9:0] $end
$var reg       1 N'   o_arvalid  $end
$var wire      1 O'   o_arready  $end
$var reg      27 P'   o_arch [26:0] $end
$var wire      1 Q'   o_rvalid  $end
$var reg       1 R'   o_rready  $end
$var wire      1 S'   o_rlast  $end
$var wire     50 T'   o_rch [49:0] $end
$var reg      27 U'   awch [26:0] $end
$var reg      45 V'   wch [44:0] $end
$var reg      10 W'   bch [9:0] $end
$var reg      27 X'   arch [26:0] $end
$var reg      50 Y'   rch [49:0] $end
$var reg       1 Z'   wlast  $end
$var wire     40 ['   i_wdata_w [39:0] $end
$var wire      1 \'   i_wvalid_w  $end

$scope begin BUFF_STAGE $end
$var parameter 32 ]'   PASS_THRU  $end
$var parameter 32 ^'   AW_ASIZE  $end
$var parameter 32 _'   W_ASIZE  $end
$var parameter 32 `'   B_ASIZE  $end
$var parameter 32 a'   AR_ASIZE  $end
$var parameter 32 b'   R_ASIZE  $end
$var reg       1 c'   aw_full  $end
$var reg       1 d'   aw_empty  $end
$var reg       1 e'   w_full  $end
$var reg       1 f'   w_empty  $end
$var reg       1 g'   ar_full  $end
$var reg       1 h'   ar_empty  $end
$var reg       1 i'   r_full  $end
$var reg       1 j'   r_empty  $end
$var reg       1 k'   b_full  $end
$var reg       1 l'   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 m'   PASS_THRU  $end
$var parameter 32 n'   ADDR_WIDTH  $end
$var parameter 32 o'   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 p'   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 q'   full  $end
$var reg      27 r'   data_out [26:0] $end
$var wire      1 E'   pull  $end
$var reg       1 s'   empty  $end
$var reg       1 t'   wr_en  $end
$var reg       3 u'   wrptr [2:0] $end
$var reg       3 v'   rdptr [2:0] $end
$var reg       1 w'   empty_flag  $end
$var reg       1 x'   full_flag  $end
$var reg       1 y'   pass_thru  $end
$var reg      27 z'   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 {'   ADDR_WIDTH  $end
$var parameter 32 |'   DATA_WIDTH  $end
$var parameter 32 }'   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ~'   wr_en  $end
$var wire      2 !(   addr_in [1:0] $end
$var wire     27 p'   data_in [26:0] $end
$var wire      2 "(   addr_out [1:0] $end
$var reg      27 #(   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 $(   PASS_THRU  $end
$var parameter 32 %(   ADDR_WIDTH  $end
$var parameter 32 &(   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 '(   data_in [45:0] $end
$var wire      1 \'   push  $end
$var reg       1 ((   full  $end
$var reg      46 )(   data_out [45:0] $end
$var wire      1 H'   pull  $end
$var reg       1 *(   empty  $end
$var reg       1 +(   wr_en  $end
$var reg       3 ,(   wrptr [2:0] $end
$var reg       3 -(   rdptr [2:0] $end
$var reg       1 .(   empty_flag  $end
$var reg       1 /(   full_flag  $end
$var reg       1 0(   pass_thru  $end
$var reg      46 1(   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 2(   ADDR_WIDTH  $end
$var parameter 32 3(   DATA_WIDTH  $end
$var parameter 32 4(   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 5(   wr_en  $end
$var wire      2 6(   addr_in [1:0] $end
$var wire     46 '(   data_in [45:0] $end
$var wire      2 7(   addr_out [1:0] $end
$var reg      46 8(   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 9(   PASS_THRU  $end
$var parameter 32 :(   ADDR_WIDTH  $end
$var parameter 32 ;(   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 M'   data_in [9:0] $end
$var wire      1 K'   push  $end
$var reg       1 <(   full  $end
$var reg      10 =(   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 >(   empty  $end
$var reg       1 ?(   wr_en  $end
$var reg       3 @(   wrptr [2:0] $end
$var reg       3 A(   rdptr [2:0] $end
$var reg       1 B(   empty_flag  $end
$var reg       1 C(   full_flag  $end
$var reg       1 D(   pass_thru  $end
$var reg      10 E(   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 F(   ADDR_WIDTH  $end
$var parameter 32 G(   DATA_WIDTH  $end
$var parameter 32 H(   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 I(   wr_en  $end
$var wire      2 J(   addr_in [1:0] $end
$var wire     10 M'   data_in [9:0] $end
$var wire      2 K(   addr_out [1:0] $end
$var reg      10 L(   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 M(   PASS_THRU  $end
$var parameter 32 N(   ADDR_WIDTH  $end
$var parameter 32 O(   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 P(   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 Q(   full  $end
$var reg      27 R(   data_out [26:0] $end
$var wire      1 O'   pull  $end
$var reg       1 S(   empty  $end
$var reg       1 T(   wr_en  $end
$var reg       3 U(   wrptr [2:0] $end
$var reg       3 V(   rdptr [2:0] $end
$var reg       1 W(   empty_flag  $end
$var reg       1 X(   full_flag  $end
$var reg       1 Y(   pass_thru  $end
$var reg      27 Z(   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 [(   ADDR_WIDTH  $end
$var parameter 32 \(   DATA_WIDTH  $end
$var parameter 32 ](   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ^(   wr_en  $end
$var wire      2 _(   addr_in [1:0] $end
$var wire     27 P(   data_in [26:0] $end
$var wire      2 `(   addr_out [1:0] $end
$var reg      27 a(   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 b(   PASS_THRU  $end
$var parameter 32 c(   ADDR_WIDTH  $end
$var parameter 32 d(   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 e(   data_in [50:0] $end
$var wire      1 Q'   push  $end
$var reg       1 f(   full  $end
$var reg      51 g(   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 h(   empty  $end
$var reg       1 i(   wr_en  $end
$var reg       3 j(   wrptr [2:0] $end
$var reg       3 k(   rdptr [2:0] $end
$var reg       1 l(   empty_flag  $end
$var reg       1 m(   full_flag  $end
$var reg       1 n(   pass_thru  $end
$var reg      51 o(   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 p(   ADDR_WIDTH  $end
$var parameter 32 q(   DATA_WIDTH  $end
$var parameter 32 r(   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 s(   wr_en  $end
$var wire      2 t(   addr_in [1:0] $end
$var wire     51 e(   data_in [50:0] $end
$var wire      2 u(   addr_out [1:0] $end
$var reg      51 v(   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_encode $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 e    i_wvalid  $end
$var wire     40 k    i_wdata [39:0] $end
$var reg       1 w(   o_wvalid  $end
$var reg      40 x(   o_wdata [39:0] $end
$var wire      8 y(   r_eccdata [7:0] $end
$upscope $end

$upscope $end


$scope module slv2_if $end
$var parameter 32 z(   AXI_ADDR_W  $end
$var parameter 32 {(   AXI_ID_W  $end
$var parameter 32 |(   AXI_DATA_W  $end
$var parameter 32 }(   SLV_NB  $end
$var parameter 32 ~(   STRB_MODE  $end
$var parameter 32 !)   AXI_SIGNALING  $end
$var parameter 32 ")   MST_CDC  $end
$var parameter 32 #)   MST_OSTDREQ_NUM  $end
$var parameter 32 $)   MST_OSTDREQ_SIZE  $end
$var parameter 32 %)   USER_SUPPORT  $end
$var parameter 32 &)   AXI_AUSER_W  $end
$var parameter 32 ')   AXI_WUSER_W  $end
$var parameter 32 ()   AXI_BUSER_W  $end
$var parameter 32 ))   AXI_RUSER_W  $end
$var parameter 32 *)   AWCH_W  $end
$var parameter 32 +)   WCH_W  $end
$var parameter 32 ,)   BCH_W  $end
$var parameter 32 -)   ARCH_W  $end
$var parameter 32 .)   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 /)   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 0)   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 1)   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 2)   i_bid [7:0] $end
$var reg       2 3)   i_bresp [1:0] $end
$var reg       1 4)   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 5)   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 6)   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 7)   i_rid [7:0] $end
$var reg       2 8)   i_rresp [1:0] $end
$var reg      40 9)   i_rdata [39:0] $end
$var reg       1 :)   i_rlast  $end
$var reg       1 ;)   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 <)   o_awvalid  $end
$var wire      1 =)   o_awready  $end
$var reg      27 >)   o_awch [26:0] $end
$var reg       1 ?)   o_wvalid  $end
$var wire      1 @)   o_wready  $end
$var reg       1 A)   o_wlast  $end
$var reg      45 B)   o_wch [44:0] $end
$var wire      1 C)   o_bvalid  $end
$var reg       1 D)   o_bready  $end
$var wire     10 E)   o_bch [9:0] $end
$var reg       1 F)   o_arvalid  $end
$var wire      1 G)   o_arready  $end
$var reg      27 H)   o_arch [26:0] $end
$var wire      1 I)   o_rvalid  $end
$var reg       1 J)   o_rready  $end
$var wire      1 K)   o_rlast  $end
$var wire     50 L)   o_rch [49:0] $end
$var reg      27 M)   awch [26:0] $end
$var reg      45 N)   wch [44:0] $end
$var reg      10 O)   bch [9:0] $end
$var reg      27 P)   arch [26:0] $end
$var reg      50 Q)   rch [49:0] $end
$var reg       1 R)   wlast  $end
$var wire     40 S)   i_wdata_w [39:0] $end
$var wire      1 T)   i_wvalid_w  $end

$scope begin BUFF_STAGE $end
$var parameter 32 U)   PASS_THRU  $end
$var parameter 32 V)   AW_ASIZE  $end
$var parameter 32 W)   W_ASIZE  $end
$var parameter 32 X)   B_ASIZE  $end
$var parameter 32 Y)   AR_ASIZE  $end
$var parameter 32 Z)   R_ASIZE  $end
$var reg       1 [)   aw_full  $end
$var reg       1 \)   aw_empty  $end
$var reg       1 ])   w_full  $end
$var reg       1 ^)   w_empty  $end
$var reg       1 _)   ar_full  $end
$var reg       1 `)   ar_empty  $end
$var reg       1 a)   r_full  $end
$var reg       1 b)   r_empty  $end
$var reg       1 c)   b_full  $end
$var reg       1 d)   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 e)   PASS_THRU  $end
$var parameter 32 f)   ADDR_WIDTH  $end
$var parameter 32 g)   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 h)   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 i)   full  $end
$var reg      27 j)   data_out [26:0] $end
$var wire      1 =)   pull  $end
$var reg       1 k)   empty  $end
$var reg       1 l)   wr_en  $end
$var reg       3 m)   wrptr [2:0] $end
$var reg       3 n)   rdptr [2:0] $end
$var reg       1 o)   empty_flag  $end
$var reg       1 p)   full_flag  $end
$var reg       1 q)   pass_thru  $end
$var reg      27 r)   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 s)   ADDR_WIDTH  $end
$var parameter 32 t)   DATA_WIDTH  $end
$var parameter 32 u)   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 v)   wr_en  $end
$var wire      2 w)   addr_in [1:0] $end
$var wire     27 h)   data_in [26:0] $end
$var wire      2 x)   addr_out [1:0] $end
$var reg      27 y)   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 z)   PASS_THRU  $end
$var parameter 32 {)   ADDR_WIDTH  $end
$var parameter 32 |)   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 })   data_in [45:0] $end
$var wire      1 T)   push  $end
$var reg       1 ~)   full  $end
$var reg      46 !*   data_out [45:0] $end
$var wire      1 @)   pull  $end
$var reg       1 "*   empty  $end
$var reg       1 #*   wr_en  $end
$var reg       3 $*   wrptr [2:0] $end
$var reg       3 %*   rdptr [2:0] $end
$var reg       1 &*   empty_flag  $end
$var reg       1 '*   full_flag  $end
$var reg       1 (*   pass_thru  $end
$var reg      46 )*   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 **   ADDR_WIDTH  $end
$var parameter 32 +*   DATA_WIDTH  $end
$var parameter 32 ,*   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 -*   wr_en  $end
$var wire      2 .*   addr_in [1:0] $end
$var wire     46 })   data_in [45:0] $end
$var wire      2 /*   addr_out [1:0] $end
$var reg      46 0*   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 1*   PASS_THRU  $end
$var parameter 32 2*   ADDR_WIDTH  $end
$var parameter 32 3*   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 E)   data_in [9:0] $end
$var wire      1 C)   push  $end
$var reg       1 4*   full  $end
$var reg      10 5*   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 6*   empty  $end
$var reg       1 7*   wr_en  $end
$var reg       3 8*   wrptr [2:0] $end
$var reg       3 9*   rdptr [2:0] $end
$var reg       1 :*   empty_flag  $end
$var reg       1 ;*   full_flag  $end
$var reg       1 <*   pass_thru  $end
$var reg      10 =*   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 >*   ADDR_WIDTH  $end
$var parameter 32 ?*   DATA_WIDTH  $end
$var parameter 32 @*   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 A*   wr_en  $end
$var wire      2 B*   addr_in [1:0] $end
$var wire     10 E)   data_in [9:0] $end
$var wire      2 C*   addr_out [1:0] $end
$var reg      10 D*   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 E*   PASS_THRU  $end
$var parameter 32 F*   ADDR_WIDTH  $end
$var parameter 32 G*   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 H*   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 I*   full  $end
$var reg      27 J*   data_out [26:0] $end
$var wire      1 G)   pull  $end
$var reg       1 K*   empty  $end
$var reg       1 L*   wr_en  $end
$var reg       3 M*   wrptr [2:0] $end
$var reg       3 N*   rdptr [2:0] $end
$var reg       1 O*   empty_flag  $end
$var reg       1 P*   full_flag  $end
$var reg       1 Q*   pass_thru  $end
$var reg      27 R*   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 S*   ADDR_WIDTH  $end
$var parameter 32 T*   DATA_WIDTH  $end
$var parameter 32 U*   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 V*   wr_en  $end
$var wire      2 W*   addr_in [1:0] $end
$var wire     27 H*   data_in [26:0] $end
$var wire      2 X*   addr_out [1:0] $end
$var reg      27 Y*   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 Z*   PASS_THRU  $end
$var parameter 32 [*   ADDR_WIDTH  $end
$var parameter 32 \*   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 ]*   data_in [50:0] $end
$var wire      1 I)   push  $end
$var reg       1 ^*   full  $end
$var reg      51 _*   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 `*   empty  $end
$var reg       1 a*   wr_en  $end
$var reg       3 b*   wrptr [2:0] $end
$var reg       3 c*   rdptr [2:0] $end
$var reg       1 d*   empty_flag  $end
$var reg       1 e*   full_flag  $end
$var reg       1 f*   pass_thru  $end
$var reg      51 g*   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 h*   ADDR_WIDTH  $end
$var parameter 32 i*   DATA_WIDTH  $end
$var parameter 32 j*   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 k*   wr_en  $end
$var wire      2 l*   addr_in [1:0] $end
$var wire     51 ]*   data_in [50:0] $end
$var wire      2 m*   addr_out [1:0] $end
$var reg      51 n*   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_encode $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 e    i_wvalid  $end
$var wire     40 k    i_wdata [39:0] $end
$var reg       1 o*   o_wvalid  $end
$var reg      40 p*   o_wdata [39:0] $end
$var wire      8 q*   r_eccdata [7:0] $end
$upscope $end

$upscope $end


$scope module slv3_if $end
$var parameter 32 r*   AXI_ADDR_W  $end
$var parameter 32 s*   AXI_ID_W  $end
$var parameter 32 t*   AXI_DATA_W  $end
$var parameter 32 u*   SLV_NB  $end
$var parameter 32 v*   STRB_MODE  $end
$var parameter 32 w*   AXI_SIGNALING  $end
$var parameter 32 x*   MST_CDC  $end
$var parameter 32 y*   MST_OSTDREQ_NUM  $end
$var parameter 32 z*   MST_OSTDREQ_SIZE  $end
$var parameter 32 {*   USER_SUPPORT  $end
$var parameter 32 |*   AXI_AUSER_W  $end
$var parameter 32 }*   AXI_WUSER_W  $end
$var parameter 32 ~*   AXI_BUSER_W  $end
$var parameter 32 !+   AXI_RUSER_W  $end
$var parameter 32 "+   AWCH_W  $end
$var parameter 32 #+   WCH_W  $end
$var parameter 32 $+   BCH_W  $end
$var parameter 32 %+   ARCH_W  $end
$var parameter 32 &+   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 e    i_awvalid  $end
$var reg       1 '+   i_awready  $end
$var wire     16 g    i_awaddr [15:0] $end
$var wire      8 f"   i_awlen [7:0] $end
$var wire      3 g"   i_awsize [2:0] $end
$var wire      2 h"   i_awburst [1:0] $end
$var wire      2 h"   i_awlock [1:0] $end
$var wire      4 i"   i_awcache [3:0] $end
$var wire      3 h    i_awprot [2:0] $end
$var wire      4 i"   i_awqos [3:0] $end
$var wire      4 i"   i_awregion [3:0] $end
$var wire      8 i    i_awid [7:0] $end
$var wire      1 e    i_awuser [0] $end
$var wire      1 e    i_wvalid  $end
$var reg       1 (+   i_wready  $end
$var wire      1 d    i_wlast  $end
$var wire     40 k    i_wdata [39:0] $end
$var wire      5 l    i_wstrb [4:0] $end
$var wire      1 e    i_wuser [0] $end
$var reg       1 )+   i_bvalid  $end
$var wire      1 e    i_bready  $end
$var reg       8 *+   i_bid [7:0] $end
$var reg       2 ++   i_bresp [1:0] $end
$var reg       1 ,+   i_buser [0:0] $end
$var wire      1 e    i_arvalid  $end
$var reg       1 -+   i_arready  $end
$var wire     16 g    i_araddr [15:0] $end
$var wire      8 f"   i_arlen [7:0] $end
$var wire      3 g"   i_arsize [2:0] $end
$var wire      2 h"   i_arburst [1:0] $end
$var wire      2 h"   i_arlock [1:0] $end
$var wire      4 i"   i_arcache [3:0] $end
$var wire      3 h    i_arprot [2:0] $end
$var wire      4 i"   i_arqos [3:0] $end
$var wire      4 i"   i_arregion [3:0] $end
$var wire      8 i    i_arid [7:0] $end
$var wire      1 e    i_aruser [0] $end
$var reg       1 .+   i_rvalid  $end
$var wire      1 e    i_rready  $end
$var reg       8 /+   i_rid [7:0] $end
$var reg       2 0+   i_rresp [1:0] $end
$var reg      40 1+   i_rdata [39:0] $end
$var reg       1 2+   i_rlast  $end
$var reg       1 3+   i_ruser [0:0] $end
$var wire      1 `    o_aclk  $end
$var wire      1 a    o_aresetn  $end
$var wire      1 b    o_srst  $end
$var reg       1 4+   o_awvalid  $end
$var wire      1 5+   o_awready  $end
$var reg      27 6+   o_awch [26:0] $end
$var reg       1 7+   o_wvalid  $end
$var wire      1 8+   o_wready  $end
$var reg       1 9+   o_wlast  $end
$var reg      45 :+   o_wch [44:0] $end
$var wire      1 ;+   o_bvalid  $end
$var reg       1 <+   o_bready  $end
$var wire     10 =+   o_bch [9:0] $end
$var reg       1 >+   o_arvalid  $end
$var wire      1 ?+   o_arready  $end
$var reg      27 @+   o_arch [26:0] $end
$var wire      1 A+   o_rvalid  $end
$var reg       1 B+   o_rready  $end
$var wire      1 C+   o_rlast  $end
$var wire     50 D+   o_rch [49:0] $end
$var reg      27 E+   awch [26:0] $end
$var reg      45 F+   wch [44:0] $end
$var reg      10 G+   bch [9:0] $end
$var reg      27 H+   arch [26:0] $end
$var reg      50 I+   rch [49:0] $end
$var reg       1 J+   wlast  $end
$var wire     40 K+   i_wdata_w [39:0] $end
$var wire      1 L+   i_wvalid_w  $end

$scope begin BUFF_STAGE $end
$var parameter 32 M+   PASS_THRU  $end
$var parameter 32 N+   AW_ASIZE  $end
$var parameter 32 O+   W_ASIZE  $end
$var parameter 32 P+   B_ASIZE  $end
$var parameter 32 Q+   AR_ASIZE  $end
$var parameter 32 R+   R_ASIZE  $end
$var reg       1 S+   aw_full  $end
$var reg       1 T+   aw_empty  $end
$var reg       1 U+   w_full  $end
$var reg       1 V+   w_empty  $end
$var reg       1 W+   ar_full  $end
$var reg       1 X+   ar_empty  $end
$var reg       1 Y+   r_full  $end
$var reg       1 Z+   r_empty  $end
$var reg       1 [+   b_full  $end
$var reg       1 \+   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 ]+   PASS_THRU  $end
$var parameter 32 ^+   ADDR_WIDTH  $end
$var parameter 32 _+   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 `+   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 a+   full  $end
$var reg      27 b+   data_out [26:0] $end
$var wire      1 5+   pull  $end
$var reg       1 c+   empty  $end
$var reg       1 d+   wr_en  $end
$var reg       3 e+   wrptr [2:0] $end
$var reg       3 f+   rdptr [2:0] $end
$var reg       1 g+   empty_flag  $end
$var reg       1 h+   full_flag  $end
$var reg       1 i+   pass_thru  $end
$var reg      27 j+   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 k+   ADDR_WIDTH  $end
$var parameter 32 l+   DATA_WIDTH  $end
$var parameter 32 m+   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 n+   wr_en  $end
$var wire      2 o+   addr_in [1:0] $end
$var wire     27 `+   data_in [26:0] $end
$var wire      2 p+   addr_out [1:0] $end
$var reg      27 q+   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 r+   PASS_THRU  $end
$var parameter 32 s+   ADDR_WIDTH  $end
$var parameter 32 t+   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 u+   data_in [45:0] $end
$var wire      1 L+   push  $end
$var reg       1 v+   full  $end
$var reg      46 w+   data_out [45:0] $end
$var wire      1 8+   pull  $end
$var reg       1 x+   empty  $end
$var reg       1 y+   wr_en  $end
$var reg       3 z+   wrptr [2:0] $end
$var reg       3 {+   rdptr [2:0] $end
$var reg       1 |+   empty_flag  $end
$var reg       1 }+   full_flag  $end
$var reg       1 ~+   pass_thru  $end
$var reg      46 !,   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 ",   ADDR_WIDTH  $end
$var parameter 32 #,   DATA_WIDTH  $end
$var parameter 32 $,   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 %,   wr_en  $end
$var wire      2 &,   addr_in [1:0] $end
$var wire     46 u+   data_in [45:0] $end
$var wire      2 ',   addr_out [1:0] $end
$var reg      46 (,   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 ),   PASS_THRU  $end
$var parameter 32 *,   ADDR_WIDTH  $end
$var parameter 32 +,   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 =+   data_in [9:0] $end
$var wire      1 ;+   push  $end
$var reg       1 ,,   full  $end
$var reg      10 -,   data_out [9:0] $end
$var wire      1 e    pull  $end
$var reg       1 .,   empty  $end
$var reg       1 /,   wr_en  $end
$var reg       3 0,   wrptr [2:0] $end
$var reg       3 1,   rdptr [2:0] $end
$var reg       1 2,   empty_flag  $end
$var reg       1 3,   full_flag  $end
$var reg       1 4,   pass_thru  $end
$var reg      10 5,   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 6,   ADDR_WIDTH  $end
$var parameter 32 7,   DATA_WIDTH  $end
$var parameter 32 8,   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 9,   wr_en  $end
$var wire      2 :,   addr_in [1:0] $end
$var wire     10 =+   data_in [9:0] $end
$var wire      2 ;,   addr_out [1:0] $end
$var reg      10 <,   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 =,   PASS_THRU  $end
$var parameter 32 >,   ADDR_WIDTH  $end
$var parameter 32 ?,   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 @,   data_in [26:0] $end
$var wire      1 e    push  $end
$var reg       1 A,   full  $end
$var reg      27 B,   data_out [26:0] $end
$var wire      1 ?+   pull  $end
$var reg       1 C,   empty  $end
$var reg       1 D,   wr_en  $end
$var reg       3 E,   wrptr [2:0] $end
$var reg       3 F,   rdptr [2:0] $end
$var reg       1 G,   empty_flag  $end
$var reg       1 H,   full_flag  $end
$var reg       1 I,   pass_thru  $end
$var reg      27 J,   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 K,   ADDR_WIDTH  $end
$var parameter 32 L,   DATA_WIDTH  $end
$var parameter 32 M,   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 N,   wr_en  $end
$var wire      2 O,   addr_in [1:0] $end
$var wire     27 @,   data_in [26:0] $end
$var wire      2 P,   addr_out [1:0] $end
$var reg      27 Q,   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 R,   PASS_THRU  $end
$var parameter 32 S,   ADDR_WIDTH  $end
$var parameter 32 T,   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 U,   data_in [50:0] $end
$var wire      1 A+   push  $end
$var reg       1 V,   full  $end
$var reg      51 W,   data_out [50:0] $end
$var wire      1 e    pull  $end
$var reg       1 X,   empty  $end
$var reg       1 Y,   wr_en  $end
$var reg       3 Z,   wrptr [2:0] $end
$var reg       3 [,   rdptr [2:0] $end
$var reg       1 \,   empty_flag  $end
$var reg       1 ],   full_flag  $end
$var reg       1 ^,   pass_thru  $end
$var reg      51 _,   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 `,   ADDR_WIDTH  $end
$var parameter 32 a,   DATA_WIDTH  $end
$var parameter 32 b,   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 c,   wr_en  $end
$var wire      2 d,   addr_in [1:0] $end
$var wire     51 U,   data_in [50:0] $end
$var wire      2 e,   addr_out [1:0] $end
$var reg      51 f,   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_encode $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 e    i_wvalid  $end
$var wire     40 k    i_wdata [39:0] $end
$var reg       1 g,   o_wvalid  $end
$var reg      40 h,   o_wdata [39:0] $end
$var wire      8 i,   r_eccdata [7:0] $end
$upscope $end

$upscope $end


$scope module switchs $end
$var parameter 32 j,   AXI_ADDR_W  $end
$var parameter 32 k,   AXI_ID_W  $end
$var parameter 32 l,   AXI_DATA_W  $end
$var parameter 32 m,   AXI_SIGNALING  $end
$var parameter 32 n,   MST_NB  $end
$var parameter 32 o,   SLV_NB  $end
$var parameter 32 p,   MST_PIPELINE  $end
$var parameter 32 q,   SLV_PIPELINE  $end
$var parameter 32 r,   TIMEOUT_ENABLE  $end
$var parameter 16 s,   MST_ROUTES [15:0] $end
$var parameter  8 t,   MST0_ID_MASK [7:0] $end
$var parameter  8 u,   MST1_ID_MASK [7:0] $end
$var parameter  8 v,   MST2_ID_MASK [7:0] $end
$var parameter  8 w,   MST3_ID_MASK [7:0] $end
$var parameter 32 x,   MST0_PRIORITY  $end
$var parameter 32 y,   MST1_PRIORITY  $end
$var parameter 32 z,   MST2_PRIORITY  $end
$var parameter 32 {,   MST3_PRIORITY  $end
$var parameter 32 |,   SLV0_START_ADDR  $end
$var parameter 32 },   SLV0_END_ADDR  $end
$var parameter 32 ~,   SLV1_START_ADDR  $end
$var parameter 32 !-   SLV1_END_ADDR  $end
$var parameter 32 "-   SLV2_START_ADDR  $end
$var parameter 32 #-   SLV2_END_ADDR  $end
$var parameter 32 $-   SLV3_START_ADDR  $end
$var parameter 32 %-   SLV3_END_ADDR  $end
$var parameter 32 &-   AWCH_W  $end
$var parameter 32 '-   WCH_W  $end
$var parameter 32 (-   BCH_W  $end
$var parameter 32 )-   ARCH_W  $end
$var parameter 32 *-   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 +-   i_awvalid [3] $end
$var wire      1 ,-   i_awvalid [2] $end
$var wire      1 --   i_awvalid [1] $end
$var wire      1 .-   i_awvalid [0] $end
$var reg       4 /-   i_awready [3:0] $end
$var wire     108 0-   i_awch [107:0] $end
$var wire      1 1-   i_wvalid [3] $end
$var wire      1 2-   i_wvalid [2] $end
$var wire      1 3-   i_wvalid [1] $end
$var wire      1 4-   i_wvalid [0] $end
$var reg       4 5-   i_wready [3:0] $end
$var wire      4 6-   i_wlast [3:0] $end
$var wire     180 7-   i_wch [179:0] $end
$var reg       4 8-   i_bvalid [3:0] $end
$var wire      1 9-   i_bready [3] $end
$var wire      1 :-   i_bready [2] $end
$var wire      1 ;-   i_bready [1] $end
$var wire      1 <-   i_bready [0] $end
$var reg      40 =-   i_bch [39:0] $end
$var wire      1 >-   i_arvalid [3] $end
$var wire      1 ?-   i_arvalid [2] $end
$var wire      1 @-   i_arvalid [1] $end
$var wire      1 A-   i_arvalid [0] $end
$var reg       4 B-   i_arready [3:0] $end
$var wire     108 C-   i_arch [107:0] $end
$var reg       4 D-   i_rvalid [3:0] $end
$var wire      1 E-   i_rready [3] $end
$var wire      1 F-   i_rready [2] $end
$var wire      1 G-   i_rready [1] $end
$var wire      1 H-   i_rready [0] $end
$var reg       4 I-   i_rlast [3:0] $end
$var reg      200 J-   i_rch [199:0] $end
$var reg       4 K-   o_awvalid [3:0] $end
$var wire      1 L-   o_awready [3] $end
$var wire      1 M-   o_awready [2] $end
$var wire      1 N-   o_awready [1] $end
$var wire      1 O-   o_awready [0] $end
$var reg      108 P-   o_awch [107:0] $end
$var reg       4 Q-   o_wvalid [3:0] $end
$var wire      1 R-   o_wready [3] $end
$var wire      1 S-   o_wready [2] $end
$var wire      1 T-   o_wready [1] $end
$var wire      1 U-   o_wready [0] $end
$var reg       4 V-   o_wlast [3:0] $end
$var reg      180 W-   o_wch [179:0] $end
$var wire      1 X-   o_bvalid [3] $end
$var wire      1 Y-   o_bvalid [2] $end
$var wire      1 Z-   o_bvalid [1] $end
$var wire      1 [-   o_bvalid [0] $end
$var reg       4 \-   o_bready [3:0] $end
$var wire     40 ]-   o_bch [39:0] $end
$var reg       4 ^-   o_arvalid [3:0] $end
$var wire      1 _-   o_arready [3] $end
$var wire      1 `-   o_arready [2] $end
$var wire      1 a-   o_arready [1] $end
$var wire      1 b-   o_arready [0] $end
$var reg      108 c-   o_arch [107:0] $end
$var wire      1 d-   o_rvalid [3] $end
$var wire      1 e-   o_rvalid [2] $end
$var wire      1 f-   o_rvalid [1] $end
$var wire      1 g-   o_rvalid [0] $end
$var reg       4 h-   o_rready [3:0] $end
$var wire      4 i-   o_rlast [3:0] $end
$var wire     200 j-   o_rch [199:0] $end
$var reg      16 k-   slv_awvalid [15:0] $end
$var reg      16 l-   slv_awready [15:0] $end
$var reg      108 m-   awch [107:0] $end
$var reg      16 n-   slv_wvalid [15:0] $end
$var reg      16 o-   slv_wready [15:0] $end
$var reg      16 p-   slv_wlast [15:0] $end
$var reg      180 q-   wch [179:0] $end
$var reg      16 r-   slv_bvalid [15:0] $end
$var reg      16 s-   slv_bready [15:0] $end
$var reg      16 t-   slv_arvalid [15:0] $end
$var reg      16 u-   slv_arready [15:0] $end
$var reg      108 v-   arch [107:0] $end
$var reg      16 w-   slv_rvalid [15:0] $end
$var reg      16 x-   slv_rready [15:0] $end
$var reg      16 y-   slv_rlast [15:0] $end
$var reg      16 z-   mst_awvalid [15:0] $end
$var reg      16 {-   mst_awready [15:0] $end
$var reg      16 |-   mst_wvalid [15:0] $end
$var reg      16 }-   mst_wready [15:0] $end
$var reg      16 ~-   mst_wlast [15:0] $end
$var reg      16 !.   mst_bvalid [15:0] $end
$var reg      16 ".   mst_bready [15:0] $end
$var reg      40 #.   bch [39:0] $end
$var reg      16 $.   mst_arvalid [15:0] $end
$var reg      16 %.   mst_arready [15:0] $end
$var reg      16 &.   mst_rvalid [15:0] $end
$var reg      16 '.   mst_rready [15:0] $end
$var reg      16 (.   mst_rlast [15:0] $end
$var reg      200 ).   rch [199:0] $end

$scope begin SLV_SWITCHS_GEN[0] $end
$var parameter 32 *.   i [31:0] $end
$var reg       1 +.   pipe_awvalid  $end
$var reg       1 ,.   pipe_awready  $end
$var reg      27 -.   pipe_awch [26:0] $end
$var reg       1 ..   pipe_wvalid  $end
$var reg       1 /.   pipe_wready  $end
$var reg       1 0.   pipe_wlast  $end
$var reg      45 1.   pipe_wch [44:0] $end
$var reg       1 2.   pipe_bvalid  $end
$var reg       1 3.   pipe_bready  $end
$var reg      10 4.   pipe_bch [9:0] $end
$var reg       1 5.   pipe_arvalid  $end
$var reg       1 6.   pipe_arready  $end
$var reg      27 7.   pipe_arch [26:0] $end
$var reg       1 8.   pipe_rvalid  $end
$var reg       1 9.   pipe_rready  $end
$var reg       1 :.   pipe_rlast  $end
$var reg      50 ;.   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 <.   DATA_BUS_W  $end
$var parameter 32 =.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 .-   i_valid  $end
$var reg       1 >.   i_ready  $end
$var wire     27 ?.   i_data [26:0] $end
$var reg       1 @.   o_valid  $end
$var wire      1 A.   o_ready  $end
$var reg      27 B.   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 C.   DATA_BUS_W  $end
$var parameter 32 D.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 4-   i_valid  $end
$var reg       1 E.   i_ready  $end
$var wire     46 F.   i_data [45:0] $end
$var reg       1 G.   o_valid  $end
$var wire      1 H.   o_ready  $end
$var reg      46 I.   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 J.   DATA_BUS_W  $end
$var parameter 32 K.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 L.   i_valid  $end
$var reg       1 M.   i_ready  $end
$var wire     10 N.   i_data [9:0] $end
$var reg       1 O.   o_valid  $end
$var wire      1 <-   o_ready  $end
$var reg      10 P.   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 Q.   DATA_BUS_W  $end
$var parameter 32 R.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 A-   i_valid  $end
$var reg       1 S.   i_ready  $end
$var wire     27 T.   i_data [26:0] $end
$var reg       1 U.   o_valid  $end
$var wire      1 V.   o_ready  $end
$var reg      27 W.   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 X.   DATA_BUS_W  $end
$var parameter 32 Y.   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Z.   i_valid  $end
$var reg       1 [.   i_ready  $end
$var wire     51 \.   i_data [50:0] $end
$var reg       1 ].   o_valid  $end
$var wire      1 H-   o_ready  $end
$var reg      51 ^.   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 _.   AXI_ADDR_W  $end
$var parameter 32 `.   AXI_ID_W  $end
$var parameter 32 a.   AXI_SIGNALING  $end
$var parameter 32 b.   SLV_NB  $end
$var parameter 32 c.   TIMEOUT_ENABLE  $end
$var parameter  4 d.   MST_ROUTES  $end
$var parameter 32 e.   SLV0_START_ADDR  $end
$var parameter 32 f.   SLV0_END_ADDR  $end
$var parameter 32 g.   SLV1_START_ADDR  $end
$var parameter 32 h.   SLV1_END_ADDR  $end
$var parameter 32 i.   SLV2_START_ADDR  $end
$var parameter 32 j.   SLV2_END_ADDR  $end
$var parameter 32 k.   SLV3_START_ADDR  $end
$var parameter 32 l.   SLV3_END_ADDR  $end
$var parameter 32 m.   AWCH_W  $end
$var parameter 32 n.   WCH_W  $end
$var parameter 32 o.   BCH_W  $end
$var parameter 32 p.   ARCH_W  $end
$var parameter 32 q.   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 r.   i_awvalid  $end
$var reg       1 s.   i_awready  $end
$var wire     27 t.   i_awch [26:0] $end
$var wire      1 u.   i_wvalid  $end
$var reg       1 v.   i_wready  $end
$var wire      1 w.   i_wlast  $end
$var wire     45 x.   i_wch [44:0] $end
$var reg       1 y.   i_bvalid  $end
$var wire      1 z.   i_bready  $end
$var reg      10 {.   i_bch [9:0] $end
$var wire      1 |.   i_arvalid  $end
$var reg       1 }.   i_arready  $end
$var wire     27 ~.   i_arch [26:0] $end
$var reg       1 !/   i_rvalid  $end
$var wire      1 "/   i_rready  $end
$var reg       1 #/   i_rlast  $end
$var reg      50 $/   i_rch [49:0] $end
$var reg       4 %/   o_awvalid [3:0] $end
$var wire      4 &/   o_awready [3:0] $end
$var reg      27 '/   o_awch [26:0] $end
$var reg       4 (/   o_wvalid [3:0] $end
$var wire      4 )/   o_wready [3:0] $end
$var reg       4 */   o_wlast [3:0] $end
$var reg      45 +/   o_wch [44:0] $end
$var wire      4 ,/   o_bvalid [3:0] $end
$var reg       4 -/   o_bready [3:0] $end
$var wire     40 ./   o_bch [39:0] $end
$var reg       4 //   o_arvalid [3:0] $end
$var wire      4 0/   o_arready [3:0] $end
$var reg      27 1/   o_arch [26:0] $end
$var wire      4 2/   o_rvalid [3:0] $end
$var reg       4 3/   o_rready [3:0] $end
$var wire      4 4/   o_rlast [3:0] $end
$var wire     200 5/   o_rch [199:0] $end
$var reg       1 6/   wch_full  $end
$var reg       1 7/   wch_empty  $end
$var reg       4 8/   slv_aw_targeted [3:0] $end
$var reg       4 9/   slv_w_targeted [3:0] $end
$var reg       4 :/   slv_ar_targeted [3:0] $end
$var reg       1 ;/   bch_en  $end
$var reg       4 </   bch_req [3:0] $end
$var reg       4 =/   bch_grant [3:0] $end
$var reg       1 >/   rch_en  $end
$var reg       4 ?/   rch_req [3:0] $end
$var reg       4 @/   rch_grant [3:0] $end
$var reg      16 A/   slv0_start_addr [15:0] $end
$var reg      16 B/   slv0_end_addr [15:0] $end
$var reg      16 C/   slv1_start_addr [15:0] $end
$var reg      16 D/   slv1_end_addr [15:0] $end
$var reg      16 E/   slv2_start_addr [15:0] $end
$var reg      16 F/   slv2_end_addr [15:0] $end
$var reg      16 G/   slv3_start_addr [15:0] $end
$var reg      16 H/   slv3_end_addr [15:0] $end
$var reg       1 I/   w_misrouting  $end
$var reg       1 J/   r_misrouting  $end
$var reg       1 K/   bch_mr_full  $end
$var reg       1 L/   bch_mr_empty  $end
$var reg       8 M/   bch_mr_id [7:0] $end
$var reg       1 N/   rch_mr_full  $end
$var reg       1 O/   rch_mr_empty  $end
$var reg      16 P/   rch_mr_info [15:0] $end
$var reg       8 Q/   rch_mr_id [7:0] $end
$var reg       8 R/   rch_mr_len [7:0] $end
$var reg       8 S/   rlen [7:0] $end
$var reg       1 T/   rch_running  $end
$var reg       4 U/   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 V/   PASS_THRU  $end
$var parameter 32 W/   ADDR_WIDTH  $end
$var parameter 32 X/   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 Y/   data_in [3:0] $end
$var wire      1 Z/   push  $end
$var reg       1 [/   full  $end
$var reg       4 \/   data_out [3:0] $end
$var wire      1 ]/   pull  $end
$var reg       1 ^/   empty  $end
$var reg       1 _/   wr_en  $end
$var reg       9 `/   wrptr [8:0] $end
$var reg       9 a/   rdptr [8:0] $end
$var reg       1 b/   empty_flag  $end
$var reg       1 c/   full_flag  $end
$var reg       1 d/   pass_thru  $end
$var reg       4 e/   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 f/   ADDR_WIDTH  $end
$var parameter 32 g/   DATA_WIDTH  $end
$var parameter 32 h/   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 i/   wr_en  $end
$var wire      8 j/   addr_in [7:0] $end
$var wire      4 Y/   data_in [3:0] $end
$var wire      8 k/   addr_out [7:0] $end
$var reg       4 l/   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 m/   PASS_THRU  $end
$var parameter 32 n/   ADDR_WIDTH  $end
$var parameter 32 o/   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      8 p/   data_in [7:0] $end
$var wire      1 q/   push  $end
$var reg       1 r/   full  $end
$var reg       8 s/   data_out [7:0] $end
$var wire      1 t/   pull  $end
$var reg       1 u/   empty  $end
$var reg       1 v/   wr_en  $end
$var reg       3 w/   wrptr [2:0] $end
$var reg       3 x/   rdptr [2:0] $end
$var reg       1 y/   empty_flag  $end
$var reg       1 z/   full_flag  $end
$var reg       1 {/   pass_thru  $end
$var reg       8 |/   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 }/   ADDR_WIDTH  $end
$var parameter 32 ~/   DATA_WIDTH  $end
$var parameter 32 !0   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 "0   wr_en  $end
$var wire      2 #0   addr_in [1:0] $end
$var wire      8 p/   data_in [7:0] $end
$var wire      2 $0   addr_out [1:0] $end
$var reg       8 %0   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 &0   REQ_NB  $end
$var parameter 32 '0   REQ0_PRIORITY  $end
$var parameter 32 (0   REQ1_PRIORITY  $end
$var parameter 32 )0   REQ2_PRIORITY  $end
$var parameter 32 *0   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 +0   en  $end
$var wire      4 ,0   req [3:0] $end
$var reg       4 -0   grant [3:0] $end
$var reg       1 .0   p0_active  $end
$var reg       1 /0   p1_active  $end
$var reg       1 00   p2_active  $end
$var reg       1 10   p3_active  $end
$var reg       4 20   req_p0 [3:0] $end
$var reg       4 30   req_p1 [3:0] $end
$var reg       4 40   req_p2 [3:0] $end
$var reg       4 50   req_p3 [3:0] $end
$var reg       4 60   grant_p0 [3:0] $end
$var reg       4 70   grant_p1 [3:0] $end
$var reg       4 80   grant_p2 [3:0] $end
$var reg       4 90   grant_p3 [3:0] $end
$var reg       1 :0   p0  $end
$var reg       1 ;0   p1  $end
$var reg       1 <0   p2  $end
$var reg       1 =0   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 >0   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ?0   en  $end
$var wire      4 @0   req [3:0] $end
$var reg       4 A0   grant [3:0] $end
$var reg       4 B0   mask [3:0] $end
$var reg       4 C0   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 D0   PASS_THRU  $end
$var parameter 32 E0   ADDR_WIDTH  $end
$var parameter 32 F0   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     16 G0   data_in [15:0] $end
$var wire      1 H0   push  $end
$var reg       1 I0   full  $end
$var reg      16 J0   data_out [15:0] $end
$var wire      1 K0   pull  $end
$var reg       1 L0   empty  $end
$var reg       1 M0   wr_en  $end
$var reg       5 N0   wrptr [4:0] $end
$var reg       5 O0   rdptr [4:0] $end
$var reg       1 P0   empty_flag  $end
$var reg       1 Q0   full_flag  $end
$var reg       1 R0   pass_thru  $end
$var reg      16 S0   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 T0   ADDR_WIDTH  $end
$var parameter 32 U0   DATA_WIDTH  $end
$var parameter 32 V0   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 W0   wr_en  $end
$var wire      4 X0   addr_in [3:0] $end
$var wire     16 G0   data_in [15:0] $end
$var wire      4 Y0   addr_out [3:0] $end
$var reg      16 Z0   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 [0   REQ_NB  $end
$var parameter 32 \0   REQ0_PRIORITY  $end
$var parameter 32 ]0   REQ1_PRIORITY  $end
$var parameter 32 ^0   REQ2_PRIORITY  $end
$var parameter 32 _0   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 `0   en  $end
$var wire      4 a0   req [3:0] $end
$var reg       4 b0   grant [3:0] $end
$var reg       1 c0   p0_active  $end
$var reg       1 d0   p1_active  $end
$var reg       1 e0   p2_active  $end
$var reg       1 f0   p3_active  $end
$var reg       4 g0   req_p0 [3:0] $end
$var reg       4 h0   req_p1 [3:0] $end
$var reg       4 i0   req_p2 [3:0] $end
$var reg       4 j0   req_p3 [3:0] $end
$var reg       4 k0   grant_p0 [3:0] $end
$var reg       4 l0   grant_p1 [3:0] $end
$var reg       4 m0   grant_p2 [3:0] $end
$var reg       4 n0   grant_p3 [3:0] $end
$var reg       1 o0   p0  $end
$var reg       1 p0   p1  $end
$var reg       1 q0   p2  $end
$var reg       1 r0   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 s0   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 t0   en  $end
$var wire      4 u0   req [3:0] $end
$var reg       4 v0   grant [3:0] $end
$var reg       4 w0   mask [3:0] $end
$var reg       4 x0   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[1] $end
$var parameter 32 y0   i [31:0] $end
$var reg       1 z0   pipe_awvalid  $end
$var reg       1 {0   pipe_awready  $end
$var reg      27 |0   pipe_awch [26:0] $end
$var reg       1 }0   pipe_wvalid  $end
$var reg       1 ~0   pipe_wready  $end
$var reg       1 !1   pipe_wlast  $end
$var reg      45 "1   pipe_wch [44:0] $end
$var reg       1 #1   pipe_bvalid  $end
$var reg       1 $1   pipe_bready  $end
$var reg      10 %1   pipe_bch [9:0] $end
$var reg       1 &1   pipe_arvalid  $end
$var reg       1 '1   pipe_arready  $end
$var reg      27 (1   pipe_arch [26:0] $end
$var reg       1 )1   pipe_rvalid  $end
$var reg       1 *1   pipe_rready  $end
$var reg       1 +1   pipe_rlast  $end
$var reg      50 ,1   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 -1   DATA_BUS_W  $end
$var parameter 32 .1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 --   i_valid  $end
$var reg       1 /1   i_ready  $end
$var wire     27 01   i_data [26:0] $end
$var reg       1 11   o_valid  $end
$var wire      1 21   o_ready  $end
$var reg      27 31   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 41   DATA_BUS_W  $end
$var parameter 32 51   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 3-   i_valid  $end
$var reg       1 61   i_ready  $end
$var wire     46 71   i_data [45:0] $end
$var reg       1 81   o_valid  $end
$var wire      1 91   o_ready  $end
$var reg      46 :1   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 ;1   DATA_BUS_W  $end
$var parameter 32 <1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 =1   i_valid  $end
$var reg       1 >1   i_ready  $end
$var wire     10 ?1   i_data [9:0] $end
$var reg       1 @1   o_valid  $end
$var wire      1 ;-   o_ready  $end
$var reg      10 A1   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 B1   DATA_BUS_W  $end
$var parameter 32 C1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 @-   i_valid  $end
$var reg       1 D1   i_ready  $end
$var wire     27 E1   i_data [26:0] $end
$var reg       1 F1   o_valid  $end
$var wire      1 G1   o_ready  $end
$var reg      27 H1   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 I1   DATA_BUS_W  $end
$var parameter 32 J1   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 K1   i_valid  $end
$var reg       1 L1   i_ready  $end
$var wire     51 M1   i_data [50:0] $end
$var reg       1 N1   o_valid  $end
$var wire      1 G-   o_ready  $end
$var reg      51 O1   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 P1   AXI_ADDR_W  $end
$var parameter 32 Q1   AXI_ID_W  $end
$var parameter 32 R1   AXI_SIGNALING  $end
$var parameter 32 S1   SLV_NB  $end
$var parameter 32 T1   TIMEOUT_ENABLE  $end
$var parameter  4 U1   MST_ROUTES  $end
$var parameter 32 V1   SLV0_START_ADDR  $end
$var parameter 32 W1   SLV0_END_ADDR  $end
$var parameter 32 X1   SLV1_START_ADDR  $end
$var parameter 32 Y1   SLV1_END_ADDR  $end
$var parameter 32 Z1   SLV2_START_ADDR  $end
$var parameter 32 [1   SLV2_END_ADDR  $end
$var parameter 32 \1   SLV3_START_ADDR  $end
$var parameter 32 ]1   SLV3_END_ADDR  $end
$var parameter 32 ^1   AWCH_W  $end
$var parameter 32 _1   WCH_W  $end
$var parameter 32 `1   BCH_W  $end
$var parameter 32 a1   ARCH_W  $end
$var parameter 32 b1   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c1   i_awvalid  $end
$var reg       1 d1   i_awready  $end
$var wire     27 e1   i_awch [26:0] $end
$var wire      1 f1   i_wvalid  $end
$var reg       1 g1   i_wready  $end
$var wire      1 h1   i_wlast  $end
$var wire     45 i1   i_wch [44:0] $end
$var reg       1 j1   i_bvalid  $end
$var wire      1 k1   i_bready  $end
$var reg      10 l1   i_bch [9:0] $end
$var wire      1 m1   i_arvalid  $end
$var reg       1 n1   i_arready  $end
$var wire     27 o1   i_arch [26:0] $end
$var reg       1 p1   i_rvalid  $end
$var wire      1 q1   i_rready  $end
$var reg       1 r1   i_rlast  $end
$var reg      50 s1   i_rch [49:0] $end
$var reg       4 t1   o_awvalid [3:0] $end
$var wire      4 u1   o_awready [3:0] $end
$var reg      27 v1   o_awch [26:0] $end
$var reg       4 w1   o_wvalid [3:0] $end
$var wire      4 x1   o_wready [3:0] $end
$var reg       4 y1   o_wlast [3:0] $end
$var reg      45 z1   o_wch [44:0] $end
$var wire      4 {1   o_bvalid [3:0] $end
$var reg       4 |1   o_bready [3:0] $end
$var wire     40 }1   o_bch [39:0] $end
$var reg       4 ~1   o_arvalid [3:0] $end
$var wire      4 !2   o_arready [3:0] $end
$var reg      27 "2   o_arch [26:0] $end
$var wire      4 #2   o_rvalid [3:0] $end
$var reg       4 $2   o_rready [3:0] $end
$var wire      4 %2   o_rlast [3:0] $end
$var wire     200 &2   o_rch [199:0] $end
$var reg       1 '2   wch_full  $end
$var reg       1 (2   wch_empty  $end
$var reg       4 )2   slv_aw_targeted [3:0] $end
$var reg       4 *2   slv_w_targeted [3:0] $end
$var reg       4 +2   slv_ar_targeted [3:0] $end
$var reg       1 ,2   bch_en  $end
$var reg       4 -2   bch_req [3:0] $end
$var reg       4 .2   bch_grant [3:0] $end
$var reg       1 /2   rch_en  $end
$var reg       4 02   rch_req [3:0] $end
$var reg       4 12   rch_grant [3:0] $end
$var reg      16 22   slv0_start_addr [15:0] $end
$var reg      16 32   slv0_end_addr [15:0] $end
$var reg      16 42   slv1_start_addr [15:0] $end
$var reg      16 52   slv1_end_addr [15:0] $end
$var reg      16 62   slv2_start_addr [15:0] $end
$var reg      16 72   slv2_end_addr [15:0] $end
$var reg      16 82   slv3_start_addr [15:0] $end
$var reg      16 92   slv3_end_addr [15:0] $end
$var reg       1 :2   w_misrouting  $end
$var reg       1 ;2   r_misrouting  $end
$var reg       1 <2   bch_mr_full  $end
$var reg       1 =2   bch_mr_empty  $end
$var reg       8 >2   bch_mr_id [7:0] $end
$var reg       1 ?2   rch_mr_full  $end
$var reg       1 @2   rch_mr_empty  $end
$var reg      16 A2   rch_mr_info [15:0] $end
$var reg       8 B2   rch_mr_id [7:0] $end
$var reg       8 C2   rch_mr_len [7:0] $end
$var reg       8 D2   rlen [7:0] $end
$var reg       1 E2   rch_running  $end
$var reg       4 F2   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 G2   PASS_THRU  $end
$var parameter 32 H2   ADDR_WIDTH  $end
$var parameter 32 I2   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 J2   data_in [3:0] $end
$var wire      1 K2   push  $end
$var reg       1 L2   full  $end
$var reg       4 M2   data_out [3:0] $end
$var wire      1 N2   pull  $end
$var reg       1 O2   empty  $end
$var reg       1 P2   wr_en  $end
$var reg       9 Q2   wrptr [8:0] $end
$var reg       9 R2   rdptr [8:0] $end
$var reg       1 S2   empty_flag  $end
$var reg       1 T2   full_flag  $end
$var reg       1 U2   pass_thru  $end
$var reg       4 V2   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 W2   ADDR_WIDTH  $end
$var parameter 32 X2   DATA_WIDTH  $end
$var parameter 32 Y2   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 Z2   wr_en  $end
$var wire      8 [2   addr_in [7:0] $end
$var wire      4 J2   data_in [3:0] $end
$var wire      8 \2   addr_out [7:0] $end
$var reg       4 ]2   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 ^2   PASS_THRU  $end
$var parameter 32 _2   ADDR_WIDTH  $end
$var parameter 32 `2   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      8 a2   data_in [7:0] $end
$var wire      1 b2   push  $end
$var reg       1 c2   full  $end
$var reg       8 d2   data_out [7:0] $end
$var wire      1 e2   pull  $end
$var reg       1 f2   empty  $end
$var reg       1 g2   wr_en  $end
$var reg       3 h2   wrptr [2:0] $end
$var reg       3 i2   rdptr [2:0] $end
$var reg       1 j2   empty_flag  $end
$var reg       1 k2   full_flag  $end
$var reg       1 l2   pass_thru  $end
$var reg       8 m2   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 n2   ADDR_WIDTH  $end
$var parameter 32 o2   DATA_WIDTH  $end
$var parameter 32 p2   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 q2   wr_en  $end
$var wire      2 r2   addr_in [1:0] $end
$var wire      8 a2   data_in [7:0] $end
$var wire      2 s2   addr_out [1:0] $end
$var reg       8 t2   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 u2   REQ_NB  $end
$var parameter 32 v2   REQ0_PRIORITY  $end
$var parameter 32 w2   REQ1_PRIORITY  $end
$var parameter 32 x2   REQ2_PRIORITY  $end
$var parameter 32 y2   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 z2   en  $end
$var wire      4 {2   req [3:0] $end
$var reg       4 |2   grant [3:0] $end
$var reg       1 }2   p0_active  $end
$var reg       1 ~2   p1_active  $end
$var reg       1 !3   p2_active  $end
$var reg       1 "3   p3_active  $end
$var reg       4 #3   req_p0 [3:0] $end
$var reg       4 $3   req_p1 [3:0] $end
$var reg       4 %3   req_p2 [3:0] $end
$var reg       4 &3   req_p3 [3:0] $end
$var reg       4 '3   grant_p0 [3:0] $end
$var reg       4 (3   grant_p1 [3:0] $end
$var reg       4 )3   grant_p2 [3:0] $end
$var reg       4 *3   grant_p3 [3:0] $end
$var reg       1 +3   p0  $end
$var reg       1 ,3   p1  $end
$var reg       1 -3   p2  $end
$var reg       1 .3   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 /3   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 03   en  $end
$var wire      4 13   req [3:0] $end
$var reg       4 23   grant [3:0] $end
$var reg       4 33   mask [3:0] $end
$var reg       4 43   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 53   PASS_THRU  $end
$var parameter 32 63   ADDR_WIDTH  $end
$var parameter 32 73   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     16 83   data_in [15:0] $end
$var wire      1 93   push  $end
$var reg       1 :3   full  $end
$var reg      16 ;3   data_out [15:0] $end
$var wire      1 <3   pull  $end
$var reg       1 =3   empty  $end
$var reg       1 >3   wr_en  $end
$var reg       5 ?3   wrptr [4:0] $end
$var reg       5 @3   rdptr [4:0] $end
$var reg       1 A3   empty_flag  $end
$var reg       1 B3   full_flag  $end
$var reg       1 C3   pass_thru  $end
$var reg      16 D3   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 E3   ADDR_WIDTH  $end
$var parameter 32 F3   DATA_WIDTH  $end
$var parameter 32 G3   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 H3   wr_en  $end
$var wire      4 I3   addr_in [3:0] $end
$var wire     16 83   data_in [15:0] $end
$var wire      4 J3   addr_out [3:0] $end
$var reg      16 K3   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 L3   REQ_NB  $end
$var parameter 32 M3   REQ0_PRIORITY  $end
$var parameter 32 N3   REQ1_PRIORITY  $end
$var parameter 32 O3   REQ2_PRIORITY  $end
$var parameter 32 P3   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Q3   en  $end
$var wire      4 R3   req [3:0] $end
$var reg       4 S3   grant [3:0] $end
$var reg       1 T3   p0_active  $end
$var reg       1 U3   p1_active  $end
$var reg       1 V3   p2_active  $end
$var reg       1 W3   p3_active  $end
$var reg       4 X3   req_p0 [3:0] $end
$var reg       4 Y3   req_p1 [3:0] $end
$var reg       4 Z3   req_p2 [3:0] $end
$var reg       4 [3   req_p3 [3:0] $end
$var reg       4 \3   grant_p0 [3:0] $end
$var reg       4 ]3   grant_p1 [3:0] $end
$var reg       4 ^3   grant_p2 [3:0] $end
$var reg       4 _3   grant_p3 [3:0] $end
$var reg       1 `3   p0  $end
$var reg       1 a3   p1  $end
$var reg       1 b3   p2  $end
$var reg       1 c3   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 d3   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 e3   en  $end
$var wire      4 f3   req [3:0] $end
$var reg       4 g3   grant [3:0] $end
$var reg       4 h3   mask [3:0] $end
$var reg       4 i3   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[2] $end
$var parameter 32 j3   i [31:0] $end
$var reg       1 k3   pipe_awvalid  $end
$var reg       1 l3   pipe_awready  $end
$var reg      27 m3   pipe_awch [26:0] $end
$var reg       1 n3   pipe_wvalid  $end
$var reg       1 o3   pipe_wready  $end
$var reg       1 p3   pipe_wlast  $end
$var reg      45 q3   pipe_wch [44:0] $end
$var reg       1 r3   pipe_bvalid  $end
$var reg       1 s3   pipe_bready  $end
$var reg      10 t3   pipe_bch [9:0] $end
$var reg       1 u3   pipe_arvalid  $end
$var reg       1 v3   pipe_arready  $end
$var reg      27 w3   pipe_arch [26:0] $end
$var reg       1 x3   pipe_rvalid  $end
$var reg       1 y3   pipe_rready  $end
$var reg       1 z3   pipe_rlast  $end
$var reg      50 {3   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 |3   DATA_BUS_W  $end
$var parameter 32 }3   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ,-   i_valid  $end
$var reg       1 ~3   i_ready  $end
$var wire     27 !4   i_data [26:0] $end
$var reg       1 "4   o_valid  $end
$var wire      1 #4   o_ready  $end
$var reg      27 $4   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 %4   DATA_BUS_W  $end
$var parameter 32 &4   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 2-   i_valid  $end
$var reg       1 '4   i_ready  $end
$var wire     46 (4   i_data [45:0] $end
$var reg       1 )4   o_valid  $end
$var wire      1 *4   o_ready  $end
$var reg      46 +4   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 ,4   DATA_BUS_W  $end
$var parameter 32 -4   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 .4   i_valid  $end
$var reg       1 /4   i_ready  $end
$var wire     10 04   i_data [9:0] $end
$var reg       1 14   o_valid  $end
$var wire      1 :-   o_ready  $end
$var reg      10 24   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 34   DATA_BUS_W  $end
$var parameter 32 44   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ?-   i_valid  $end
$var reg       1 54   i_ready  $end
$var wire     27 64   i_data [26:0] $end
$var reg       1 74   o_valid  $end
$var wire      1 84   o_ready  $end
$var reg      27 94   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 :4   DATA_BUS_W  $end
$var parameter 32 ;4   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 <4   i_valid  $end
$var reg       1 =4   i_ready  $end
$var wire     51 >4   i_data [50:0] $end
$var reg       1 ?4   o_valid  $end
$var wire      1 F-   o_ready  $end
$var reg      51 @4   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 A4   AXI_ADDR_W  $end
$var parameter 32 B4   AXI_ID_W  $end
$var parameter 32 C4   AXI_SIGNALING  $end
$var parameter 32 D4   SLV_NB  $end
$var parameter 32 E4   TIMEOUT_ENABLE  $end
$var parameter  4 F4   MST_ROUTES  $end
$var parameter 32 G4   SLV0_START_ADDR  $end
$var parameter 32 H4   SLV0_END_ADDR  $end
$var parameter 32 I4   SLV1_START_ADDR  $end
$var parameter 32 J4   SLV1_END_ADDR  $end
$var parameter 32 K4   SLV2_START_ADDR  $end
$var parameter 32 L4   SLV2_END_ADDR  $end
$var parameter 32 M4   SLV3_START_ADDR  $end
$var parameter 32 N4   SLV3_END_ADDR  $end
$var parameter 32 O4   AWCH_W  $end
$var parameter 32 P4   WCH_W  $end
$var parameter 32 Q4   BCH_W  $end
$var parameter 32 R4   ARCH_W  $end
$var parameter 32 S4   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 T4   i_awvalid  $end
$var reg       1 U4   i_awready  $end
$var wire     27 V4   i_awch [26:0] $end
$var wire      1 W4   i_wvalid  $end
$var reg       1 X4   i_wready  $end
$var wire      1 Y4   i_wlast  $end
$var wire     45 Z4   i_wch [44:0] $end
$var reg       1 [4   i_bvalid  $end
$var wire      1 \4   i_bready  $end
$var reg      10 ]4   i_bch [9:0] $end
$var wire      1 ^4   i_arvalid  $end
$var reg       1 _4   i_arready  $end
$var wire     27 `4   i_arch [26:0] $end
$var reg       1 a4   i_rvalid  $end
$var wire      1 b4   i_rready  $end
$var reg       1 c4   i_rlast  $end
$var reg      50 d4   i_rch [49:0] $end
$var reg       4 e4   o_awvalid [3:0] $end
$var wire      4 f4   o_awready [3:0] $end
$var reg      27 g4   o_awch [26:0] $end
$var reg       4 h4   o_wvalid [3:0] $end
$var wire      4 i4   o_wready [3:0] $end
$var reg       4 j4   o_wlast [3:0] $end
$var reg      45 k4   o_wch [44:0] $end
$var wire      4 l4   o_bvalid [3:0] $end
$var reg       4 m4   o_bready [3:0] $end
$var wire     40 n4   o_bch [39:0] $end
$var reg       4 o4   o_arvalid [3:0] $end
$var wire      4 p4   o_arready [3:0] $end
$var reg      27 q4   o_arch [26:0] $end
$var wire      4 r4   o_rvalid [3:0] $end
$var reg       4 s4   o_rready [3:0] $end
$var wire      4 t4   o_rlast [3:0] $end
$var wire     200 u4   o_rch [199:0] $end
$var reg       1 v4   wch_full  $end
$var reg       1 w4   wch_empty  $end
$var reg       4 x4   slv_aw_targeted [3:0] $end
$var reg       4 y4   slv_w_targeted [3:0] $end
$var reg       4 z4   slv_ar_targeted [3:0] $end
$var reg       1 {4   bch_en  $end
$var reg       4 |4   bch_req [3:0] $end
$var reg       4 }4   bch_grant [3:0] $end
$var reg       1 ~4   rch_en  $end
$var reg       4 !5   rch_req [3:0] $end
$var reg       4 "5   rch_grant [3:0] $end
$var reg      16 #5   slv0_start_addr [15:0] $end
$var reg      16 $5   slv0_end_addr [15:0] $end
$var reg      16 %5   slv1_start_addr [15:0] $end
$var reg      16 &5   slv1_end_addr [15:0] $end
$var reg      16 '5   slv2_start_addr [15:0] $end
$var reg      16 (5   slv2_end_addr [15:0] $end
$var reg      16 )5   slv3_start_addr [15:0] $end
$var reg      16 *5   slv3_end_addr [15:0] $end
$var reg       1 +5   w_misrouting  $end
$var reg       1 ,5   r_misrouting  $end
$var reg       1 -5   bch_mr_full  $end
$var reg       1 .5   bch_mr_empty  $end
$var reg       8 /5   bch_mr_id [7:0] $end
$var reg       1 05   rch_mr_full  $end
$var reg       1 15   rch_mr_empty  $end
$var reg      16 25   rch_mr_info [15:0] $end
$var reg       8 35   rch_mr_id [7:0] $end
$var reg       8 45   rch_mr_len [7:0] $end
$var reg       8 55   rlen [7:0] $end
$var reg       1 65   rch_running  $end
$var reg       4 75   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 85   PASS_THRU  $end
$var parameter 32 95   ADDR_WIDTH  $end
$var parameter 32 :5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 ;5   data_in [3:0] $end
$var wire      1 <5   push  $end
$var reg       1 =5   full  $end
$var reg       4 >5   data_out [3:0] $end
$var wire      1 ?5   pull  $end
$var reg       1 @5   empty  $end
$var reg       1 A5   wr_en  $end
$var reg       9 B5   wrptr [8:0] $end
$var reg       9 C5   rdptr [8:0] $end
$var reg       1 D5   empty_flag  $end
$var reg       1 E5   full_flag  $end
$var reg       1 F5   pass_thru  $end
$var reg       4 G5   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 H5   ADDR_WIDTH  $end
$var parameter 32 I5   DATA_WIDTH  $end
$var parameter 32 J5   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 K5   wr_en  $end
$var wire      8 L5   addr_in [7:0] $end
$var wire      4 ;5   data_in [3:0] $end
$var wire      8 M5   addr_out [7:0] $end
$var reg       4 N5   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 O5   PASS_THRU  $end
$var parameter 32 P5   ADDR_WIDTH  $end
$var parameter 32 Q5   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      8 R5   data_in [7:0] $end
$var wire      1 S5   push  $end
$var reg       1 T5   full  $end
$var reg       8 U5   data_out [7:0] $end
$var wire      1 V5   pull  $end
$var reg       1 W5   empty  $end
$var reg       1 X5   wr_en  $end
$var reg       3 Y5   wrptr [2:0] $end
$var reg       3 Z5   rdptr [2:0] $end
$var reg       1 [5   empty_flag  $end
$var reg       1 \5   full_flag  $end
$var reg       1 ]5   pass_thru  $end
$var reg       8 ^5   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 _5   ADDR_WIDTH  $end
$var parameter 32 `5   DATA_WIDTH  $end
$var parameter 32 a5   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 b5   wr_en  $end
$var wire      2 c5   addr_in [1:0] $end
$var wire      8 R5   data_in [7:0] $end
$var wire      2 d5   addr_out [1:0] $end
$var reg       8 e5   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 f5   REQ_NB  $end
$var parameter 32 g5   REQ0_PRIORITY  $end
$var parameter 32 h5   REQ1_PRIORITY  $end
$var parameter 32 i5   REQ2_PRIORITY  $end
$var parameter 32 j5   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 k5   en  $end
$var wire      4 l5   req [3:0] $end
$var reg       4 m5   grant [3:0] $end
$var reg       1 n5   p0_active  $end
$var reg       1 o5   p1_active  $end
$var reg       1 p5   p2_active  $end
$var reg       1 q5   p3_active  $end
$var reg       4 r5   req_p0 [3:0] $end
$var reg       4 s5   req_p1 [3:0] $end
$var reg       4 t5   req_p2 [3:0] $end
$var reg       4 u5   req_p3 [3:0] $end
$var reg       4 v5   grant_p0 [3:0] $end
$var reg       4 w5   grant_p1 [3:0] $end
$var reg       4 x5   grant_p2 [3:0] $end
$var reg       4 y5   grant_p3 [3:0] $end
$var reg       1 z5   p0  $end
$var reg       1 {5   p1  $end
$var reg       1 |5   p2  $end
$var reg       1 }5   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 ~5   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 !6   en  $end
$var wire      4 "6   req [3:0] $end
$var reg       4 #6   grant [3:0] $end
$var reg       4 $6   mask [3:0] $end
$var reg       4 %6   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 &6   PASS_THRU  $end
$var parameter 32 '6   ADDR_WIDTH  $end
$var parameter 32 (6   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     16 )6   data_in [15:0] $end
$var wire      1 *6   push  $end
$var reg       1 +6   full  $end
$var reg      16 ,6   data_out [15:0] $end
$var wire      1 -6   pull  $end
$var reg       1 .6   empty  $end
$var reg       1 /6   wr_en  $end
$var reg       5 06   wrptr [4:0] $end
$var reg       5 16   rdptr [4:0] $end
$var reg       1 26   empty_flag  $end
$var reg       1 36   full_flag  $end
$var reg       1 46   pass_thru  $end
$var reg      16 56   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 66   ADDR_WIDTH  $end
$var parameter 32 76   DATA_WIDTH  $end
$var parameter 32 86   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 96   wr_en  $end
$var wire      4 :6   addr_in [3:0] $end
$var wire     16 )6   data_in [15:0] $end
$var wire      4 ;6   addr_out [3:0] $end
$var reg      16 <6   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 =6   REQ_NB  $end
$var parameter 32 >6   REQ0_PRIORITY  $end
$var parameter 32 ?6   REQ1_PRIORITY  $end
$var parameter 32 @6   REQ2_PRIORITY  $end
$var parameter 32 A6   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 B6   en  $end
$var wire      4 C6   req [3:0] $end
$var reg       4 D6   grant [3:0] $end
$var reg       1 E6   p0_active  $end
$var reg       1 F6   p1_active  $end
$var reg       1 G6   p2_active  $end
$var reg       1 H6   p3_active  $end
$var reg       4 I6   req_p0 [3:0] $end
$var reg       4 J6   req_p1 [3:0] $end
$var reg       4 K6   req_p2 [3:0] $end
$var reg       4 L6   req_p3 [3:0] $end
$var reg       4 M6   grant_p0 [3:0] $end
$var reg       4 N6   grant_p1 [3:0] $end
$var reg       4 O6   grant_p2 [3:0] $end
$var reg       4 P6   grant_p3 [3:0] $end
$var reg       1 Q6   p0  $end
$var reg       1 R6   p1  $end
$var reg       1 S6   p2  $end
$var reg       1 T6   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 U6   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 V6   en  $end
$var wire      4 W6   req [3:0] $end
$var reg       4 X6   grant [3:0] $end
$var reg       4 Y6   mask [3:0] $end
$var reg       4 Z6   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin SLV_SWITCHS_GEN[3] $end
$var parameter 32 [6   i [31:0] $end
$var reg       1 \6   pipe_awvalid  $end
$var reg       1 ]6   pipe_awready  $end
$var reg      27 ^6   pipe_awch [26:0] $end
$var reg       1 _6   pipe_wvalid  $end
$var reg       1 `6   pipe_wready  $end
$var reg       1 a6   pipe_wlast  $end
$var reg      45 b6   pipe_wch [44:0] $end
$var reg       1 c6   pipe_bvalid  $end
$var reg       1 d6   pipe_bready  $end
$var reg      10 e6   pipe_bch [9:0] $end
$var reg       1 f6   pipe_arvalid  $end
$var reg       1 g6   pipe_arready  $end
$var reg      27 h6   pipe_arch [26:0] $end
$var reg       1 i6   pipe_rvalid  $end
$var reg       1 j6   pipe_rready  $end
$var reg       1 k6   pipe_rlast  $end
$var reg      50 l6   pipe_rch [49:0] $end

$scope module awch_slv_pipe $end
$var parameter 32 m6   DATA_BUS_W  $end
$var parameter 32 n6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 +-   i_valid  $end
$var reg       1 o6   i_ready  $end
$var wire     27 p6   i_data [26:0] $end
$var reg       1 q6   o_valid  $end
$var wire      1 r6   o_ready  $end
$var reg      27 s6   o_data [26:0] $end
$upscope $end


$scope module wch_slv_pipe $end
$var parameter 32 t6   DATA_BUS_W  $end
$var parameter 32 u6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 1-   i_valid  $end
$var reg       1 v6   i_ready  $end
$var wire     46 w6   i_data [45:0] $end
$var reg       1 x6   o_valid  $end
$var wire      1 y6   o_ready  $end
$var reg      46 z6   o_data [45:0] $end
$upscope $end


$scope module bch_slv_pipe $end
$var parameter 32 {6   DATA_BUS_W  $end
$var parameter 32 |6   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 }6   i_valid  $end
$var reg       1 ~6   i_ready  $end
$var wire     10 !7   i_data [9:0] $end
$var reg       1 "7   o_valid  $end
$var wire      1 9-   o_ready  $end
$var reg      10 #7   o_data [9:0] $end
$upscope $end


$scope module arch_slv_pipe $end
$var parameter 32 $7   DATA_BUS_W  $end
$var parameter 32 %7   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 >-   i_valid  $end
$var reg       1 &7   i_ready  $end
$var wire     27 '7   i_data [26:0] $end
$var reg       1 (7   o_valid  $end
$var wire      1 )7   o_ready  $end
$var reg      27 *7   o_data [26:0] $end
$upscope $end


$scope module rch_slv_pipe $end
$var parameter 32 +7   DATA_BUS_W  $end
$var parameter 32 ,7   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 -7   i_valid  $end
$var reg       1 .7   i_ready  $end
$var wire     51 /7   i_data [50:0] $end
$var reg       1 07   o_valid  $end
$var wire      1 E-   o_ready  $end
$var reg      51 17   o_data [50:0] $end
$upscope $end


$scope module slv_switch $end
$var parameter 32 27   AXI_ADDR_W  $end
$var parameter 32 37   AXI_ID_W  $end
$var parameter 32 47   AXI_SIGNALING  $end
$var parameter 32 57   SLV_NB  $end
$var parameter 32 67   TIMEOUT_ENABLE  $end
$var parameter  4 77   MST_ROUTES  $end
$var parameter 32 87   SLV0_START_ADDR  $end
$var parameter 32 97   SLV0_END_ADDR  $end
$var parameter 32 :7   SLV1_START_ADDR  $end
$var parameter 32 ;7   SLV1_END_ADDR  $end
$var parameter 32 <7   SLV2_START_ADDR  $end
$var parameter 32 =7   SLV2_END_ADDR  $end
$var parameter 32 >7   SLV3_START_ADDR  $end
$var parameter 32 ?7   SLV3_END_ADDR  $end
$var parameter 32 @7   AWCH_W  $end
$var parameter 32 A7   WCH_W  $end
$var parameter 32 B7   BCH_W  $end
$var parameter 32 C7   ARCH_W  $end
$var parameter 32 D7   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 E7   i_awvalid  $end
$var reg       1 F7   i_awready  $end
$var wire     27 G7   i_awch [26:0] $end
$var wire      1 H7   i_wvalid  $end
$var reg       1 I7   i_wready  $end
$var wire      1 J7   i_wlast  $end
$var wire     45 K7   i_wch [44:0] $end
$var reg       1 L7   i_bvalid  $end
$var wire      1 M7   i_bready  $end
$var reg      10 N7   i_bch [9:0] $end
$var wire      1 O7   i_arvalid  $end
$var reg       1 P7   i_arready  $end
$var wire     27 Q7   i_arch [26:0] $end
$var reg       1 R7   i_rvalid  $end
$var wire      1 S7   i_rready  $end
$var reg       1 T7   i_rlast  $end
$var reg      50 U7   i_rch [49:0] $end
$var reg       4 V7   o_awvalid [3:0] $end
$var wire      4 W7   o_awready [3:0] $end
$var reg      27 X7   o_awch [26:0] $end
$var reg       4 Y7   o_wvalid [3:0] $end
$var wire      4 Z7   o_wready [3:0] $end
$var reg       4 [7   o_wlast [3:0] $end
$var reg      45 \7   o_wch [44:0] $end
$var wire      4 ]7   o_bvalid [3:0] $end
$var reg       4 ^7   o_bready [3:0] $end
$var wire     40 _7   o_bch [39:0] $end
$var reg       4 `7   o_arvalid [3:0] $end
$var wire      4 a7   o_arready [3:0] $end
$var reg      27 b7   o_arch [26:0] $end
$var wire      4 c7   o_rvalid [3:0] $end
$var reg       4 d7   o_rready [3:0] $end
$var wire      4 e7   o_rlast [3:0] $end
$var wire     200 f7   o_rch [199:0] $end
$var reg       1 g7   wch_full  $end
$var reg       1 h7   wch_empty  $end
$var reg       4 i7   slv_aw_targeted [3:0] $end
$var reg       4 j7   slv_w_targeted [3:0] $end
$var reg       4 k7   slv_ar_targeted [3:0] $end
$var reg       1 l7   bch_en  $end
$var reg       4 m7   bch_req [3:0] $end
$var reg       4 n7   bch_grant [3:0] $end
$var reg       1 o7   rch_en  $end
$var reg       4 p7   rch_req [3:0] $end
$var reg       4 q7   rch_grant [3:0] $end
$var reg      16 r7   slv0_start_addr [15:0] $end
$var reg      16 s7   slv0_end_addr [15:0] $end
$var reg      16 t7   slv1_start_addr [15:0] $end
$var reg      16 u7   slv1_end_addr [15:0] $end
$var reg      16 v7   slv2_start_addr [15:0] $end
$var reg      16 w7   slv2_end_addr [15:0] $end
$var reg      16 x7   slv3_start_addr [15:0] $end
$var reg      16 y7   slv3_end_addr [15:0] $end
$var reg       1 z7   w_misrouting  $end
$var reg       1 {7   r_misrouting  $end
$var reg       1 |7   bch_mr_full  $end
$var reg       1 }7   bch_mr_empty  $end
$var reg       8 ~7   bch_mr_id [7:0] $end
$var reg       1 !8   rch_mr_full  $end
$var reg       1 "8   rch_mr_empty  $end
$var reg      16 #8   rch_mr_info [15:0] $end
$var reg       8 $8   rch_mr_id [7:0] $end
$var reg       8 %8   rch_mr_len [7:0] $end
$var reg       8 &8   rlen [7:0] $end
$var reg       1 '8   rch_running  $end
$var reg       4 (8   routes [3:0] $end

$scope module wch_gnt_fifo $end
$var parameter 32 )8   PASS_THRU  $end
$var parameter 32 *8   ADDR_WIDTH  $end
$var parameter 32 +8   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 ,8   data_in [3:0] $end
$var wire      1 -8   push  $end
$var reg       1 .8   full  $end
$var reg       4 /8   data_out [3:0] $end
$var wire      1 08   pull  $end
$var reg       1 18   empty  $end
$var reg       1 28   wr_en  $end
$var reg       9 38   wrptr [8:0] $end
$var reg       9 48   rdptr [8:0] $end
$var reg       1 58   empty_flag  $end
$var reg       1 68   full_flag  $end
$var reg       1 78   pass_thru  $end
$var reg       4 88   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 98   ADDR_WIDTH  $end
$var parameter 32 :8   DATA_WIDTH  $end
$var parameter 32 ;8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 <8   wr_en  $end
$var wire      8 =8   addr_in [7:0] $end
$var wire      4 ,8   data_in [3:0] $end
$var wire      8 >8   addr_out [7:0] $end
$var reg       4 ?8   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module bch_mr_fifo $end
$var parameter 32 @8   PASS_THRU  $end
$var parameter 32 A8   ADDR_WIDTH  $end
$var parameter 32 B8   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      8 C8   data_in [7:0] $end
$var wire      1 D8   push  $end
$var reg       1 E8   full  $end
$var reg       8 F8   data_out [7:0] $end
$var wire      1 G8   pull  $end
$var reg       1 H8   empty  $end
$var reg       1 I8   wr_en  $end
$var reg       3 J8   wrptr [2:0] $end
$var reg       3 K8   rdptr [2:0] $end
$var reg       1 L8   empty_flag  $end
$var reg       1 M8   full_flag  $end
$var reg       1 N8   pass_thru  $end
$var reg       8 O8   data_fifo [7:0] $end

$scope module fifo_ram $end
$var parameter 32 P8   ADDR_WIDTH  $end
$var parameter 32 Q8   DATA_WIDTH  $end
$var parameter 32 R8   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 S8   wr_en  $end
$var wire      2 T8   addr_in [1:0] $end
$var wire      8 C8   data_in [7:0] $end
$var wire      2 U8   addr_out [1:0] $end
$var reg       8 V8   data_out [7:0] $end
$upscope $end

$upscope $end


$scope module bch_round_robin $end
$var parameter 32 W8   REQ_NB  $end
$var parameter 32 X8   REQ0_PRIORITY  $end
$var parameter 32 Y8   REQ1_PRIORITY  $end
$var parameter 32 Z8   REQ2_PRIORITY  $end
$var parameter 32 [8   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 \8   en  $end
$var wire      4 ]8   req [3:0] $end
$var reg       4 ^8   grant [3:0] $end
$var reg       1 _8   p0_active  $end
$var reg       1 `8   p1_active  $end
$var reg       1 a8   p2_active  $end
$var reg       1 b8   p3_active  $end
$var reg       4 c8   req_p0 [3:0] $end
$var reg       4 d8   req_p1 [3:0] $end
$var reg       4 e8   req_p2 [3:0] $end
$var reg       4 f8   req_p3 [3:0] $end
$var reg       4 g8   grant_p0 [3:0] $end
$var reg       4 h8   grant_p1 [3:0] $end
$var reg       4 i8   grant_p2 [3:0] $end
$var reg       4 j8   grant_p3 [3:0] $end
$var reg       1 k8   p0  $end
$var reg       1 l8   p1  $end
$var reg       1 m8   p2  $end
$var reg       1 n8   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 o8   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 p8   en  $end
$var wire      4 q8   req [3:0] $end
$var reg       4 r8   grant [3:0] $end
$var reg       4 s8   mask [3:0] $end
$var reg       4 t8   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module rch_mr_fifo $end
$var parameter 32 u8   PASS_THRU  $end
$var parameter 32 v8   ADDR_WIDTH  $end
$var parameter 32 w8   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire     16 x8   data_in [15:0] $end
$var wire      1 y8   push  $end
$var reg       1 z8   full  $end
$var reg      16 {8   data_out [15:0] $end
$var wire      1 |8   pull  $end
$var reg       1 }8   empty  $end
$var reg       1 ~8   wr_en  $end
$var reg       5 !9   wrptr [4:0] $end
$var reg       5 "9   rdptr [4:0] $end
$var reg       1 #9   empty_flag  $end
$var reg       1 $9   full_flag  $end
$var reg       1 %9   pass_thru  $end
$var reg      16 &9   data_fifo [15:0] $end

$scope module fifo_ram $end
$var parameter 32 '9   ADDR_WIDTH  $end
$var parameter 32 (9   DATA_WIDTH  $end
$var parameter 32 )9   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 *9   wr_en  $end
$var wire      4 +9   addr_in [3:0] $end
$var wire     16 x8   data_in [15:0] $end
$var wire      4 ,9   addr_out [3:0] $end
$var reg      16 -9   data_out [15:0] $end
$upscope $end

$upscope $end


$scope module rch_round_robin $end
$var parameter 32 .9   REQ_NB  $end
$var parameter 32 /9   REQ0_PRIORITY  $end
$var parameter 32 09   REQ1_PRIORITY  $end
$var parameter 32 19   REQ2_PRIORITY  $end
$var parameter 32 29   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 39   en  $end
$var wire      4 49   req [3:0] $end
$var reg       4 59   grant [3:0] $end
$var reg       1 69   p0_active  $end
$var reg       1 79   p1_active  $end
$var reg       1 89   p2_active  $end
$var reg       1 99   p3_active  $end
$var reg       4 :9   req_p0 [3:0] $end
$var reg       4 ;9   req_p1 [3:0] $end
$var reg       4 <9   req_p2 [3:0] $end
$var reg       4 =9   req_p3 [3:0] $end
$var reg       4 >9   grant_p0 [3:0] $end
$var reg       4 ?9   grant_p1 [3:0] $end
$var reg       4 @9   grant_p2 [3:0] $end
$var reg       4 A9   grant_p3 [3:0] $end
$var reg       1 B9   p0  $end
$var reg       1 C9   p1  $end
$var reg       1 D9   p2  $end
$var reg       1 E9   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 F9   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 G9   en  $end
$var wire      4 H9   req [3:0] $end
$var reg       4 I9   grant [3:0] $end
$var reg       4 J9   mask [3:0] $end
$var reg       4 K9   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[0] $end
$var parameter 32 L9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 M9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 N9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 O9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 P9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[1] $end
$var parameter 32 Q9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 R9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 S9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 T9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 U9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[2] $end
$var parameter 32 V9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 W9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 X9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 Y9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 Z9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_MST[3] $end
$var parameter 32 [9   i [31:0] $end

$scope begin SLV_IF_PARSING[0] $end
$var parameter 32 \9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[1] $end
$var parameter 32 ]9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[2] $end
$var parameter 32 ^9   j [31:0] $end
$upscope $end


$scope begin SLV_IF_PARSING[3] $end
$var parameter 32 _9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[0] $end
$var parameter 32 `9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 a9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 b9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 c9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 d9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[1] $end
$var parameter 32 e9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 f9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 g9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 h9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 i9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[2] $end
$var parameter 32 j9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 k9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 l9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 m9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 n9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin REORDERING_TO_SLV[3] $end
$var parameter 32 o9   i [31:0] $end

$scope begin MST_IF_PARSING[0] $end
$var parameter 32 p9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[1] $end
$var parameter 32 q9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[2] $end
$var parameter 32 r9   j [31:0] $end
$upscope $end


$scope begin MST_IF_PARSING[3] $end
$var parameter 32 s9   j [31:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[0] $end
$var parameter 32 t9   i [31:0] $end
$var reg       1 u9   pipe_awvalid  $end
$var reg       1 v9   pipe_awready  $end
$var reg      27 w9   pipe_awch [26:0] $end
$var reg       1 x9   pipe_wvalid  $end
$var reg       1 y9   pipe_wready  $end
$var reg       1 z9   pipe_wlast  $end
$var reg      45 {9   pipe_wch [44:0] $end
$var reg       1 |9   pipe_bvalid  $end
$var reg       1 }9   pipe_bready  $end
$var reg      10 ~9   pipe_bch [9:0] $end
$var reg       1 !:   pipe_arvalid  $end
$var reg       1 ":   pipe_arready  $end
$var reg      27 #:   pipe_arch [26:0] $end
$var reg       1 $:   pipe_rvalid  $end
$var reg       1 %:   pipe_rready  $end
$var reg       1 &:   pipe_rlast  $end
$var reg      50 ':   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 (:   AXI_ID_W  $end
$var parameter 32 ):   AXI_DATA_W  $end
$var parameter 32 *:   MST_NB  $end
$var parameter 32 +:   TIMEOUT_ENABLE  $end
$var parameter  8 ,:   MST0_ID_MASK [7:0] $end
$var parameter  8 -:   MST1_ID_MASK [7:0] $end
$var parameter  8 .:   MST2_ID_MASK [7:0] $end
$var parameter  8 /:   MST3_ID_MASK [7:0] $end
$var parameter 32 0:   MST0_PRIORITY  $end
$var parameter 32 1:   MST1_PRIORITY  $end
$var parameter 32 2:   MST2_PRIORITY  $end
$var parameter 32 3:   MST3_PRIORITY  $end
$var parameter 32 4:   AWCH_W  $end
$var parameter 32 5:   WCH_W  $end
$var parameter 32 6:   BCH_W  $end
$var parameter 32 7:   ARCH_W  $end
$var parameter 32 8:   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 9:   i_awvalid [3:0] $end
$var reg       4 ::   i_awready [3:0] $end
$var wire     108 ;:   i_awch [107:0] $end
$var wire      4 <:   i_wvalid [3:0] $end
$var reg       4 =:   i_wready [3:0] $end
$var wire      4 >:   i_wlast [3:0] $end
$var wire     180 ?:   i_wch [179:0] $end
$var reg       4 @:   i_bvalid [3:0] $end
$var wire      4 A:   i_bready [3:0] $end
$var reg      10 B:   i_bch [9:0] $end
$var wire      4 C:   i_arvalid [3:0] $end
$var reg       4 D:   i_arready [3:0] $end
$var wire     108 E:   i_arch [107:0] $end
$var reg       4 F:   i_rvalid [3:0] $end
$var wire      4 G:   i_rready [3:0] $end
$var reg       4 H:   i_rlast [3:0] $end
$var reg      50 I:   i_rch [49:0] $end
$var reg       1 J:   o_awvalid  $end
$var wire      1 K:   o_awready  $end
$var reg      27 L:   o_awch [26:0] $end
$var reg       1 M:   o_wvalid  $end
$var wire      1 N:   o_wready  $end
$var reg       1 O:   o_wlast  $end
$var reg      45 P:   o_wch [44:0] $end
$var wire      1 Q:   o_bvalid  $end
$var reg       1 R:   o_bready  $end
$var wire     10 S:   o_bch [9:0] $end
$var reg       1 T:   o_arvalid  $end
$var wire      1 U:   o_arready  $end
$var reg      27 V:   o_arch [26:0] $end
$var wire      1 W:   o_rvalid  $end
$var reg       1 X:   o_rready  $end
$var wire      1 Y:   o_rlast  $end
$var wire     50 Z:   o_rch [49:0] $end
$var reg       1 [:   awch_en  $end
$var reg       4 \:   awch_req [3:0] $end
$var reg       4 ]:   awch_grant [3:0] $end
$var reg       4 ^:   wch_grant [3:0] $end
$var reg       1 _:   arch_en  $end
$var reg       4 `:   arch_req [3:0] $end
$var reg       4 a:   arch_grant [3:0] $end
$var reg       1 b:   mst0_bch_targeted  $end
$var reg       1 c:   mst1_bch_targeted  $end
$var reg       1 d:   mst2_bch_targeted  $end
$var reg       1 e:   mst3_bch_targeted  $end
$var reg       1 f:   mst0_rch_targeted  $end
$var reg       1 g:   mst1_rch_targeted  $end
$var reg       1 h:   mst2_rch_targeted  $end
$var reg       1 i:   mst3_rch_targeted  $end
$var reg       1 j:   wch_full  $end
$var reg       1 k:   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 l:   REQ_NB  $end
$var parameter 32 m:   REQ0_PRIORITY  $end
$var parameter 32 n:   REQ1_PRIORITY  $end
$var parameter 32 o:   REQ2_PRIORITY  $end
$var parameter 32 p:   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 q:   en  $end
$var wire      4 r:   req [3:0] $end
$var reg       4 s:   grant [3:0] $end
$var reg       1 t:   p0_active  $end
$var reg       1 u:   p1_active  $end
$var reg       1 v:   p2_active  $end
$var reg       1 w:   p3_active  $end
$var reg       4 x:   req_p0 [3:0] $end
$var reg       4 y:   req_p1 [3:0] $end
$var reg       4 z:   req_p2 [3:0] $end
$var reg       4 {:   req_p3 [3:0] $end
$var reg       4 |:   grant_p0 [3:0] $end
$var reg       4 }:   grant_p1 [3:0] $end
$var reg       4 ~:   grant_p2 [3:0] $end
$var reg       4 !;   grant_p3 [3:0] $end
$var reg       1 ";   p0  $end
$var reg       1 #;   p1  $end
$var reg       1 $;   p2  $end
$var reg       1 %;   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 &;   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ';   en  $end
$var wire      4 (;   req [3:0] $end
$var reg       4 );   grant [3:0] $end
$var reg       4 *;   mask [3:0] $end
$var reg       4 +;   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 ,;   PASS_THRU  $end
$var parameter 32 -;   ADDR_WIDTH  $end
$var parameter 32 .;   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 /;   data_in [3:0] $end
$var wire      1 0;   push  $end
$var reg       1 1;   full  $end
$var reg       4 2;   data_out [3:0] $end
$var wire      1 3;   pull  $end
$var reg       1 4;   empty  $end
$var reg       1 5;   wr_en  $end
$var reg       9 6;   wrptr [8:0] $end
$var reg       9 7;   rdptr [8:0] $end
$var reg       1 8;   empty_flag  $end
$var reg       1 9;   full_flag  $end
$var reg       1 :;   pass_thru  $end
$var reg       4 ;;   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 <;   ADDR_WIDTH  $end
$var parameter 32 =;   DATA_WIDTH  $end
$var parameter 32 >;   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 ?;   wr_en  $end
$var wire      8 @;   addr_in [7:0] $end
$var wire      4 /;   data_in [3:0] $end
$var wire      8 A;   addr_out [7:0] $end
$var reg       4 B;   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 C;   REQ_NB  $end
$var parameter 32 D;   REQ0_PRIORITY  $end
$var parameter 32 E;   REQ1_PRIORITY  $end
$var parameter 32 F;   REQ2_PRIORITY  $end
$var parameter 32 G;   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 H;   en  $end
$var wire      4 I;   req [3:0] $end
$var reg       4 J;   grant [3:0] $end
$var reg       1 K;   p0_active  $end
$var reg       1 L;   p1_active  $end
$var reg       1 M;   p2_active  $end
$var reg       1 N;   p3_active  $end
$var reg       4 O;   req_p0 [3:0] $end
$var reg       4 P;   req_p1 [3:0] $end
$var reg       4 Q;   req_p2 [3:0] $end
$var reg       4 R;   req_p3 [3:0] $end
$var reg       4 S;   grant_p0 [3:0] $end
$var reg       4 T;   grant_p1 [3:0] $end
$var reg       4 U;   grant_p2 [3:0] $end
$var reg       4 V;   grant_p3 [3:0] $end
$var reg       1 W;   p0  $end
$var reg       1 X;   p1  $end
$var reg       1 Y;   p2  $end
$var reg       1 Z;   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 [;   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 \;   en  $end
$var wire      4 ];   req [3:0] $end
$var reg       4 ^;   grant [3:0] $end
$var reg       4 _;   mask [3:0] $end
$var reg       4 `;   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 a;   DATA_BUS_W  $end
$var parameter 32 b;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 c;   i_valid  $end
$var reg       1 d;   i_ready  $end
$var wire     27 e;   i_data [26:0] $end
$var reg       1 f;   o_valid  $end
$var wire      1 O-   o_ready  $end
$var reg      27 g;   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 h;   DATA_BUS_W  $end
$var parameter 32 i;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 j;   i_valid  $end
$var reg       1 k;   i_ready  $end
$var wire     46 l;   i_data [45:0] $end
$var reg       1 m;   o_valid  $end
$var wire      1 U-   o_ready  $end
$var reg      46 n;   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 o;   DATA_BUS_W  $end
$var parameter 32 p;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 [-   i_valid  $end
$var reg       1 q;   i_ready  $end
$var wire     10 r;   i_data [9:0] $end
$var reg       1 s;   o_valid  $end
$var wire      1 t;   o_ready  $end
$var reg      10 u;   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 v;   DATA_BUS_W  $end
$var parameter 32 w;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 x;   i_valid  $end
$var reg       1 y;   i_ready  $end
$var wire     27 z;   i_data [26:0] $end
$var reg       1 {;   o_valid  $end
$var wire      1 b-   o_ready  $end
$var reg      27 |;   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 };   DATA_BUS_W  $end
$var parameter 32 ~;   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 g-   i_valid  $end
$var reg       1 !<   i_ready  $end
$var wire     51 "<   i_data [50:0] $end
$var reg       1 #<   o_valid  $end
$var wire      1 $<   o_ready  $end
$var reg      51 %<   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[1] $end
$var parameter 32 &<   i [31:0] $end
$var reg       1 '<   pipe_awvalid  $end
$var reg       1 (<   pipe_awready  $end
$var reg      27 )<   pipe_awch [26:0] $end
$var reg       1 *<   pipe_wvalid  $end
$var reg       1 +<   pipe_wready  $end
$var reg       1 ,<   pipe_wlast  $end
$var reg      45 -<   pipe_wch [44:0] $end
$var reg       1 .<   pipe_bvalid  $end
$var reg       1 /<   pipe_bready  $end
$var reg      10 0<   pipe_bch [9:0] $end
$var reg       1 1<   pipe_arvalid  $end
$var reg       1 2<   pipe_arready  $end
$var reg      27 3<   pipe_arch [26:0] $end
$var reg       1 4<   pipe_rvalid  $end
$var reg       1 5<   pipe_rready  $end
$var reg       1 6<   pipe_rlast  $end
$var reg      50 7<   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 8<   AXI_ID_W  $end
$var parameter 32 9<   AXI_DATA_W  $end
$var parameter 32 :<   MST_NB  $end
$var parameter 32 ;<   TIMEOUT_ENABLE  $end
$var parameter  8 <<   MST0_ID_MASK [7:0] $end
$var parameter  8 =<   MST1_ID_MASK [7:0] $end
$var parameter  8 ><   MST2_ID_MASK [7:0] $end
$var parameter  8 ?<   MST3_ID_MASK [7:0] $end
$var parameter 32 @<   MST0_PRIORITY  $end
$var parameter 32 A<   MST1_PRIORITY  $end
$var parameter 32 B<   MST2_PRIORITY  $end
$var parameter 32 C<   MST3_PRIORITY  $end
$var parameter 32 D<   AWCH_W  $end
$var parameter 32 E<   WCH_W  $end
$var parameter 32 F<   BCH_W  $end
$var parameter 32 G<   ARCH_W  $end
$var parameter 32 H<   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 I<   i_awvalid [3:0] $end
$var reg       4 J<   i_awready [3:0] $end
$var wire     108 K<   i_awch [107:0] $end
$var wire      4 L<   i_wvalid [3:0] $end
$var reg       4 M<   i_wready [3:0] $end
$var wire      4 N<   i_wlast [3:0] $end
$var wire     180 O<   i_wch [179:0] $end
$var reg       4 P<   i_bvalid [3:0] $end
$var wire      4 Q<   i_bready [3:0] $end
$var reg      10 R<   i_bch [9:0] $end
$var wire      4 S<   i_arvalid [3:0] $end
$var reg       4 T<   i_arready [3:0] $end
$var wire     108 U<   i_arch [107:0] $end
$var reg       4 V<   i_rvalid [3:0] $end
$var wire      4 W<   i_rready [3:0] $end
$var reg       4 X<   i_rlast [3:0] $end
$var reg      50 Y<   i_rch [49:0] $end
$var reg       1 Z<   o_awvalid  $end
$var wire      1 [<   o_awready  $end
$var reg      27 \<   o_awch [26:0] $end
$var reg       1 ]<   o_wvalid  $end
$var wire      1 ^<   o_wready  $end
$var reg       1 _<   o_wlast  $end
$var reg      45 `<   o_wch [44:0] $end
$var wire      1 a<   o_bvalid  $end
$var reg       1 b<   o_bready  $end
$var wire     10 c<   o_bch [9:0] $end
$var reg       1 d<   o_arvalid  $end
$var wire      1 e<   o_arready  $end
$var reg      27 f<   o_arch [26:0] $end
$var wire      1 g<   o_rvalid  $end
$var reg       1 h<   o_rready  $end
$var wire      1 i<   o_rlast  $end
$var wire     50 j<   o_rch [49:0] $end
$var reg       1 k<   awch_en  $end
$var reg       4 l<   awch_req [3:0] $end
$var reg       4 m<   awch_grant [3:0] $end
$var reg       4 n<   wch_grant [3:0] $end
$var reg       1 o<   arch_en  $end
$var reg       4 p<   arch_req [3:0] $end
$var reg       4 q<   arch_grant [3:0] $end
$var reg       1 r<   mst0_bch_targeted  $end
$var reg       1 s<   mst1_bch_targeted  $end
$var reg       1 t<   mst2_bch_targeted  $end
$var reg       1 u<   mst3_bch_targeted  $end
$var reg       1 v<   mst0_rch_targeted  $end
$var reg       1 w<   mst1_rch_targeted  $end
$var reg       1 x<   mst2_rch_targeted  $end
$var reg       1 y<   mst3_rch_targeted  $end
$var reg       1 z<   wch_full  $end
$var reg       1 {<   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 |<   REQ_NB  $end
$var parameter 32 }<   REQ0_PRIORITY  $end
$var parameter 32 ~<   REQ1_PRIORITY  $end
$var parameter 32 !=   REQ2_PRIORITY  $end
$var parameter 32 "=   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 #=   en  $end
$var wire      4 $=   req [3:0] $end
$var reg       4 %=   grant [3:0] $end
$var reg       1 &=   p0_active  $end
$var reg       1 '=   p1_active  $end
$var reg       1 (=   p2_active  $end
$var reg       1 )=   p3_active  $end
$var reg       4 *=   req_p0 [3:0] $end
$var reg       4 +=   req_p1 [3:0] $end
$var reg       4 ,=   req_p2 [3:0] $end
$var reg       4 -=   req_p3 [3:0] $end
$var reg       4 .=   grant_p0 [3:0] $end
$var reg       4 /=   grant_p1 [3:0] $end
$var reg       4 0=   grant_p2 [3:0] $end
$var reg       4 1=   grant_p3 [3:0] $end
$var reg       1 2=   p0  $end
$var reg       1 3=   p1  $end
$var reg       1 4=   p2  $end
$var reg       1 5=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 6=   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 7=   en  $end
$var wire      4 8=   req [3:0] $end
$var reg       4 9=   grant [3:0] $end
$var reg       4 :=   mask [3:0] $end
$var reg       4 ;=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 <=   PASS_THRU  $end
$var parameter 32 ==   ADDR_WIDTH  $end
$var parameter 32 >=   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 ?=   data_in [3:0] $end
$var wire      1 @=   push  $end
$var reg       1 A=   full  $end
$var reg       4 B=   data_out [3:0] $end
$var wire      1 C=   pull  $end
$var reg       1 D=   empty  $end
$var reg       1 E=   wr_en  $end
$var reg       9 F=   wrptr [8:0] $end
$var reg       9 G=   rdptr [8:0] $end
$var reg       1 H=   empty_flag  $end
$var reg       1 I=   full_flag  $end
$var reg       1 J=   pass_thru  $end
$var reg       4 K=   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 L=   ADDR_WIDTH  $end
$var parameter 32 M=   DATA_WIDTH  $end
$var parameter 32 N=   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 O=   wr_en  $end
$var wire      8 P=   addr_in [7:0] $end
$var wire      4 ?=   data_in [3:0] $end
$var wire      8 Q=   addr_out [7:0] $end
$var reg       4 R=   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 S=   REQ_NB  $end
$var parameter 32 T=   REQ0_PRIORITY  $end
$var parameter 32 U=   REQ1_PRIORITY  $end
$var parameter 32 V=   REQ2_PRIORITY  $end
$var parameter 32 W=   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 X=   en  $end
$var wire      4 Y=   req [3:0] $end
$var reg       4 Z=   grant [3:0] $end
$var reg       1 [=   p0_active  $end
$var reg       1 \=   p1_active  $end
$var reg       1 ]=   p2_active  $end
$var reg       1 ^=   p3_active  $end
$var reg       4 _=   req_p0 [3:0] $end
$var reg       4 `=   req_p1 [3:0] $end
$var reg       4 a=   req_p2 [3:0] $end
$var reg       4 b=   req_p3 [3:0] $end
$var reg       4 c=   grant_p0 [3:0] $end
$var reg       4 d=   grant_p1 [3:0] $end
$var reg       4 e=   grant_p2 [3:0] $end
$var reg       4 f=   grant_p3 [3:0] $end
$var reg       1 g=   p0  $end
$var reg       1 h=   p1  $end
$var reg       1 i=   p2  $end
$var reg       1 j=   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 k=   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 l=   en  $end
$var wire      4 m=   req [3:0] $end
$var reg       4 n=   grant [3:0] $end
$var reg       4 o=   mask [3:0] $end
$var reg       4 p=   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 q=   DATA_BUS_W  $end
$var parameter 32 r=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 s=   i_valid  $end
$var reg       1 t=   i_ready  $end
$var wire     27 u=   i_data [26:0] $end
$var reg       1 v=   o_valid  $end
$var wire      1 N-   o_ready  $end
$var reg      27 w=   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 x=   DATA_BUS_W  $end
$var parameter 32 y=   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 z=   i_valid  $end
$var reg       1 {=   i_ready  $end
$var wire     46 |=   i_data [45:0] $end
$var reg       1 }=   o_valid  $end
$var wire      1 T-   o_ready  $end
$var reg      46 ~=   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 !>   DATA_BUS_W  $end
$var parameter 32 ">   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Z-   i_valid  $end
$var reg       1 #>   i_ready  $end
$var wire     10 $>   i_data [9:0] $end
$var reg       1 %>   o_valid  $end
$var wire      1 &>   o_ready  $end
$var reg      10 '>   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 (>   DATA_BUS_W  $end
$var parameter 32 )>   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 *>   i_valid  $end
$var reg       1 +>   i_ready  $end
$var wire     27 ,>   i_data [26:0] $end
$var reg       1 ->   o_valid  $end
$var wire      1 a-   o_ready  $end
$var reg      27 .>   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 />   DATA_BUS_W  $end
$var parameter 32 0>   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 f-   i_valid  $end
$var reg       1 1>   i_ready  $end
$var wire     51 2>   i_data [50:0] $end
$var reg       1 3>   o_valid  $end
$var wire      1 4>   o_ready  $end
$var reg      51 5>   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[2] $end
$var parameter 32 6>   i [31:0] $end
$var reg       1 7>   pipe_awvalid  $end
$var reg       1 8>   pipe_awready  $end
$var reg      27 9>   pipe_awch [26:0] $end
$var reg       1 :>   pipe_wvalid  $end
$var reg       1 ;>   pipe_wready  $end
$var reg       1 <>   pipe_wlast  $end
$var reg      45 =>   pipe_wch [44:0] $end
$var reg       1 >>   pipe_bvalid  $end
$var reg       1 ?>   pipe_bready  $end
$var reg      10 @>   pipe_bch [9:0] $end
$var reg       1 A>   pipe_arvalid  $end
$var reg       1 B>   pipe_arready  $end
$var reg      27 C>   pipe_arch [26:0] $end
$var reg       1 D>   pipe_rvalid  $end
$var reg       1 E>   pipe_rready  $end
$var reg       1 F>   pipe_rlast  $end
$var reg      50 G>   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 H>   AXI_ID_W  $end
$var parameter 32 I>   AXI_DATA_W  $end
$var parameter 32 J>   MST_NB  $end
$var parameter 32 K>   TIMEOUT_ENABLE  $end
$var parameter  8 L>   MST0_ID_MASK [7:0] $end
$var parameter  8 M>   MST1_ID_MASK [7:0] $end
$var parameter  8 N>   MST2_ID_MASK [7:0] $end
$var parameter  8 O>   MST3_ID_MASK [7:0] $end
$var parameter 32 P>   MST0_PRIORITY  $end
$var parameter 32 Q>   MST1_PRIORITY  $end
$var parameter 32 R>   MST2_PRIORITY  $end
$var parameter 32 S>   MST3_PRIORITY  $end
$var parameter 32 T>   AWCH_W  $end
$var parameter 32 U>   WCH_W  $end
$var parameter 32 V>   BCH_W  $end
$var parameter 32 W>   ARCH_W  $end
$var parameter 32 X>   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 Y>   i_awvalid [3:0] $end
$var reg       4 Z>   i_awready [3:0] $end
$var wire     108 [>   i_awch [107:0] $end
$var wire      4 \>   i_wvalid [3:0] $end
$var reg       4 ]>   i_wready [3:0] $end
$var wire      4 ^>   i_wlast [3:0] $end
$var wire     180 _>   i_wch [179:0] $end
$var reg       4 `>   i_bvalid [3:0] $end
$var wire      4 a>   i_bready [3:0] $end
$var reg      10 b>   i_bch [9:0] $end
$var wire      4 c>   i_arvalid [3:0] $end
$var reg       4 d>   i_arready [3:0] $end
$var wire     108 e>   i_arch [107:0] $end
$var reg       4 f>   i_rvalid [3:0] $end
$var wire      4 g>   i_rready [3:0] $end
$var reg       4 h>   i_rlast [3:0] $end
$var reg      50 i>   i_rch [49:0] $end
$var reg       1 j>   o_awvalid  $end
$var wire      1 k>   o_awready  $end
$var reg      27 l>   o_awch [26:0] $end
$var reg       1 m>   o_wvalid  $end
$var wire      1 n>   o_wready  $end
$var reg       1 o>   o_wlast  $end
$var reg      45 p>   o_wch [44:0] $end
$var wire      1 q>   o_bvalid  $end
$var reg       1 r>   o_bready  $end
$var wire     10 s>   o_bch [9:0] $end
$var reg       1 t>   o_arvalid  $end
$var wire      1 u>   o_arready  $end
$var reg      27 v>   o_arch [26:0] $end
$var wire      1 w>   o_rvalid  $end
$var reg       1 x>   o_rready  $end
$var wire      1 y>   o_rlast  $end
$var wire     50 z>   o_rch [49:0] $end
$var reg       1 {>   awch_en  $end
$var reg       4 |>   awch_req [3:0] $end
$var reg       4 }>   awch_grant [3:0] $end
$var reg       4 ~>   wch_grant [3:0] $end
$var reg       1 !?   arch_en  $end
$var reg       4 "?   arch_req [3:0] $end
$var reg       4 #?   arch_grant [3:0] $end
$var reg       1 $?   mst0_bch_targeted  $end
$var reg       1 %?   mst1_bch_targeted  $end
$var reg       1 &?   mst2_bch_targeted  $end
$var reg       1 '?   mst3_bch_targeted  $end
$var reg       1 (?   mst0_rch_targeted  $end
$var reg       1 )?   mst1_rch_targeted  $end
$var reg       1 *?   mst2_rch_targeted  $end
$var reg       1 +?   mst3_rch_targeted  $end
$var reg       1 ,?   wch_full  $end
$var reg       1 -?   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 .?   REQ_NB  $end
$var parameter 32 /?   REQ0_PRIORITY  $end
$var parameter 32 0?   REQ1_PRIORITY  $end
$var parameter 32 1?   REQ2_PRIORITY  $end
$var parameter 32 2?   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 3?   en  $end
$var wire      4 4?   req [3:0] $end
$var reg       4 5?   grant [3:0] $end
$var reg       1 6?   p0_active  $end
$var reg       1 7?   p1_active  $end
$var reg       1 8?   p2_active  $end
$var reg       1 9?   p3_active  $end
$var reg       4 :?   req_p0 [3:0] $end
$var reg       4 ;?   req_p1 [3:0] $end
$var reg       4 <?   req_p2 [3:0] $end
$var reg       4 =?   req_p3 [3:0] $end
$var reg       4 >?   grant_p0 [3:0] $end
$var reg       4 ??   grant_p1 [3:0] $end
$var reg       4 @?   grant_p2 [3:0] $end
$var reg       4 A?   grant_p3 [3:0] $end
$var reg       1 B?   p0  $end
$var reg       1 C?   p1  $end
$var reg       1 D?   p2  $end
$var reg       1 E?   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 F?   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 G?   en  $end
$var wire      4 H?   req [3:0] $end
$var reg       4 I?   grant [3:0] $end
$var reg       4 J?   mask [3:0] $end
$var reg       4 K?   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 L?   PASS_THRU  $end
$var parameter 32 M?   ADDR_WIDTH  $end
$var parameter 32 N?   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 O?   data_in [3:0] $end
$var wire      1 P?   push  $end
$var reg       1 Q?   full  $end
$var reg       4 R?   data_out [3:0] $end
$var wire      1 S?   pull  $end
$var reg       1 T?   empty  $end
$var reg       1 U?   wr_en  $end
$var reg       9 V?   wrptr [8:0] $end
$var reg       9 W?   rdptr [8:0] $end
$var reg       1 X?   empty_flag  $end
$var reg       1 Y?   full_flag  $end
$var reg       1 Z?   pass_thru  $end
$var reg       4 [?   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 \?   ADDR_WIDTH  $end
$var parameter 32 ]?   DATA_WIDTH  $end
$var parameter 32 ^?   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 _?   wr_en  $end
$var wire      8 `?   addr_in [7:0] $end
$var wire      4 O?   data_in [3:0] $end
$var wire      8 a?   addr_out [7:0] $end
$var reg       4 b?   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 c?   REQ_NB  $end
$var parameter 32 d?   REQ0_PRIORITY  $end
$var parameter 32 e?   REQ1_PRIORITY  $end
$var parameter 32 f?   REQ2_PRIORITY  $end
$var parameter 32 g?   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 h?   en  $end
$var wire      4 i?   req [3:0] $end
$var reg       4 j?   grant [3:0] $end
$var reg       1 k?   p0_active  $end
$var reg       1 l?   p1_active  $end
$var reg       1 m?   p2_active  $end
$var reg       1 n?   p3_active  $end
$var reg       4 o?   req_p0 [3:0] $end
$var reg       4 p?   req_p1 [3:0] $end
$var reg       4 q?   req_p2 [3:0] $end
$var reg       4 r?   req_p3 [3:0] $end
$var reg       4 s?   grant_p0 [3:0] $end
$var reg       4 t?   grant_p1 [3:0] $end
$var reg       4 u?   grant_p2 [3:0] $end
$var reg       4 v?   grant_p3 [3:0] $end
$var reg       1 w?   p0  $end
$var reg       1 x?   p1  $end
$var reg       1 y?   p2  $end
$var reg       1 z?   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 {?   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 |?   en  $end
$var wire      4 }?   req [3:0] $end
$var reg       4 ~?   grant [3:0] $end
$var reg       4 !@   mask [3:0] $end
$var reg       4 "@   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 #@   DATA_BUS_W  $end
$var parameter 32 $@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 %@   i_valid  $end
$var reg       1 &@   i_ready  $end
$var wire     27 '@   i_data [26:0] $end
$var reg       1 (@   o_valid  $end
$var wire      1 M-   o_ready  $end
$var reg      27 )@   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 *@   DATA_BUS_W  $end
$var parameter 32 +@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 ,@   i_valid  $end
$var reg       1 -@   i_ready  $end
$var wire     46 .@   i_data [45:0] $end
$var reg       1 /@   o_valid  $end
$var wire      1 S-   o_ready  $end
$var reg      46 0@   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 1@   DATA_BUS_W  $end
$var parameter 32 2@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 Y-   i_valid  $end
$var reg       1 3@   i_ready  $end
$var wire     10 4@   i_data [9:0] $end
$var reg       1 5@   o_valid  $end
$var wire      1 6@   o_ready  $end
$var reg      10 7@   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 8@   DATA_BUS_W  $end
$var parameter 32 9@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 :@   i_valid  $end
$var reg       1 ;@   i_ready  $end
$var wire     27 <@   i_data [26:0] $end
$var reg       1 =@   o_valid  $end
$var wire      1 `-   o_ready  $end
$var reg      27 >@   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 ?@   DATA_BUS_W  $end
$var parameter 32 @@   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 e-   i_valid  $end
$var reg       1 A@   i_ready  $end
$var wire     51 B@   i_data [50:0] $end
$var reg       1 C@   o_valid  $end
$var wire      1 D@   o_ready  $end
$var reg      51 E@   o_data [50:0] $end
$upscope $end

$upscope $end


$scope begin MST_SWITCHS_GEN[3] $end
$var parameter 32 F@   i [31:0] $end
$var reg       1 G@   pipe_awvalid  $end
$var reg       1 H@   pipe_awready  $end
$var reg      27 I@   pipe_awch [26:0] $end
$var reg       1 J@   pipe_wvalid  $end
$var reg       1 K@   pipe_wready  $end
$var reg       1 L@   pipe_wlast  $end
$var reg      45 M@   pipe_wch [44:0] $end
$var reg       1 N@   pipe_bvalid  $end
$var reg       1 O@   pipe_bready  $end
$var reg      10 P@   pipe_bch [9:0] $end
$var reg       1 Q@   pipe_arvalid  $end
$var reg       1 R@   pipe_arready  $end
$var reg      27 S@   pipe_arch [26:0] $end
$var reg       1 T@   pipe_rvalid  $end
$var reg       1 U@   pipe_rready  $end
$var reg       1 V@   pipe_rlast  $end
$var reg      50 W@   pipe_rch [49:0] $end

$scope module mst_switch $end
$var parameter 32 X@   AXI_ID_W  $end
$var parameter 32 Y@   AXI_DATA_W  $end
$var parameter 32 Z@   MST_NB  $end
$var parameter 32 [@   TIMEOUT_ENABLE  $end
$var parameter  8 \@   MST0_ID_MASK [7:0] $end
$var parameter  8 ]@   MST1_ID_MASK [7:0] $end
$var parameter  8 ^@   MST2_ID_MASK [7:0] $end
$var parameter  8 _@   MST3_ID_MASK [7:0] $end
$var parameter 32 `@   MST0_PRIORITY  $end
$var parameter 32 a@   MST1_PRIORITY  $end
$var parameter 32 b@   MST2_PRIORITY  $end
$var parameter 32 c@   MST3_PRIORITY  $end
$var parameter 32 d@   AWCH_W  $end
$var parameter 32 e@   WCH_W  $end
$var parameter 32 f@   BCH_W  $end
$var parameter 32 g@   ARCH_W  $end
$var parameter 32 h@   RCH_W  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      4 i@   i_awvalid [3:0] $end
$var reg       4 j@   i_awready [3:0] $end
$var wire     108 k@   i_awch [107:0] $end
$var wire      4 l@   i_wvalid [3:0] $end
$var reg       4 m@   i_wready [3:0] $end
$var wire      4 n@   i_wlast [3:0] $end
$var wire     180 o@   i_wch [179:0] $end
$var reg       4 p@   i_bvalid [3:0] $end
$var wire      4 q@   i_bready [3:0] $end
$var reg      10 r@   i_bch [9:0] $end
$var wire      4 s@   i_arvalid [3:0] $end
$var reg       4 t@   i_arready [3:0] $end
$var wire     108 u@   i_arch [107:0] $end
$var reg       4 v@   i_rvalid [3:0] $end
$var wire      4 w@   i_rready [3:0] $end
$var reg       4 x@   i_rlast [3:0] $end
$var reg      50 y@   i_rch [49:0] $end
$var reg       1 z@   o_awvalid  $end
$var wire      1 {@   o_awready  $end
$var reg      27 |@   o_awch [26:0] $end
$var reg       1 }@   o_wvalid  $end
$var wire      1 ~@   o_wready  $end
$var reg       1 !A   o_wlast  $end
$var reg      45 "A   o_wch [44:0] $end
$var wire      1 #A   o_bvalid  $end
$var reg       1 $A   o_bready  $end
$var wire     10 %A   o_bch [9:0] $end
$var reg       1 &A   o_arvalid  $end
$var wire      1 'A   o_arready  $end
$var reg      27 (A   o_arch [26:0] $end
$var wire      1 )A   o_rvalid  $end
$var reg       1 *A   o_rready  $end
$var wire      1 +A   o_rlast  $end
$var wire     50 ,A   o_rch [49:0] $end
$var reg       1 -A   awch_en  $end
$var reg       4 .A   awch_req [3:0] $end
$var reg       4 /A   awch_grant [3:0] $end
$var reg       4 0A   wch_grant [3:0] $end
$var reg       1 1A   arch_en  $end
$var reg       4 2A   arch_req [3:0] $end
$var reg       4 3A   arch_grant [3:0] $end
$var reg       1 4A   mst0_bch_targeted  $end
$var reg       1 5A   mst1_bch_targeted  $end
$var reg       1 6A   mst2_bch_targeted  $end
$var reg       1 7A   mst3_bch_targeted  $end
$var reg       1 8A   mst0_rch_targeted  $end
$var reg       1 9A   mst1_rch_targeted  $end
$var reg       1 :A   mst2_rch_targeted  $end
$var reg       1 ;A   mst3_rch_targeted  $end
$var reg       1 <A   wch_full  $end
$var reg       1 =A   wch_empty  $end

$scope module awch_round_robin $end
$var parameter 32 >A   REQ_NB  $end
$var parameter 32 ?A   REQ0_PRIORITY  $end
$var parameter 32 @A   REQ1_PRIORITY  $end
$var parameter 32 AA   REQ2_PRIORITY  $end
$var parameter 32 BA   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 CA   en  $end
$var wire      4 DA   req [3:0] $end
$var reg       4 EA   grant [3:0] $end
$var reg       1 FA   p0_active  $end
$var reg       1 GA   p1_active  $end
$var reg       1 HA   p2_active  $end
$var reg       1 IA   p3_active  $end
$var reg       4 JA   req_p0 [3:0] $end
$var reg       4 KA   req_p1 [3:0] $end
$var reg       4 LA   req_p2 [3:0] $end
$var reg       4 MA   req_p3 [3:0] $end
$var reg       4 NA   grant_p0 [3:0] $end
$var reg       4 OA   grant_p1 [3:0] $end
$var reg       4 PA   grant_p2 [3:0] $end
$var reg       4 QA   grant_p3 [3:0] $end
$var reg       1 RA   p0  $end
$var reg       1 SA   p1  $end
$var reg       1 TA   p2  $end
$var reg       1 UA   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 VA   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 WA   en  $end
$var wire      4 XA   req [3:0] $end
$var reg       4 YA   grant [3:0] $end
$var reg       4 ZA   mask [3:0] $end
$var reg       4 [A   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module wch_gnt_fifo $end
$var parameter 32 \A   PASS_THRU  $end
$var parameter 32 ]A   ADDR_WIDTH  $end
$var parameter 32 ^A   DATA_WIDTH  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 w%   flush  $end
$var wire      4 _A   data_in [3:0] $end
$var wire      1 `A   push  $end
$var reg       1 aA   full  $end
$var reg       4 bA   data_out [3:0] $end
$var wire      1 cA   pull  $end
$var reg       1 dA   empty  $end
$var reg       1 eA   wr_en  $end
$var reg       9 fA   wrptr [8:0] $end
$var reg       9 gA   rdptr [8:0] $end
$var reg       1 hA   empty_flag  $end
$var reg       1 iA   full_flag  $end
$var reg       1 jA   pass_thru  $end
$var reg       4 kA   data_fifo [3:0] $end

$scope module fifo_ram $end
$var parameter 32 lA   ADDR_WIDTH  $end
$var parameter 32 mA   DATA_WIDTH  $end
$var parameter 32 nA   FFD_EN  $end
$var wire      1 `    aclk  $end
$var wire      1 oA   wr_en  $end
$var wire      8 pA   addr_in [7:0] $end
$var wire      4 _A   data_in [3:0] $end
$var wire      8 qA   addr_out [7:0] $end
$var reg       4 rA   data_out [3:0] $end
$upscope $end

$upscope $end


$scope module arch_round_robin $end
$var parameter 32 sA   REQ_NB  $end
$var parameter 32 tA   REQ0_PRIORITY  $end
$var parameter 32 uA   REQ1_PRIORITY  $end
$var parameter 32 vA   REQ2_PRIORITY  $end
$var parameter 32 wA   REQ3_PRIORITY  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 xA   en  $end
$var wire      4 yA   req [3:0] $end
$var reg       4 zA   grant [3:0] $end
$var reg       1 {A   p0_active  $end
$var reg       1 |A   p1_active  $end
$var reg       1 }A   p2_active  $end
$var reg       1 ~A   p3_active  $end
$var reg       4 !B   req_p0 [3:0] $end
$var reg       4 "B   req_p1 [3:0] $end
$var reg       4 #B   req_p2 [3:0] $end
$var reg       4 $B   req_p3 [3:0] $end
$var reg       4 %B   grant_p0 [3:0] $end
$var reg       4 &B   grant_p1 [3:0] $end
$var reg       4 'B   grant_p2 [3:0] $end
$var reg       4 (B   grant_p3 [3:0] $end
$var reg       1 )B   p0  $end
$var reg       1 *B   p1  $end
$var reg       1 +B   p2  $end
$var reg       1 ,B   p3  $end

$scope begin P0_ON $end

$scope module rr_p0 $end
$var parameter 32 -B   REQ_NB  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 .B   en  $end
$var wire      4 /B   req [3:0] $end
$var reg       4 0B   grant [3:0] $end
$var reg       4 1B   mask [3:0] $end
$var reg       4 2B   masked [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module awch_mst_pipe $end
$var parameter 32 3B   DATA_BUS_W  $end
$var parameter 32 4B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 5B   i_valid  $end
$var reg       1 6B   i_ready  $end
$var wire     27 7B   i_data [26:0] $end
$var reg       1 8B   o_valid  $end
$var wire      1 L-   o_ready  $end
$var reg      27 9B   o_data [26:0] $end
$upscope $end


$scope module wch_mst_pipe $end
$var parameter 32 :B   DATA_BUS_W  $end
$var parameter 32 ;B   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 <B   i_valid  $end
$var reg       1 =B   i_ready  $end
$var wire     46 >B   i_data [45:0] $end
$var reg       1 ?B   o_valid  $end
$var wire      1 R-   o_ready  $end
$var reg      46 @B   o_data [45:0] $end
$upscope $end


$scope module bch_mst_pipe $end
$var parameter 32 AB   DATA_BUS_W  $end
$var parameter 32 BB   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 X-   i_valid  $end
$var reg       1 CB   i_ready  $end
$var wire     10 DB   i_data [9:0] $end
$var reg       1 EB   o_valid  $end
$var wire      1 FB   o_ready  $end
$var reg      10 GB   o_data [9:0] $end
$upscope $end


$scope module arch_mst_pipe $end
$var parameter 32 HB   DATA_BUS_W  $end
$var parameter 32 IB   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 JB   i_valid  $end
$var reg       1 KB   i_ready  $end
$var wire     27 LB   i_data [26:0] $end
$var reg       1 MB   o_valid  $end
$var wire      1 _-   o_ready  $end
$var reg      27 NB   o_data [26:0] $end
$upscope $end


$scope module rch_mst_pipe $end
$var parameter 32 OB   DATA_BUS_W  $end
$var parameter 32 PB   NB_PIPELINE  $end
$var wire      1 `    aclk  $end
$var wire      1 a    aresetn  $end
$var wire      1 b    srst  $end
$var wire      1 d-   i_valid  $end
$var reg       1 QB   i_ready  $end
$var wire     51 RB   i_data [50:0] $end
$var reg       1 SB   o_valid  $end
$var wire      1 TB   o_ready  $end
$var reg      51 UB   o_data [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module mst0_if $end
$var parameter 32 VB   AXI_ADDR_W  $end
$var parameter 32 WB   AXI_ID_W  $end
$var parameter 32 XB   AXI_DATA_W  $end
$var parameter 32 YB   STRB_MODE  $end
$var parameter 32 ZB   AXI_SIGNALING  $end
$var parameter 32 [B   KEEP_BASE_ADDR  $end
$var parameter 32 \B   BASE_ADDR  $end
$var parameter 32 ]B   SLV_CDC  $end
$var parameter 32 ^B   SLV_OSTDREQ_NUM  $end
$var parameter 32 _B   SLV_OSTDREQ_SIZE  $end
$var parameter 32 `B   USER_SUPPORT  $end
$var parameter 32 aB   AXI_AUSER_W  $end
$var parameter 32 bB   AXI_WUSER_W  $end
$var parameter 32 cB   AXI_BUSER_W  $end
$var parameter 32 dB   AXI_RUSER_W  $end
$var parameter 32 eB   AWCH_W  $end
$var parameter 32 fB   WCH_W  $end
$var parameter 32 gB   BCH_W  $end
$var parameter 32 hB   ARCH_W  $end
$var parameter 32 iB   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 jB   i_awvalid  $end
$var reg       1 kB   i_awready  $end
$var wire     27 lB   i_awch [26:0] $end
$var wire      1 mB   i_wvalid  $end
$var reg       1 nB   i_wready  $end
$var wire      1 oB   i_wlast  $end
$var wire     45 pB   i_wch [44:0] $end
$var reg       1 qB   i_bvalid  $end
$var wire      1 rB   i_bready  $end
$var reg      10 sB   i_bch [9:0] $end
$var wire      1 tB   i_arvalid  $end
$var reg       1 uB   i_arready  $end
$var wire     27 vB   i_arch [26:0] $end
$var reg       1 wB   i_rvalid  $end
$var wire      1 xB   i_rready  $end
$var reg       1 yB   i_rlast  $end
$var reg      50 zB   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 {B   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 |B   o_awaddr [15:0] $end
$var reg       8 }B   o_awlen [7:0] $end
$var reg       3 ~B   o_awsize [2:0] $end
$var reg       2 !C   o_awburst [1:0] $end
$var reg       2 "C   o_awlock [1:0] $end
$var reg       4 #C   o_awcache [3:0] $end
$var reg       3 $C   o_awprot [2:0] $end
$var reg       4 %C   o_awqos [3:0] $end
$var reg       4 &C   o_awregion [3:0] $end
$var reg       8 'C   o_awid [7:0] $end
$var reg       1 (C   o_awuser [0:0] $end
$var reg       1 )C   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 *C   o_wlast  $end
$var reg      40 +C   o_wdata [39:0] $end
$var reg       5 ,C   o_wstrb [4:0] $end
$var reg       1 -C   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 .C   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 /C   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 0C   o_araddr [15:0] $end
$var reg       8 1C   o_arlen [7:0] $end
$var reg       3 2C   o_arsize [2:0] $end
$var reg       2 3C   o_arburst [1:0] $end
$var reg       2 4C   o_arlock [1:0] $end
$var reg       4 5C   o_arcache [3:0] $end
$var reg       3 6C   o_arprot [2:0] $end
$var reg       4 7C   o_arqos [3:0] $end
$var reg       4 8C   o_arregion [3:0] $end
$var reg       8 9C   o_arid [7:0] $end
$var reg       1 :C   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 ;C   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 <C   awch [26:0] $end
$var reg      45 =C   wch [44:0] $end
$var reg      10 >C   bch [9:0] $end
$var reg      27 ?C   arch [26:0] $end
$var reg      50 @C   rch [49:0] $end
$var reg       1 AC   rlast  $end
$var reg      16 BC   awaddr [15:0] $end
$var reg      16 CC   araddr [15:0] $end
$var wire      1 DC   i_wvalid_w  $end
$var wire      1 EC   i_wdata_w [40] $end
$var wire      1 FC   i_wdata_w [39] $end
$var wire      1 GC   i_wdata_w [38] $end
$var wire      1 HC   i_wdata_w [37] $end
$var wire      1 IC   i_wdata_w [36] $end
$var wire      1 JC   i_wdata_w [35] $end
$var wire      1 KC   i_wdata_w [34] $end
$var wire      1 LC   i_wdata_w [33] $end
$var wire      1 MC   i_wdata_w [32] $end
$var wire      1 NC   i_wdata_w [31] $end
$var wire      1 OC   i_wdata_w [30] $end
$var wire      1 PC   i_wdata_w [29] $end
$var wire      1 QC   i_wdata_w [28] $end
$var wire      1 RC   i_wdata_w [27] $end
$var wire      1 SC   i_wdata_w [26] $end
$var wire      1 TC   i_wdata_w [25] $end
$var wire      1 UC   i_wdata_w [24] $end
$var wire      1 VC   i_wdata_w [23] $end
$var wire      1 WC   i_wdata_w [22] $end
$var wire      1 XC   i_wdata_w [21] $end
$var wire      1 YC   i_wdata_w [20] $end
$var wire      1 ZC   i_wdata_w [19] $end
$var wire      1 [C   i_wdata_w [18] $end
$var wire      1 \C   i_wdata_w [17] $end
$var wire      1 ]C   i_wdata_w [16] $end
$var wire      1 ^C   i_wdata_w [15] $end
$var wire      1 _C   i_wdata_w [14] $end
$var wire      1 `C   i_wdata_w [13] $end
$var wire      1 aC   i_wdata_w [12] $end
$var wire      1 bC   i_wdata_w [11] $end
$var wire      1 cC   i_wdata_w [10] $end
$var wire      1 dC   i_wdata_w [9] $end
$var wire      1 eC   i_wdata_w [8] $end
$var wire      1 fC   i_wdata_w [7] $end
$var wire      1 gC   i_wdata_w [6] $end
$var wire      1 hC   i_wdata_w [5] $end
$var wire      1 iC   i_wdata_w [4] $end
$var wire      1 jC   i_wdata_w [3] $end
$var wire      1 kC   i_wdata_w [2] $end
$var wire      1 lC   i_wdata_w [1] $end
$var wire      1 mC   i_wdata_w [0] $end
$var reg       3 nC   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 oC   PASS_THRU  $end
$var parameter 32 pC   AW_ASIZE  $end
$var parameter 32 qC   W_ASIZE  $end
$var parameter 32 rC   B_ASIZE  $end
$var parameter 32 sC   AR_ASIZE  $end
$var parameter 32 tC   R_ASIZE  $end
$var reg       1 uC   aw_full  $end
$var reg       1 vC   aw_empty  $end
$var reg       1 wC   w_full  $end
$var reg       1 xC   w_empty  $end
$var reg       1 yC   ar_full  $end
$var reg       1 zC   ar_empty  $end
$var reg       1 {C   r_full  $end
$var reg       1 |C   r_empty  $end
$var reg       1 }C   b_full  $end
$var reg       1 ~C   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 !D   PASS_THRU  $end
$var parameter 32 "D   ADDR_WIDTH  $end
$var parameter 32 #D   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 lB   data_in [26:0] $end
$var wire      1 jB   push  $end
$var reg       1 $D   full  $end
$var reg      27 %D   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 &D   empty  $end
$var reg       1 'D   wr_en  $end
$var reg       3 (D   wrptr [2:0] $end
$var reg       3 )D   rdptr [2:0] $end
$var reg       1 *D   empty_flag  $end
$var reg       1 +D   full_flag  $end
$var reg       1 ,D   pass_thru  $end
$var reg      27 -D   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 .D   ADDR_WIDTH  $end
$var parameter 32 /D   DATA_WIDTH  $end
$var parameter 32 0D   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 1D   wr_en  $end
$var wire      2 2D   addr_in [1:0] $end
$var wire     27 lB   data_in [26:0] $end
$var wire      2 3D   addr_out [1:0] $end
$var reg      27 4D   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 5D   PASS_THRU  $end
$var parameter 32 6D   ADDR_WIDTH  $end
$var parameter 32 7D   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 8D   data_in [45:0] $end
$var wire      1 DC   push  $end
$var reg       1 9D   full  $end
$var reg      46 :D   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 ;D   empty  $end
$var reg       1 <D   wr_en  $end
$var reg       3 =D   wrptr [2:0] $end
$var reg       3 >D   rdptr [2:0] $end
$var reg       1 ?D   empty_flag  $end
$var reg       1 @D   full_flag  $end
$var reg       1 AD   pass_thru  $end
$var reg      46 BD   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 CD   ADDR_WIDTH  $end
$var parameter 32 DD   DATA_WIDTH  $end
$var parameter 32 ED   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 FD   wr_en  $end
$var wire      2 GD   addr_in [1:0] $end
$var wire     46 8D   data_in [45:0] $end
$var wire      2 HD   addr_out [1:0] $end
$var reg      46 ID   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 JD   PASS_THRU  $end
$var parameter 32 KD   ADDR_WIDTH  $end
$var parameter 32 LD   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 MD   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 ND   full  $end
$var reg      10 OD   data_out [9:0] $end
$var wire      1 rB   pull  $end
$var reg       1 PD   empty  $end
$var reg       1 QD   wr_en  $end
$var reg       3 RD   wrptr [2:0] $end
$var reg       3 SD   rdptr [2:0] $end
$var reg       1 TD   empty_flag  $end
$var reg       1 UD   full_flag  $end
$var reg       1 VD   pass_thru  $end
$var reg      10 WD   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 XD   ADDR_WIDTH  $end
$var parameter 32 YD   DATA_WIDTH  $end
$var parameter 32 ZD   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 [D   wr_en  $end
$var wire      2 \D   addr_in [1:0] $end
$var wire     10 MD   data_in [9:0] $end
$var wire      2 ]D   addr_out [1:0] $end
$var reg      10 ^D   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 _D   PASS_THRU  $end
$var parameter 32 `D   ADDR_WIDTH  $end
$var parameter 32 aD   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 vB   data_in [26:0] $end
$var wire      1 tB   push  $end
$var reg       1 bD   full  $end
$var reg      27 cD   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 dD   empty  $end
$var reg       1 eD   wr_en  $end
$var reg       3 fD   wrptr [2:0] $end
$var reg       3 gD   rdptr [2:0] $end
$var reg       1 hD   empty_flag  $end
$var reg       1 iD   full_flag  $end
$var reg       1 jD   pass_thru  $end
$var reg      27 kD   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 lD   ADDR_WIDTH  $end
$var parameter 32 mD   DATA_WIDTH  $end
$var parameter 32 nD   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 oD   wr_en  $end
$var wire      2 pD   addr_in [1:0] $end
$var wire     27 vB   data_in [26:0] $end
$var wire      2 qD   addr_out [1:0] $end
$var reg      27 rD   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 sD   PASS_THRU  $end
$var parameter 32 tD   ADDR_WIDTH  $end
$var parameter 32 uD   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 vD   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 wD   full  $end
$var reg      51 xD   data_out [50:0] $end
$var wire      1 xB   pull  $end
$var reg       1 yD   empty  $end
$var reg       1 zD   wr_en  $end
$var reg       3 {D   wrptr [2:0] $end
$var reg       3 |D   rdptr [2:0] $end
$var reg       1 }D   empty_flag  $end
$var reg       1 ~D   full_flag  $end
$var reg       1 !E   pass_thru  $end
$var reg      51 "E   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 #E   ADDR_WIDTH  $end
$var parameter 32 $E   DATA_WIDTH  $end
$var parameter 32 %E   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 &E   wr_en  $end
$var wire      2 'E   addr_in [1:0] $end
$var wire     51 vD   data_in [50:0] $end
$var wire      2 (E   addr_out [1:0] $end
$var reg      51 )E   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 mB   i_wvalid  $end
$var wire      1 FC   i_wdata [39] $end
$var wire      1 GC   i_wdata [38] $end
$var wire      1 HC   i_wdata [37] $end
$var wire      1 IC   i_wdata [36] $end
$var wire      1 JC   i_wdata [35] $end
$var wire      1 KC   i_wdata [34] $end
$var wire      1 LC   i_wdata [33] $end
$var wire      1 MC   i_wdata [32] $end
$var wire      1 NC   i_wdata [31] $end
$var wire      1 OC   i_wdata [30] $end
$var wire      1 PC   i_wdata [29] $end
$var wire      1 QC   i_wdata [28] $end
$var wire      1 RC   i_wdata [27] $end
$var wire      1 SC   i_wdata [26] $end
$var wire      1 TC   i_wdata [25] $end
$var wire      1 UC   i_wdata [24] $end
$var wire      1 VC   i_wdata [23] $end
$var wire      1 WC   i_wdata [22] $end
$var wire      1 XC   i_wdata [21] $end
$var wire      1 YC   i_wdata [20] $end
$var wire      1 ZC   i_wdata [19] $end
$var wire      1 [C   i_wdata [18] $end
$var wire      1 \C   i_wdata [17] $end
$var wire      1 ]C   i_wdata [16] $end
$var wire      1 ^C   i_wdata [15] $end
$var wire      1 _C   i_wdata [14] $end
$var wire      1 `C   i_wdata [13] $end
$var wire      1 aC   i_wdata [12] $end
$var wire      1 bC   i_wdata [11] $end
$var wire      1 cC   i_wdata [10] $end
$var wire      1 dC   i_wdata [9] $end
$var wire      1 eC   i_wdata [8] $end
$var wire      1 fC   i_wdata [7] $end
$var wire      1 gC   i_wdata [6] $end
$var wire      1 hC   i_wdata [5] $end
$var wire      1 iC   i_wdata [4] $end
$var wire      1 jC   i_wdata [3] $end
$var wire      1 kC   i_wdata [2] $end
$var wire      1 lC   i_wdata [1] $end
$var wire      1 mC   i_wdata [0] $end
$var reg       1 *E   o_serr  $end
$var reg       1 +E   o_decerr  $end
$var reg       1 ,E   o_wvalid  $end
$var reg      40 -E   o_wdata [39:0] $end
$var wire      8 .E   gen_ecc [7:0] $end
$var wire      8 /E   serr_pos [7:0] $end
$var reg       8 0E   recvd_ecc [7:0] $end
$upscope $end

$upscope $end


$scope module mst1_if $end
$var parameter 32 1E   AXI_ADDR_W  $end
$var parameter 32 2E   AXI_ID_W  $end
$var parameter 32 3E   AXI_DATA_W  $end
$var parameter 32 4E   STRB_MODE  $end
$var parameter 32 5E   AXI_SIGNALING  $end
$var parameter 32 6E   KEEP_BASE_ADDR  $end
$var parameter 32 7E   BASE_ADDR  $end
$var parameter 32 8E   SLV_CDC  $end
$var parameter 32 9E   SLV_OSTDREQ_NUM  $end
$var parameter 32 :E   SLV_OSTDREQ_SIZE  $end
$var parameter 32 ;E   USER_SUPPORT  $end
$var parameter 32 <E   AXI_AUSER_W  $end
$var parameter 32 =E   AXI_WUSER_W  $end
$var parameter 32 >E   AXI_BUSER_W  $end
$var parameter 32 ?E   AXI_RUSER_W  $end
$var parameter 32 @E   AWCH_W  $end
$var parameter 32 AE   WCH_W  $end
$var parameter 32 BE   BCH_W  $end
$var parameter 32 CE   ARCH_W  $end
$var parameter 32 DE   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 EE   i_awvalid  $end
$var reg       1 FE   i_awready  $end
$var wire     27 GE   i_awch [26:0] $end
$var wire      1 HE   i_wvalid  $end
$var reg       1 IE   i_wready  $end
$var wire      1 JE   i_wlast  $end
$var wire     45 KE   i_wch [44:0] $end
$var reg       1 LE   i_bvalid  $end
$var wire      1 ME   i_bready  $end
$var reg      10 NE   i_bch [9:0] $end
$var wire      1 OE   i_arvalid  $end
$var reg       1 PE   i_arready  $end
$var wire     27 QE   i_arch [26:0] $end
$var reg       1 RE   i_rvalid  $end
$var wire      1 SE   i_rready  $end
$var reg       1 TE   i_rlast  $end
$var reg      50 UE   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 VE   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 WE   o_awaddr [15:0] $end
$var reg       8 XE   o_awlen [7:0] $end
$var reg       3 YE   o_awsize [2:0] $end
$var reg       2 ZE   o_awburst [1:0] $end
$var reg       2 [E   o_awlock [1:0] $end
$var reg       4 \E   o_awcache [3:0] $end
$var reg       3 ]E   o_awprot [2:0] $end
$var reg       4 ^E   o_awqos [3:0] $end
$var reg       4 _E   o_awregion [3:0] $end
$var reg       8 `E   o_awid [7:0] $end
$var reg       1 aE   o_awuser [0:0] $end
$var reg       1 bE   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 cE   o_wlast  $end
$var reg      40 dE   o_wdata [39:0] $end
$var reg       5 eE   o_wstrb [4:0] $end
$var reg       1 fE   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 gE   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 hE   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 iE   o_araddr [15:0] $end
$var reg       8 jE   o_arlen [7:0] $end
$var reg       3 kE   o_arsize [2:0] $end
$var reg       2 lE   o_arburst [1:0] $end
$var reg       2 mE   o_arlock [1:0] $end
$var reg       4 nE   o_arcache [3:0] $end
$var reg       3 oE   o_arprot [2:0] $end
$var reg       4 pE   o_arqos [3:0] $end
$var reg       4 qE   o_arregion [3:0] $end
$var reg       8 rE   o_arid [7:0] $end
$var reg       1 sE   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 tE   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 uE   awch [26:0] $end
$var reg      45 vE   wch [44:0] $end
$var reg      10 wE   bch [9:0] $end
$var reg      27 xE   arch [26:0] $end
$var reg      50 yE   rch [49:0] $end
$var reg       1 zE   rlast  $end
$var reg      16 {E   awaddr [15:0] $end
$var reg      16 |E   araddr [15:0] $end
$var wire      1 }E   i_wvalid_w  $end
$var wire      1 ~E   i_wdata_w [40] $end
$var wire      1 !F   i_wdata_w [39] $end
$var wire      1 "F   i_wdata_w [38] $end
$var wire      1 #F   i_wdata_w [37] $end
$var wire      1 $F   i_wdata_w [36] $end
$var wire      1 %F   i_wdata_w [35] $end
$var wire      1 &F   i_wdata_w [34] $end
$var wire      1 'F   i_wdata_w [33] $end
$var wire      1 (F   i_wdata_w [32] $end
$var wire      1 )F   i_wdata_w [31] $end
$var wire      1 *F   i_wdata_w [30] $end
$var wire      1 +F   i_wdata_w [29] $end
$var wire      1 ,F   i_wdata_w [28] $end
$var wire      1 -F   i_wdata_w [27] $end
$var wire      1 .F   i_wdata_w [26] $end
$var wire      1 /F   i_wdata_w [25] $end
$var wire      1 0F   i_wdata_w [24] $end
$var wire      1 1F   i_wdata_w [23] $end
$var wire      1 2F   i_wdata_w [22] $end
$var wire      1 3F   i_wdata_w [21] $end
$var wire      1 4F   i_wdata_w [20] $end
$var wire      1 5F   i_wdata_w [19] $end
$var wire      1 6F   i_wdata_w [18] $end
$var wire      1 7F   i_wdata_w [17] $end
$var wire      1 8F   i_wdata_w [16] $end
$var wire      1 9F   i_wdata_w [15] $end
$var wire      1 :F   i_wdata_w [14] $end
$var wire      1 ;F   i_wdata_w [13] $end
$var wire      1 <F   i_wdata_w [12] $end
$var wire      1 =F   i_wdata_w [11] $end
$var wire      1 >F   i_wdata_w [10] $end
$var wire      1 ?F   i_wdata_w [9] $end
$var wire      1 @F   i_wdata_w [8] $end
$var wire      1 AF   i_wdata_w [7] $end
$var wire      1 BF   i_wdata_w [6] $end
$var wire      1 CF   i_wdata_w [5] $end
$var wire      1 DF   i_wdata_w [4] $end
$var wire      1 EF   i_wdata_w [3] $end
$var wire      1 FF   i_wdata_w [2] $end
$var wire      1 GF   i_wdata_w [1] $end
$var wire      1 HF   i_wdata_w [0] $end
$var reg       3 IF   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 JF   PASS_THRU  $end
$var parameter 32 KF   AW_ASIZE  $end
$var parameter 32 LF   W_ASIZE  $end
$var parameter 32 MF   B_ASIZE  $end
$var parameter 32 NF   AR_ASIZE  $end
$var parameter 32 OF   R_ASIZE  $end
$var reg       1 PF   aw_full  $end
$var reg       1 QF   aw_empty  $end
$var reg       1 RF   w_full  $end
$var reg       1 SF   w_empty  $end
$var reg       1 TF   ar_full  $end
$var reg       1 UF   ar_empty  $end
$var reg       1 VF   r_full  $end
$var reg       1 WF   r_empty  $end
$var reg       1 XF   b_full  $end
$var reg       1 YF   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 ZF   PASS_THRU  $end
$var parameter 32 [F   ADDR_WIDTH  $end
$var parameter 32 \F   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 GE   data_in [26:0] $end
$var wire      1 EE   push  $end
$var reg       1 ]F   full  $end
$var reg      27 ^F   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 _F   empty  $end
$var reg       1 `F   wr_en  $end
$var reg       3 aF   wrptr [2:0] $end
$var reg       3 bF   rdptr [2:0] $end
$var reg       1 cF   empty_flag  $end
$var reg       1 dF   full_flag  $end
$var reg       1 eF   pass_thru  $end
$var reg      27 fF   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 gF   ADDR_WIDTH  $end
$var parameter 32 hF   DATA_WIDTH  $end
$var parameter 32 iF   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 jF   wr_en  $end
$var wire      2 kF   addr_in [1:0] $end
$var wire     27 GE   data_in [26:0] $end
$var wire      2 lF   addr_out [1:0] $end
$var reg      27 mF   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 nF   PASS_THRU  $end
$var parameter 32 oF   ADDR_WIDTH  $end
$var parameter 32 pF   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 qF   data_in [45:0] $end
$var wire      1 }E   push  $end
$var reg       1 rF   full  $end
$var reg      46 sF   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 tF   empty  $end
$var reg       1 uF   wr_en  $end
$var reg       3 vF   wrptr [2:0] $end
$var reg       3 wF   rdptr [2:0] $end
$var reg       1 xF   empty_flag  $end
$var reg       1 yF   full_flag  $end
$var reg       1 zF   pass_thru  $end
$var reg      46 {F   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 |F   ADDR_WIDTH  $end
$var parameter 32 }F   DATA_WIDTH  $end
$var parameter 32 ~F   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 !G   wr_en  $end
$var wire      2 "G   addr_in [1:0] $end
$var wire     46 qF   data_in [45:0] $end
$var wire      2 #G   addr_out [1:0] $end
$var reg      46 $G   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 %G   PASS_THRU  $end
$var parameter 32 &G   ADDR_WIDTH  $end
$var parameter 32 'G   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 (G   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 )G   full  $end
$var reg      10 *G   data_out [9:0] $end
$var wire      1 ME   pull  $end
$var reg       1 +G   empty  $end
$var reg       1 ,G   wr_en  $end
$var reg       3 -G   wrptr [2:0] $end
$var reg       3 .G   rdptr [2:0] $end
$var reg       1 /G   empty_flag  $end
$var reg       1 0G   full_flag  $end
$var reg       1 1G   pass_thru  $end
$var reg      10 2G   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 3G   ADDR_WIDTH  $end
$var parameter 32 4G   DATA_WIDTH  $end
$var parameter 32 5G   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 6G   wr_en  $end
$var wire      2 7G   addr_in [1:0] $end
$var wire     10 (G   data_in [9:0] $end
$var wire      2 8G   addr_out [1:0] $end
$var reg      10 9G   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 :G   PASS_THRU  $end
$var parameter 32 ;G   ADDR_WIDTH  $end
$var parameter 32 <G   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 QE   data_in [26:0] $end
$var wire      1 OE   push  $end
$var reg       1 =G   full  $end
$var reg      27 >G   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 ?G   empty  $end
$var reg       1 @G   wr_en  $end
$var reg       3 AG   wrptr [2:0] $end
$var reg       3 BG   rdptr [2:0] $end
$var reg       1 CG   empty_flag  $end
$var reg       1 DG   full_flag  $end
$var reg       1 EG   pass_thru  $end
$var reg      27 FG   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 GG   ADDR_WIDTH  $end
$var parameter 32 HG   DATA_WIDTH  $end
$var parameter 32 IG   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 JG   wr_en  $end
$var wire      2 KG   addr_in [1:0] $end
$var wire     27 QE   data_in [26:0] $end
$var wire      2 LG   addr_out [1:0] $end
$var reg      27 MG   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 NG   PASS_THRU  $end
$var parameter 32 OG   ADDR_WIDTH  $end
$var parameter 32 PG   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 QG   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 RG   full  $end
$var reg      51 SG   data_out [50:0] $end
$var wire      1 SE   pull  $end
$var reg       1 TG   empty  $end
$var reg       1 UG   wr_en  $end
$var reg       3 VG   wrptr [2:0] $end
$var reg       3 WG   rdptr [2:0] $end
$var reg       1 XG   empty_flag  $end
$var reg       1 YG   full_flag  $end
$var reg       1 ZG   pass_thru  $end
$var reg      51 [G   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 \G   ADDR_WIDTH  $end
$var parameter 32 ]G   DATA_WIDTH  $end
$var parameter 32 ^G   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 _G   wr_en  $end
$var wire      2 `G   addr_in [1:0] $end
$var wire     51 QG   data_in [50:0] $end
$var wire      2 aG   addr_out [1:0] $end
$var reg      51 bG   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 HE   i_wvalid  $end
$var wire      1 !F   i_wdata [39] $end
$var wire      1 "F   i_wdata [38] $end
$var wire      1 #F   i_wdata [37] $end
$var wire      1 $F   i_wdata [36] $end
$var wire      1 %F   i_wdata [35] $end
$var wire      1 &F   i_wdata [34] $end
$var wire      1 'F   i_wdata [33] $end
$var wire      1 (F   i_wdata [32] $end
$var wire      1 )F   i_wdata [31] $end
$var wire      1 *F   i_wdata [30] $end
$var wire      1 +F   i_wdata [29] $end
$var wire      1 ,F   i_wdata [28] $end
$var wire      1 -F   i_wdata [27] $end
$var wire      1 .F   i_wdata [26] $end
$var wire      1 /F   i_wdata [25] $end
$var wire      1 0F   i_wdata [24] $end
$var wire      1 1F   i_wdata [23] $end
$var wire      1 2F   i_wdata [22] $end
$var wire      1 3F   i_wdata [21] $end
$var wire      1 4F   i_wdata [20] $end
$var wire      1 5F   i_wdata [19] $end
$var wire      1 6F   i_wdata [18] $end
$var wire      1 7F   i_wdata [17] $end
$var wire      1 8F   i_wdata [16] $end
$var wire      1 9F   i_wdata [15] $end
$var wire      1 :F   i_wdata [14] $end
$var wire      1 ;F   i_wdata [13] $end
$var wire      1 <F   i_wdata [12] $end
$var wire      1 =F   i_wdata [11] $end
$var wire      1 >F   i_wdata [10] $end
$var wire      1 ?F   i_wdata [9] $end
$var wire      1 @F   i_wdata [8] $end
$var wire      1 AF   i_wdata [7] $end
$var wire      1 BF   i_wdata [6] $end
$var wire      1 CF   i_wdata [5] $end
$var wire      1 DF   i_wdata [4] $end
$var wire      1 EF   i_wdata [3] $end
$var wire      1 FF   i_wdata [2] $end
$var wire      1 GF   i_wdata [1] $end
$var wire      1 HF   i_wdata [0] $end
$var reg       1 cG   o_serr  $end
$var reg       1 dG   o_decerr  $end
$var reg       1 eG   o_wvalid  $end
$var reg      40 fG   o_wdata [39:0] $end
$var wire      8 gG   gen_ecc [7:0] $end
$var wire      8 hG   serr_pos [7:0] $end
$var reg       8 iG   recvd_ecc [7:0] $end
$upscope $end

$upscope $end


$scope module mst2_if $end
$var parameter 32 jG   AXI_ADDR_W  $end
$var parameter 32 kG   AXI_ID_W  $end
$var parameter 32 lG   AXI_DATA_W  $end
$var parameter 32 mG   STRB_MODE  $end
$var parameter 32 nG   AXI_SIGNALING  $end
$var parameter 32 oG   KEEP_BASE_ADDR  $end
$var parameter 32 pG   BASE_ADDR  $end
$var parameter 32 qG   SLV_CDC  $end
$var parameter 32 rG   SLV_OSTDREQ_NUM  $end
$var parameter 32 sG   SLV_OSTDREQ_SIZE  $end
$var parameter 32 tG   USER_SUPPORT  $end
$var parameter 32 uG   AXI_AUSER_W  $end
$var parameter 32 vG   AXI_WUSER_W  $end
$var parameter 32 wG   AXI_BUSER_W  $end
$var parameter 32 xG   AXI_RUSER_W  $end
$var parameter 32 yG   AWCH_W  $end
$var parameter 32 zG   WCH_W  $end
$var parameter 32 {G   BCH_W  $end
$var parameter 32 |G   ARCH_W  $end
$var parameter 32 }G   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 ~G   i_awvalid  $end
$var reg       1 !H   i_awready  $end
$var wire     27 "H   i_awch [26:0] $end
$var wire      1 #H   i_wvalid  $end
$var reg       1 $H   i_wready  $end
$var wire      1 %H   i_wlast  $end
$var wire     45 &H   i_wch [44:0] $end
$var reg       1 'H   i_bvalid  $end
$var wire      1 (H   i_bready  $end
$var reg      10 )H   i_bch [9:0] $end
$var wire      1 *H   i_arvalid  $end
$var reg       1 +H   i_arready  $end
$var wire     27 ,H   i_arch [26:0] $end
$var reg       1 -H   i_rvalid  $end
$var wire      1 .H   i_rready  $end
$var reg       1 /H   i_rlast  $end
$var reg      50 0H   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 1H   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 2H   o_awaddr [15:0] $end
$var reg       8 3H   o_awlen [7:0] $end
$var reg       3 4H   o_awsize [2:0] $end
$var reg       2 5H   o_awburst [1:0] $end
$var reg       2 6H   o_awlock [1:0] $end
$var reg       4 7H   o_awcache [3:0] $end
$var reg       3 8H   o_awprot [2:0] $end
$var reg       4 9H   o_awqos [3:0] $end
$var reg       4 :H   o_awregion [3:0] $end
$var reg       8 ;H   o_awid [7:0] $end
$var reg       1 <H   o_awuser [0:0] $end
$var reg       1 =H   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 >H   o_wlast  $end
$var reg      40 ?H   o_wdata [39:0] $end
$var reg       5 @H   o_wstrb [4:0] $end
$var reg       1 AH   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 BH   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 CH   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 DH   o_araddr [15:0] $end
$var reg       8 EH   o_arlen [7:0] $end
$var reg       3 FH   o_arsize [2:0] $end
$var reg       2 GH   o_arburst [1:0] $end
$var reg       2 HH   o_arlock [1:0] $end
$var reg       4 IH   o_arcache [3:0] $end
$var reg       3 JH   o_arprot [2:0] $end
$var reg       4 KH   o_arqos [3:0] $end
$var reg       4 LH   o_arregion [3:0] $end
$var reg       8 MH   o_arid [7:0] $end
$var reg       1 NH   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 OH   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 PH   awch [26:0] $end
$var reg      45 QH   wch [44:0] $end
$var reg      10 RH   bch [9:0] $end
$var reg      27 SH   arch [26:0] $end
$var reg      50 TH   rch [49:0] $end
$var reg       1 UH   rlast  $end
$var reg      16 VH   awaddr [15:0] $end
$var reg      16 WH   araddr [15:0] $end
$var wire      1 XH   i_wvalid_w  $end
$var wire      1 YH   i_wdata_w [40] $end
$var wire      1 ZH   i_wdata_w [39] $end
$var wire      1 [H   i_wdata_w [38] $end
$var wire      1 \H   i_wdata_w [37] $end
$var wire      1 ]H   i_wdata_w [36] $end
$var wire      1 ^H   i_wdata_w [35] $end
$var wire      1 _H   i_wdata_w [34] $end
$var wire      1 `H   i_wdata_w [33] $end
$var wire      1 aH   i_wdata_w [32] $end
$var wire      1 bH   i_wdata_w [31] $end
$var wire      1 cH   i_wdata_w [30] $end
$var wire      1 dH   i_wdata_w [29] $end
$var wire      1 eH   i_wdata_w [28] $end
$var wire      1 fH   i_wdata_w [27] $end
$var wire      1 gH   i_wdata_w [26] $end
$var wire      1 hH   i_wdata_w [25] $end
$var wire      1 iH   i_wdata_w [24] $end
$var wire      1 jH   i_wdata_w [23] $end
$var wire      1 kH   i_wdata_w [22] $end
$var wire      1 lH   i_wdata_w [21] $end
$var wire      1 mH   i_wdata_w [20] $end
$var wire      1 nH   i_wdata_w [19] $end
$var wire      1 oH   i_wdata_w [18] $end
$var wire      1 pH   i_wdata_w [17] $end
$var wire      1 qH   i_wdata_w [16] $end
$var wire      1 rH   i_wdata_w [15] $end
$var wire      1 sH   i_wdata_w [14] $end
$var wire      1 tH   i_wdata_w [13] $end
$var wire      1 uH   i_wdata_w [12] $end
$var wire      1 vH   i_wdata_w [11] $end
$var wire      1 wH   i_wdata_w [10] $end
$var wire      1 xH   i_wdata_w [9] $end
$var wire      1 yH   i_wdata_w [8] $end
$var wire      1 zH   i_wdata_w [7] $end
$var wire      1 {H   i_wdata_w [6] $end
$var wire      1 |H   i_wdata_w [5] $end
$var wire      1 }H   i_wdata_w [4] $end
$var wire      1 ~H   i_wdata_w [3] $end
$var wire      1 !I   i_wdata_w [2] $end
$var wire      1 "I   i_wdata_w [1] $end
$var wire      1 #I   i_wdata_w [0] $end
$var reg       3 $I   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 %I   PASS_THRU  $end
$var parameter 32 &I   AW_ASIZE  $end
$var parameter 32 'I   W_ASIZE  $end
$var parameter 32 (I   B_ASIZE  $end
$var parameter 32 )I   AR_ASIZE  $end
$var parameter 32 *I   R_ASIZE  $end
$var reg       1 +I   aw_full  $end
$var reg       1 ,I   aw_empty  $end
$var reg       1 -I   w_full  $end
$var reg       1 .I   w_empty  $end
$var reg       1 /I   ar_full  $end
$var reg       1 0I   ar_empty  $end
$var reg       1 1I   r_full  $end
$var reg       1 2I   r_empty  $end
$var reg       1 3I   b_full  $end
$var reg       1 4I   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 5I   PASS_THRU  $end
$var parameter 32 6I   ADDR_WIDTH  $end
$var parameter 32 7I   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 "H   data_in [26:0] $end
$var wire      1 ~G   push  $end
$var reg       1 8I   full  $end
$var reg      27 9I   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 :I   empty  $end
$var reg       1 ;I   wr_en  $end
$var reg       3 <I   wrptr [2:0] $end
$var reg       3 =I   rdptr [2:0] $end
$var reg       1 >I   empty_flag  $end
$var reg       1 ?I   full_flag  $end
$var reg       1 @I   pass_thru  $end
$var reg      27 AI   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 BI   ADDR_WIDTH  $end
$var parameter 32 CI   DATA_WIDTH  $end
$var parameter 32 DI   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 EI   wr_en  $end
$var wire      2 FI   addr_in [1:0] $end
$var wire     27 "H   data_in [26:0] $end
$var wire      2 GI   addr_out [1:0] $end
$var reg      27 HI   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 II   PASS_THRU  $end
$var parameter 32 JI   ADDR_WIDTH  $end
$var parameter 32 KI   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 LI   data_in [45:0] $end
$var wire      1 XH   push  $end
$var reg       1 MI   full  $end
$var reg      46 NI   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 OI   empty  $end
$var reg       1 PI   wr_en  $end
$var reg       3 QI   wrptr [2:0] $end
$var reg       3 RI   rdptr [2:0] $end
$var reg       1 SI   empty_flag  $end
$var reg       1 TI   full_flag  $end
$var reg       1 UI   pass_thru  $end
$var reg      46 VI   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 WI   ADDR_WIDTH  $end
$var parameter 32 XI   DATA_WIDTH  $end
$var parameter 32 YI   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ZI   wr_en  $end
$var wire      2 [I   addr_in [1:0] $end
$var wire     46 LI   data_in [45:0] $end
$var wire      2 \I   addr_out [1:0] $end
$var reg      46 ]I   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 ^I   PASS_THRU  $end
$var parameter 32 _I   ADDR_WIDTH  $end
$var parameter 32 `I   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 aI   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 bI   full  $end
$var reg      10 cI   data_out [9:0] $end
$var wire      1 (H   pull  $end
$var reg       1 dI   empty  $end
$var reg       1 eI   wr_en  $end
$var reg       3 fI   wrptr [2:0] $end
$var reg       3 gI   rdptr [2:0] $end
$var reg       1 hI   empty_flag  $end
$var reg       1 iI   full_flag  $end
$var reg       1 jI   pass_thru  $end
$var reg      10 kI   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 lI   ADDR_WIDTH  $end
$var parameter 32 mI   DATA_WIDTH  $end
$var parameter 32 nI   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 oI   wr_en  $end
$var wire      2 pI   addr_in [1:0] $end
$var wire     10 aI   data_in [9:0] $end
$var wire      2 qI   addr_out [1:0] $end
$var reg      10 rI   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 sI   PASS_THRU  $end
$var parameter 32 tI   ADDR_WIDTH  $end
$var parameter 32 uI   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 ,H   data_in [26:0] $end
$var wire      1 *H   push  $end
$var reg       1 vI   full  $end
$var reg      27 wI   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 xI   empty  $end
$var reg       1 yI   wr_en  $end
$var reg       3 zI   wrptr [2:0] $end
$var reg       3 {I   rdptr [2:0] $end
$var reg       1 |I   empty_flag  $end
$var reg       1 }I   full_flag  $end
$var reg       1 ~I   pass_thru  $end
$var reg      27 !J   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 "J   ADDR_WIDTH  $end
$var parameter 32 #J   DATA_WIDTH  $end
$var parameter 32 $J   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 %J   wr_en  $end
$var wire      2 &J   addr_in [1:0] $end
$var wire     27 ,H   data_in [26:0] $end
$var wire      2 'J   addr_out [1:0] $end
$var reg      27 (J   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 )J   PASS_THRU  $end
$var parameter 32 *J   ADDR_WIDTH  $end
$var parameter 32 +J   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 ,J   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 -J   full  $end
$var reg      51 .J   data_out [50:0] $end
$var wire      1 .H   pull  $end
$var reg       1 /J   empty  $end
$var reg       1 0J   wr_en  $end
$var reg       3 1J   wrptr [2:0] $end
$var reg       3 2J   rdptr [2:0] $end
$var reg       1 3J   empty_flag  $end
$var reg       1 4J   full_flag  $end
$var reg       1 5J   pass_thru  $end
$var reg      51 6J   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 7J   ADDR_WIDTH  $end
$var parameter 32 8J   DATA_WIDTH  $end
$var parameter 32 9J   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 :J   wr_en  $end
$var wire      2 ;J   addr_in [1:0] $end
$var wire     51 ,J   data_in [50:0] $end
$var wire      2 <J   addr_out [1:0] $end
$var reg      51 =J   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 #H   i_wvalid  $end
$var wire      1 ZH   i_wdata [39] $end
$var wire      1 [H   i_wdata [38] $end
$var wire      1 \H   i_wdata [37] $end
$var wire      1 ]H   i_wdata [36] $end
$var wire      1 ^H   i_wdata [35] $end
$var wire      1 _H   i_wdata [34] $end
$var wire      1 `H   i_wdata [33] $end
$var wire      1 aH   i_wdata [32] $end
$var wire      1 bH   i_wdata [31] $end
$var wire      1 cH   i_wdata [30] $end
$var wire      1 dH   i_wdata [29] $end
$var wire      1 eH   i_wdata [28] $end
$var wire      1 fH   i_wdata [27] $end
$var wire      1 gH   i_wdata [26] $end
$var wire      1 hH   i_wdata [25] $end
$var wire      1 iH   i_wdata [24] $end
$var wire      1 jH   i_wdata [23] $end
$var wire      1 kH   i_wdata [22] $end
$var wire      1 lH   i_wdata [21] $end
$var wire      1 mH   i_wdata [20] $end
$var wire      1 nH   i_wdata [19] $end
$var wire      1 oH   i_wdata [18] $end
$var wire      1 pH   i_wdata [17] $end
$var wire      1 qH   i_wdata [16] $end
$var wire      1 rH   i_wdata [15] $end
$var wire      1 sH   i_wdata [14] $end
$var wire      1 tH   i_wdata [13] $end
$var wire      1 uH   i_wdata [12] $end
$var wire      1 vH   i_wdata [11] $end
$var wire      1 wH   i_wdata [10] $end
$var wire      1 xH   i_wdata [9] $end
$var wire      1 yH   i_wdata [8] $end
$var wire      1 zH   i_wdata [7] $end
$var wire      1 {H   i_wdata [6] $end
$var wire      1 |H   i_wdata [5] $end
$var wire      1 }H   i_wdata [4] $end
$var wire      1 ~H   i_wdata [3] $end
$var wire      1 !I   i_wdata [2] $end
$var wire      1 "I   i_wdata [1] $end
$var wire      1 #I   i_wdata [0] $end
$var reg       1 >J   o_serr  $end
$var reg       1 ?J   o_decerr  $end
$var reg       1 @J   o_wvalid  $end
$var reg      40 AJ   o_wdata [39:0] $end
$var wire      8 BJ   gen_ecc [7:0] $end
$var wire      8 CJ   serr_pos [7:0] $end
$var reg       8 DJ   recvd_ecc [7:0] $end
$upscope $end

$upscope $end


$scope module mst3_if $end
$var parameter 32 EJ   AXI_ADDR_W  $end
$var parameter 32 FJ   AXI_ID_W  $end
$var parameter 32 GJ   AXI_DATA_W  $end
$var parameter 32 HJ   STRB_MODE  $end
$var parameter 32 IJ   AXI_SIGNALING  $end
$var parameter 32 JJ   KEEP_BASE_ADDR  $end
$var parameter 32 KJ   BASE_ADDR  $end
$var parameter 32 LJ   SLV_CDC  $end
$var parameter 32 MJ   SLV_OSTDREQ_NUM  $end
$var parameter 32 NJ   SLV_OSTDREQ_SIZE  $end
$var parameter 32 OJ   USER_SUPPORT  $end
$var parameter 32 PJ   AXI_AUSER_W  $end
$var parameter 32 QJ   AXI_WUSER_W  $end
$var parameter 32 RJ   AXI_BUSER_W  $end
$var parameter 32 SJ   AXI_RUSER_W  $end
$var parameter 32 TJ   AWCH_W  $end
$var parameter 32 UJ   WCH_W  $end
$var parameter 32 VJ   BCH_W  $end
$var parameter 32 WJ   ARCH_W  $end
$var parameter 32 XJ   RCH_W  $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 e    i_srst  $end
$var wire      1 YJ   i_awvalid  $end
$var reg       1 ZJ   i_awready  $end
$var wire     27 [J   i_awch [26:0] $end
$var wire      1 \J   i_wvalid  $end
$var reg       1 ]J   i_wready  $end
$var wire      1 ^J   i_wlast  $end
$var wire     45 _J   i_wch [44:0] $end
$var reg       1 `J   i_bvalid  $end
$var wire      1 aJ   i_bready  $end
$var reg      10 bJ   i_bch [9:0] $end
$var wire      1 cJ   i_arvalid  $end
$var reg       1 dJ   i_arready  $end
$var wire     27 eJ   i_arch [26:0] $end
$var reg       1 fJ   i_rvalid  $end
$var wire      1 gJ   i_rready  $end
$var reg       1 hJ   i_rlast  $end
$var reg      50 iJ   i_rch [49:0] $end
$var wire      1 =!   o_aclk  $end
$var wire      1 d    o_aresetn  $end
$var wire      1 e    o_srst  $end
$var reg       1 jJ   o_awvalid  $end
$var wire      1 e    o_awready  $end
$var reg      16 kJ   o_awaddr [15:0] $end
$var reg       8 lJ   o_awlen [7:0] $end
$var reg       3 mJ   o_awsize [2:0] $end
$var reg       2 nJ   o_awburst [1:0] $end
$var reg       2 oJ   o_awlock [1:0] $end
$var reg       4 pJ   o_awcache [3:0] $end
$var reg       3 qJ   o_awprot [2:0] $end
$var reg       4 rJ   o_awqos [3:0] $end
$var reg       4 sJ   o_awregion [3:0] $end
$var reg       8 tJ   o_awid [7:0] $end
$var reg       1 uJ   o_awuser [0:0] $end
$var reg       1 vJ   o_wvalid  $end
$var wire      1 e    o_wready  $end
$var reg       1 wJ   o_wlast  $end
$var reg      40 xJ   o_wdata [39:0] $end
$var reg       5 yJ   o_wstrb [4:0] $end
$var reg       1 zJ   o_wuser [0:0] $end
$var wire      1 e    o_bvalid  $end
$var reg       1 {J   o_bready  $end
$var wire      8 i    o_bid [7:0] $end
$var wire      2 H!   o_bresp [1:0] $end
$var wire      1 e    o_buser [0] $end
$var reg       1 |J   o_arvalid  $end
$var wire      1 e    o_arready  $end
$var reg      16 }J   o_araddr [15:0] $end
$var reg       8 ~J   o_arlen [7:0] $end
$var reg       3 !K   o_arsize [2:0] $end
$var reg       2 "K   o_arburst [1:0] $end
$var reg       2 #K   o_arlock [1:0] $end
$var reg       4 $K   o_arcache [3:0] $end
$var reg       3 %K   o_arprot [2:0] $end
$var reg       4 &K   o_arqos [3:0] $end
$var reg       4 'K   o_arregion [3:0] $end
$var reg       8 (K   o_arid [7:0] $end
$var reg       1 )K   o_aruser [0:0] $end
$var wire      1 e    o_rvalid  $end
$var reg       1 *K   o_rready  $end
$var wire      8 i    o_rid [7:0] $end
$var wire      2 H!   o_rresp [1:0] $end
$var wire     40 k    o_rdata [39:0] $end
$var wire      1 d    o_rlast  $end
$var wire      1 e    o_ruser [0] $end
$var reg      27 +K   awch [26:0] $end
$var reg      45 ,K   wch [44:0] $end
$var reg      10 -K   bch [9:0] $end
$var reg      27 .K   arch [26:0] $end
$var reg      50 /K   rch [49:0] $end
$var reg       1 0K   rlast  $end
$var reg      16 1K   awaddr [15:0] $end
$var reg      16 2K   araddr [15:0] $end
$var wire      1 3K   i_wvalid_w  $end
$var wire      1 4K   i_wdata_w [40] $end
$var wire      1 5K   i_wdata_w [39] $end
$var wire      1 6K   i_wdata_w [38] $end
$var wire      1 7K   i_wdata_w [37] $end
$var wire      1 8K   i_wdata_w [36] $end
$var wire      1 9K   i_wdata_w [35] $end
$var wire      1 :K   i_wdata_w [34] $end
$var wire      1 ;K   i_wdata_w [33] $end
$var wire      1 <K   i_wdata_w [32] $end
$var wire      1 =K   i_wdata_w [31] $end
$var wire      1 >K   i_wdata_w [30] $end
$var wire      1 ?K   i_wdata_w [29] $end
$var wire      1 @K   i_wdata_w [28] $end
$var wire      1 AK   i_wdata_w [27] $end
$var wire      1 BK   i_wdata_w [26] $end
$var wire      1 CK   i_wdata_w [25] $end
$var wire      1 DK   i_wdata_w [24] $end
$var wire      1 EK   i_wdata_w [23] $end
$var wire      1 FK   i_wdata_w [22] $end
$var wire      1 GK   i_wdata_w [21] $end
$var wire      1 HK   i_wdata_w [20] $end
$var wire      1 IK   i_wdata_w [19] $end
$var wire      1 JK   i_wdata_w [18] $end
$var wire      1 KK   i_wdata_w [17] $end
$var wire      1 LK   i_wdata_w [16] $end
$var wire      1 MK   i_wdata_w [15] $end
$var wire      1 NK   i_wdata_w [14] $end
$var wire      1 OK   i_wdata_w [13] $end
$var wire      1 PK   i_wdata_w [12] $end
$var wire      1 QK   i_wdata_w [11] $end
$var wire      1 RK   i_wdata_w [10] $end
$var wire      1 SK   i_wdata_w [9] $end
$var wire      1 TK   i_wdata_w [8] $end
$var wire      1 UK   i_wdata_w [7] $end
$var wire      1 VK   i_wdata_w [6] $end
$var wire      1 WK   i_wdata_w [5] $end
$var wire      1 XK   i_wdata_w [4] $end
$var wire      1 YK   i_wdata_w [3] $end
$var wire      1 ZK   i_wdata_w [2] $end
$var wire      1 [K   i_wdata_w [1] $end
$var wire      1 \K   i_wdata_w [0] $end
$var reg       3 ]K   secded_bresp [2:0] $end

$scope begin BUFF_STAGE $end
$var parameter 32 ^K   PASS_THRU  $end
$var parameter 32 _K   AW_ASIZE  $end
$var parameter 32 `K   W_ASIZE  $end
$var parameter 32 aK   B_ASIZE  $end
$var parameter 32 bK   AR_ASIZE  $end
$var parameter 32 cK   R_ASIZE  $end
$var reg       1 dK   aw_full  $end
$var reg       1 eK   aw_empty  $end
$var reg       1 fK   w_full  $end
$var reg       1 gK   w_empty  $end
$var reg       1 hK   ar_full  $end
$var reg       1 iK   ar_empty  $end
$var reg       1 jK   r_full  $end
$var reg       1 kK   r_empty  $end
$var reg       1 lK   b_full  $end
$var reg       1 mK   b_empty  $end

$scope module aw_scfifo $end
$var parameter 32 nK   PASS_THRU  $end
$var parameter 32 oK   ADDR_WIDTH  $end
$var parameter 32 pK   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 [J   data_in [26:0] $end
$var wire      1 YJ   push  $end
$var reg       1 qK   full  $end
$var reg      27 rK   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 sK   empty  $end
$var reg       1 tK   wr_en  $end
$var reg       3 uK   wrptr [2:0] $end
$var reg       3 vK   rdptr [2:0] $end
$var reg       1 wK   empty_flag  $end
$var reg       1 xK   full_flag  $end
$var reg       1 yK   pass_thru  $end
$var reg      27 zK   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 {K   ADDR_WIDTH  $end
$var parameter 32 |K   DATA_WIDTH  $end
$var parameter 32 }K   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ~K   wr_en  $end
$var wire      2 !L   addr_in [1:0] $end
$var wire     27 [J   data_in [26:0] $end
$var wire      2 "L   addr_out [1:0] $end
$var reg      27 #L   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module w_scfifo $end
$var parameter 32 $L   PASS_THRU  $end
$var parameter 32 %L   ADDR_WIDTH  $end
$var parameter 32 &L   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     46 'L   data_in [45:0] $end
$var wire      1 3K   push  $end
$var reg       1 (L   full  $end
$var reg      46 )L   data_out [45:0] $end
$var wire      1 e    pull  $end
$var reg       1 *L   empty  $end
$var reg       1 +L   wr_en  $end
$var reg       3 ,L   wrptr [2:0] $end
$var reg       3 -L   rdptr [2:0] $end
$var reg       1 .L   empty_flag  $end
$var reg       1 /L   full_flag  $end
$var reg       1 0L   pass_thru  $end
$var reg      46 1L   data_fifo [45:0] $end

$scope module fifo_ram $end
$var parameter 32 2L   ADDR_WIDTH  $end
$var parameter 32 3L   DATA_WIDTH  $end
$var parameter 32 4L   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 5L   wr_en  $end
$var wire      2 6L   addr_in [1:0] $end
$var wire     46 'L   data_in [45:0] $end
$var wire      2 7L   addr_out [1:0] $end
$var reg      46 8L   data_out [45:0] $end
$upscope $end

$upscope $end


$scope module b_scfifo $end
$var parameter 32 9L   PASS_THRU  $end
$var parameter 32 :L   ADDR_WIDTH  $end
$var parameter 32 ;L   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     10 <L   data_in [9:0] $end
$var wire      1 e    push  $end
$var reg       1 =L   full  $end
$var reg      10 >L   data_out [9:0] $end
$var wire      1 aJ   pull  $end
$var reg       1 ?L   empty  $end
$var reg       1 @L   wr_en  $end
$var reg       3 AL   wrptr [2:0] $end
$var reg       3 BL   rdptr [2:0] $end
$var reg       1 CL   empty_flag  $end
$var reg       1 DL   full_flag  $end
$var reg       1 EL   pass_thru  $end
$var reg      10 FL   data_fifo [9:0] $end

$scope module fifo_ram $end
$var parameter 32 GL   ADDR_WIDTH  $end
$var parameter 32 HL   DATA_WIDTH  $end
$var parameter 32 IL   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 JL   wr_en  $end
$var wire      2 KL   addr_in [1:0] $end
$var wire     10 <L   data_in [9:0] $end
$var wire      2 LL   addr_out [1:0] $end
$var reg      10 ML   data_out [9:0] $end
$upscope $end

$upscope $end


$scope module ar_scfifo $end
$var parameter 32 NL   PASS_THRU  $end
$var parameter 32 OL   ADDR_WIDTH  $end
$var parameter 32 PL   DATA_WIDTH  $end
$var wire      1 c    aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     27 eJ   data_in [26:0] $end
$var wire      1 cJ   push  $end
$var reg       1 QL   full  $end
$var reg      27 RL   data_out [26:0] $end
$var wire      1 e    pull  $end
$var reg       1 SL   empty  $end
$var reg       1 TL   wr_en  $end
$var reg       3 UL   wrptr [2:0] $end
$var reg       3 VL   rdptr [2:0] $end
$var reg       1 WL   empty_flag  $end
$var reg       1 XL   full_flag  $end
$var reg       1 YL   pass_thru  $end
$var reg      27 ZL   data_fifo [26:0] $end

$scope module fifo_ram $end
$var parameter 32 [L   ADDR_WIDTH  $end
$var parameter 32 \L   DATA_WIDTH  $end
$var parameter 32 ]L   FFD_EN  $end
$var wire      1 c    aclk  $end
$var wire      1 ^L   wr_en  $end
$var wire      2 _L   addr_in [1:0] $end
$var wire     27 eJ   data_in [26:0] $end
$var wire      2 `L   addr_out [1:0] $end
$var reg      27 aL   data_out [26:0] $end
$upscope $end

$upscope $end


$scope module r_scfifo $end
$var parameter 32 bL   PASS_THRU  $end
$var parameter 32 cL   ADDR_WIDTH  $end
$var parameter 32 dL   DATA_WIDTH  $end
$var wire      1 =!   aclk  $end
$var wire      1 d    aresetn  $end
$var wire      1 e    srst  $end
$var wire      1 w%   flush  $end
$var wire     51 eL   data_in [50:0] $end
$var wire      1 e    push  $end
$var reg       1 fL   full  $end
$var reg      51 gL   data_out [50:0] $end
$var wire      1 gJ   pull  $end
$var reg       1 hL   empty  $end
$var reg       1 iL   wr_en  $end
$var reg       3 jL   wrptr [2:0] $end
$var reg       3 kL   rdptr [2:0] $end
$var reg       1 lL   empty_flag  $end
$var reg       1 mL   full_flag  $end
$var reg       1 nL   pass_thru  $end
$var reg      51 oL   data_fifo [50:0] $end

$scope module fifo_ram $end
$var parameter 32 pL   ADDR_WIDTH  $end
$var parameter 32 qL   DATA_WIDTH  $end
$var parameter 32 rL   FFD_EN  $end
$var wire      1 =!   aclk  $end
$var wire      1 sL   wr_en  $end
$var wire      2 tL   addr_in [1:0] $end
$var wire     51 eL   data_in [50:0] $end
$var wire      2 uL   addr_out [1:0] $end
$var reg      51 vL   data_out [50:0] $end
$upscope $end

$upscope $end

$upscope $end


$scope module ecc_secded $end
$var wire      1 c    i_aclk  $end
$var wire      1 d    i_aresetn  $end
$var wire      1 d    i_enable_ecc  $end
$var wire      1 \J   i_wvalid  $end
$var wire      1 5K   i_wdata [39] $end
$var wire      1 6K   i_wdata [38] $end
$var wire      1 7K   i_wdata [37] $end
$var wire      1 8K   i_wdata [36] $end
$var wire      1 9K   i_wdata [35] $end
$var wire      1 :K   i_wdata [34] $end
$var wire      1 ;K   i_wdata [33] $end
$var wire      1 <K   i_wdata [32] $end
$var wire      1 =K   i_wdata [31] $end
$var wire      1 >K   i_wdata [30] $end
$var wire      1 ?K   i_wdata [29] $end
$var wire      1 @K   i_wdata [28] $end
$var wire      1 AK   i_wdata [27] $end
$var wire      1 BK   i_wdata [26] $end
$var wire      1 CK   i_wdata [25] $end
$var wire      1 DK   i_wdata [24] $end
$var wire      1 EK   i_wdata [23] $end
$var wire      1 FK   i_wdata [22] $end
$var wire      1 GK   i_wdata [21] $end
$var wire      1 HK   i_wdata [20] $end
$var wire      1 IK   i_wdata [19] $end
$var wire      1 JK   i_wdata [18] $end
$var wire      1 KK   i_wdata [17] $end
$var wire      1 LK   i_wdata [16] $end
$var wire      1 MK   i_wdata [15] $end
$var wire      1 NK   i_wdata [14] $end
$var wire      1 OK   i_wdata [13] $end
$var wire      1 PK   i_wdata [12] $end
$var wire      1 QK   i_wdata [11] $end
$var wire      1 RK   i_wdata [10] $end
$var wire      1 SK   i_wdata [9] $end
$var wire      1 TK   i_wdata [8] $end
$var wire      1 UK   i_wdata [7] $end
$var wire      1 VK   i_wdata [6] $end
$var wire      1 WK   i_wdata [5] $end
$var wire      1 XK   i_wdata [4] $end
$var wire      1 YK   i_wdata [3] $end
$var wire      1 ZK   i_wdata [2] $end
$var wire      1 [K   i_wdata [1] $end
$var wire      1 \K   i_wdata [0] $end
$var reg       1 wL   o_serr  $end
$var reg       1 xL   o_decerr  $end
$var reg       1 yL   o_wvalid  $end
$var reg      40 zL   o_wdata [39:0] $end
$var wire      8 {L   gen_ecc [7:0] $end
$var wire      8 |L   serr_pos [7:0] $end
$var reg       8 }L   recvd_ecc [7:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 rL
b110011 qL
b10 pL
b110011 dL
b10 cL
b0 bL
b0 ]L
b11011 \L
b10 [L
b11011 PL
b10 OL
b0 NL
b0 IL
b1010 HL
b10 GL
b1010 ;L
b10 :L
b0 9L
b0 4L
b101110 3L
b10 2L
b101110 &L
b10 %L
b0 $L
b0 }K
b11011 |K
b10 {K
b11011 pK
b10 oK
b0 nK
b10 cK
b10 bK
b10 aK
b10 `K
b10 _K
b0 ^K
b110010 XJ
b11011 WJ
b1010 VJ
b101101 UJ
b11011 TJ
b1 SJ
b1 RJ
b1 QJ
b1 PJ
b0 OJ
b1 NJ
b100 MJ
b0 LJ
b11000000000000 KJ
b0 JJ
b0 IJ
b1 HJ
b101000 GJ
b1000 FJ
b10000 EJ
b0 9J
b110011 8J
b10 7J
b110011 +J
b10 *J
b0 )J
b0 $J
b11011 #J
b10 "J
b11011 uI
b10 tI
b0 sI
b0 nI
b1010 mI
b10 lI
b1010 `I
b10 _I
b0 ^I
b0 YI
b101110 XI
b10 WI
b101110 KI
b10 JI
b0 II
b0 DI
b11011 CI
b10 BI
b11011 7I
b10 6I
b0 5I
b10 *I
b10 )I
b10 (I
b10 'I
b10 &I
b0 %I
b110010 }G
b11011 |G
b1010 {G
b101101 zG
b11011 yG
b1 xG
b1 wG
b1 vG
b1 uG
b0 tG
b1 sG
b100 rG
b0 qG
b10000000000000 pG
b0 oG
b0 nG
b1 mG
b101000 lG
b1000 kG
b10000 jG
b0 ^G
b110011 ]G
b10 \G
b110011 PG
b10 OG
b0 NG
b0 IG
b11011 HG
b10 GG
b11011 <G
b10 ;G
b0 :G
b0 5G
b1010 4G
b10 3G
b1010 'G
b10 &G
b0 %G
b0 ~F
b101110 }F
b10 |F
b101110 pF
b10 oF
b0 nF
b0 iF
b11011 hF
b10 gF
b11011 \F
b10 [F
b0 ZF
b10 OF
b10 NF
b10 MF
b10 LF
b10 KF
b0 JF
b110010 DE
b11011 CE
b1010 BE
b101101 AE
b11011 @E
b1 ?E
b1 >E
b1 =E
b1 <E
b0 ;E
b1 :E
b100 9E
b0 8E
b1000000000000 7E
b0 6E
b0 5E
b1 4E
b101000 3E
b1000 2E
b10000 1E
b0 %E
b110011 $E
b10 #E
b110011 uD
b10 tD
b0 sD
b0 nD
b11011 mD
b10 lD
b11011 aD
b10 `D
b0 _D
b0 ZD
b1010 YD
b10 XD
b1010 LD
b10 KD
b0 JD
b0 ED
b101110 DD
b10 CD
b101110 7D
b10 6D
b0 5D
b0 0D
b11011 /D
b10 .D
b11011 #D
b10 "D
b0 !D
b10 tC
b10 sC
b10 rC
b10 qC
b10 pC
b0 oC
b110010 iB
b11011 hB
b1010 gB
b101101 fB
b11011 eB
b1 dB
b1 cB
b1 bB
b1 aB
b0 `B
b1 _B
b100 ^B
b0 ]B
b0 \B
b0 [B
b0 ZB
b1 YB
b101000 XB
b1000 WB
b10000 VB
b0 PB
b110011 OB
b0 IB
b11011 HB
b0 BB
b1010 AB
b0 ;B
b101110 :B
b0 4B
b11011 3B
b100 -B
b0 wA
b0 vA
b0 uA
b0 tA
b100 sA
b0 nA
b100 mA
b1000 lA
b100 ^A
b1000 ]A
b0 \A
b100 VA
b0 BA
b0 AA
b0 @A
b0 ?A
b100 >A
b110010 h@
b11011 g@
b1010 f@
b101101 e@
b11011 d@
b0 c@
b0 b@
b0 a@
b0 `@
b1000000 _@
b110000 ^@
b100000 ]@
b10000 \@
b1 [@
b100 Z@
b101000 Y@
b1000 X@
b11 F@
b0 @@
b110011 ?@
b0 9@
b11011 8@
b0 2@
b1010 1@
b0 +@
b101110 *@
b0 $@
b11011 #@
b100 {?
b0 g?
b0 f?
b0 e?
b0 d?
b100 c?
b0 ^?
b100 ]?
b1000 \?
b100 N?
b1000 M?
b0 L?
b100 F?
b0 2?
b0 1?
b0 0?
b0 /?
b100 .?
b110010 X>
b11011 W>
b1010 V>
b101101 U>
b11011 T>
b0 S>
b0 R>
b0 Q>
b0 P>
b1000000 O>
b110000 N>
b100000 M>
b10000 L>
b1 K>
b100 J>
b101000 I>
b1000 H>
b10 6>
b0 0>
b110011 />
b0 )>
b11011 (>
b0 ">
b1010 !>
b0 y=
b101110 x=
b0 r=
b11011 q=
b100 k=
b0 W=
b0 V=
b0 U=
b0 T=
b100 S=
b0 N=
b100 M=
b1000 L=
b100 >=
b1000 ==
b0 <=
b100 6=
b0 "=
b0 !=
b0 ~<
b0 }<
b100 |<
b110010 H<
b11011 G<
b1010 F<
b101101 E<
b11011 D<
b0 C<
b0 B<
b0 A<
b0 @<
b1000000 ?<
b110000 ><
b100000 =<
b10000 <<
b1 ;<
b100 :<
b101000 9<
b1000 8<
b1 &<
b0 ~;
b110011 };
b0 w;
b11011 v;
b0 p;
b1010 o;
b0 i;
b101110 h;
b0 b;
b11011 a;
b100 [;
b0 G;
b0 F;
b0 E;
b0 D;
b100 C;
b0 >;
b100 =;
b1000 <;
b100 .;
b1000 -;
b0 ,;
b100 &;
b0 p:
b0 o:
b0 n:
b0 m:
b100 l:
b110010 8:
b11011 7:
b1010 6:
b101101 5:
b11011 4:
b0 3:
b0 2:
b0 1:
b0 0:
b1000000 /:
b110000 .:
b100000 -:
b10000 ,:
b1 +:
b100 *:
b101000 ):
b1000 (:
b0 t9
b11 s9
b10 r9
b1 q9
b0 p9
b11 o9
b11 n9
b10 m9
b1 l9
b0 k9
b10 j9
b11 i9
b10 h9
b1 g9
b0 f9
b1 e9
b11 d9
b10 c9
b1 b9
b0 a9
b0 `9
b11 _9
b10 ^9
b1 ]9
b0 \9
b11 [9
b11 Z9
b10 Y9
b1 X9
b0 W9
b10 V9
b11 U9
b10 T9
b1 S9
b0 R9
b1 Q9
b11 P9
b10 O9
b1 N9
b0 M9
b0 L9
b100 F9
b0 29
b0 19
b0 09
b0 /9
b100 .9
b0 )9
b10000 (9
b100 '9
b10000 w8
b100 v8
b0 u8
b100 o8
b0 [8
b0 Z8
b0 Y8
b0 X8
b100 W8
b0 R8
b1000 Q8
b10 P8
b1000 B8
b10 A8
b0 @8
b0 ;8
b100 :8
b1000 98
b100 +8
b1000 *8
b0 )8
b110010 D7
b11011 C7
b1010 B7
b101101 A7
b11011 @7
b11111111111111 ?7
b11000000000000 >7
b10111111111111 =7
b10000000000000 <7
b1111111111111 ;7
b1000000000000 :7
b111111111111 97
b0 87
b1111 77
b1 67
b100 57
b0 47
b1000 37
b10000 27
b0 ,7
b110011 +7
b0 %7
b11011 $7
b0 |6
b1010 {6
b0 u6
b101110 t6
b0 n6
b11011 m6
b11 [6
b100 U6
b0 A6
b0 @6
b0 ?6
b0 >6
b100 =6
b0 86
b10000 76
b100 66
b10000 (6
b100 '6
b0 &6
b100 ~5
b0 j5
b0 i5
b0 h5
b0 g5
b100 f5
b0 a5
b1000 `5
b10 _5
b1000 Q5
b10 P5
b0 O5
b0 J5
b100 I5
b1000 H5
b100 :5
b1000 95
b0 85
b110010 S4
b11011 R4
b1010 Q4
b101101 P4
b11011 O4
b11111111111111 N4
b11000000000000 M4
b10111111111111 L4
b10000000000000 K4
b1111111111111 J4
b1000000000000 I4
b111111111111 H4
b0 G4
b1111 F4
b1 E4
b100 D4
b0 C4
b1000 B4
b10000 A4
b0 ;4
b110011 :4
b0 44
b11011 34
b0 -4
b1010 ,4
b0 &4
b101110 %4
b0 }3
b11011 |3
b10 j3
b100 d3
b0 P3
b0 O3
b0 N3
b0 M3
b100 L3
b0 G3
b10000 F3
b100 E3
b10000 73
b100 63
b0 53
b100 /3
b0 y2
b0 x2
b0 w2
b0 v2
b100 u2
b0 p2
b1000 o2
b10 n2
b1000 `2
b10 _2
b0 ^2
b0 Y2
b100 X2
b1000 W2
b100 I2
b1000 H2
b0 G2
b110010 b1
b11011 a1
b1010 `1
b101101 _1
b11011 ^1
b11111111111111 ]1
b11000000000000 \1
b10111111111111 [1
b10000000000000 Z1
b1111111111111 Y1
b1000000000000 X1
b111111111111 W1
b0 V1
b1111 U1
b1 T1
b100 S1
b0 R1
b1000 Q1
b10000 P1
b0 J1
b110011 I1
b0 C1
b11011 B1
b0 <1
b1010 ;1
b0 51
b101110 41
b0 .1
b11011 -1
b1 y0
b100 s0
b0 _0
b0 ^0
b0 ]0
b0 \0
b100 [0
b0 V0
b10000 U0
b100 T0
b10000 F0
b100 E0
b0 D0
b100 >0
b0 *0
b0 )0
b0 (0
b0 '0
b100 &0
b0 !0
b1000 ~/
b10 }/
b1000 o/
b10 n/
b0 m/
b0 h/
b100 g/
b1000 f/
b100 X/
b1000 W/
b0 V/
b110010 q.
b11011 p.
b1010 o.
b101101 n.
b11011 m.
b11111111111111 l.
b11000000000000 k.
b10111111111111 j.
b10000000000000 i.
b1111111111111 h.
b1000000000000 g.
b111111111111 f.
b0 e.
b1111 d.
b1 c.
b100 b.
b0 a.
b1000 `.
b10000 _.
b0 Y.
b110011 X.
b0 R.
b11011 Q.
b0 K.
b1010 J.
b0 D.
b101110 C.
b0 =.
b11011 <.
b0 *.
b110010 *-
b11011 )-
b1010 (-
b101101 '-
b11011 &-
b11111111111111 %-
b11000000000000 $-
b10111111111111 #-
b10000000000000 "-
b1111111111111 !-
b1000000000000 ~,
b111111111111 },
b0 |,
b0 {,
b0 z,
b0 y,
b0 x,
b1000000 w,
b110000 v,
b100000 u,
b10000 t,
b1111111111111111 s,
b1 r,
b0 q,
b0 p,
b100 o,
b100 n,
b0 m,
b101000 l,
b1000 k,
b10000 j,
b0 b,
b110011 a,
b10 `,
b110011 T,
b10 S,
b0 R,
b0 M,
b11011 L,
b10 K,
b11011 ?,
b10 >,
b0 =,
b0 8,
b1010 7,
b10 6,
b1010 +,
b10 *,
b0 ),
b0 $,
b101110 #,
b10 ",
b101110 t+
b10 s+
b0 r+
b0 m+
b11011 l+
b10 k+
b11011 _+
b10 ^+
b0 ]+
b10 R+
b10 Q+
b10 P+
b10 O+
b10 N+
b0 M+
b110010 &+
b11011 %+
b1010 $+
b101101 #+
b11011 "+
b1 !+
b1 ~*
b1 }*
b1 |*
b0 {*
b1 z*
b100 y*
b0 x*
b0 w*
b1 v*
b100 u*
b101000 t*
b1000 s*
b10000 r*
b0 j*
b110011 i*
b10 h*
b110011 \*
b10 [*
b0 Z*
b0 U*
b11011 T*
b10 S*
b11011 G*
b10 F*
b0 E*
b0 @*
b1010 ?*
b10 >*
b1010 3*
b10 2*
b0 1*
b0 ,*
b101110 +*
b10 **
b101110 |)
b10 {)
b0 z)
b0 u)
b11011 t)
b10 s)
b11011 g)
b10 f)
b0 e)
b10 Z)
b10 Y)
b10 X)
b10 W)
b10 V)
b0 U)
b110010 .)
b11011 -)
b1010 ,)
b101101 +)
b11011 *)
b1 ))
b1 ()
b1 ')
b1 &)
b0 %)
b1 $)
b100 #)
b0 ")
b0 !)
b1 ~(
b100 }(
b101000 |(
b1000 {(
b10000 z(
b0 r(
b110011 q(
b10 p(
b110011 d(
b10 c(
b0 b(
b0 ](
b11011 \(
b10 [(
b11011 O(
b10 N(
b0 M(
b0 H(
b1010 G(
b10 F(
b1010 ;(
b10 :(
b0 9(
b0 4(
b101110 3(
b10 2(
b101110 &(
b10 %(
b0 $(
b0 }'
b11011 |'
b10 {'
b11011 o'
b10 n'
b0 m'
b10 b'
b10 a'
b10 `'
b10 _'
b10 ^'
b0 ]'
b110010 6'
b11011 5'
b1010 4'
b101101 3'
b11011 2'
b1 1'
b1 0'
b1 /'
b1 .'
b0 -'
b1 ,'
b100 +'
b0 *'
b0 )'
b1 ('
b100 ''
b101000 &'
b1000 %'
b10000 $'
b0 z&
b110011 y&
b10 x&
b110011 l&
b10 k&
b0 j&
b0 e&
b11011 d&
b10 c&
b11011 W&
b10 V&
b0 U&
b0 P&
b1010 O&
b10 N&
b1010 C&
b10 B&
b0 A&
b0 <&
b101110 ;&
b10 :&
b101110 .&
b10 -&
b0 ,&
b0 '&
b11011 &&
b10 %&
b11011 v%
b10 u%
b0 t%
b10 i%
b10 h%
b10 g%
b10 f%
b10 e%
b0 d%
b110010 =%
b11011 <%
b1010 ;%
b101101 :%
b11011 9%
b1 8%
b1 7%
b1 6%
b1 5%
b0 4%
b1 3%
b100 2%
b0 1%
b0 0%
b1 /%
b100 .%
b101000 -%
b1000 ,%
b10000 +%
b1111111111111111 f$
b110010 e$
b11011 d$
b1010 c$
b101101 b$
b11011 a$
b0 `$
b0 _$
b0 ^$
b0 ]$
b0 d"
b1 c"
b100 b"
b11111111111111 a"
b11000000000000 `"
b0 _"
b0 ^"
b1 ]"
b100 \"
b10111111111111 ["
b10000000000000 Z"
b0 Y"
b0 X"
b1 W"
b100 V"
b1111111111111 U"
b1000000000000 T"
b0 S"
b0 R"
b1 Q"
b100 P"
b111111111111 O"
b0 N"
b0 M"
b0 L"
b1000000 K"
b1111 J"
b0 I"
b1 H"
b100 G"
b0 F"
b0 E"
b110000 D"
b1111 C"
b0 B"
b1 A"
b100 @"
b0 ?"
b0 >"
b100000 ="
b1111 <"
b0 ;"
b1 :"
b100 9"
b0 8"
b0 7"
b10000 6"
b1111 5"
b0 4"
b1 3"
b100 2"
b0 1"
b1 0"
b10011100010000 /"
b1 ."
b1 -"
b1 ,"
b1 +"
b0 *"
b0 )"
b1 ("
b0 '"
b0 &"
b100 %"
b100 $"
b101000 #"
b1000 ""
b10000 !"
b0 _
b100 ^
b11111111111111 ]
b11000000000000 \
b0 [
b0 Z
b100 Y
b10111111111111 X
b10000000000000 W
b0 V
b0 U
b100 T
b1111111111111 S
b1000000000000 R
b0 Q
b0 P
b100 O
b111111111111 N
b0 M
b0 L
b0 K
b1000000 J
b1111 I
b0 H
b100 G
b0 F
b0 E
b110000 D
b1111 C
b0 B
b100 A
b0 @
b0 ?
b100000 >
b1111 =
b0 <
b100 ;
b0 :
b0 9
b10000 8
b1111 7
b0 6
b100 5
b0 4
b1 3
b10011100010000 2
b1 1
b1 0
b1 /
b1 .
b0 -
b1 ,
b0 +
b0 *
b100 )
b100 (
b101000 '
b1000 &
b10000 %
0!
0"
0#
0$
0`
1a
0b
0c
1d
0e
xf
b0 g
b0 h
b0 i
xj
b0 k
b0 l
xm
bx n
bx o
xp
xq
xr
bx s
bx t
bx u
xv
xw
xx
xy
bx z
bx {
x|
x}
x~
bx !!
bx "!
bx #!
x$!
x%!
x&!
x'!
bx (!
bx )!
x*!
x+!
x,!
bx -!
bx .!
bx /!
x0!
x1!
x2!
x3!
bx 4!
bx 5!
x6!
x7!
x8!
bx 9!
bx :!
bx ;!
x<!
0=!
x>!
bx ?!
bx @!
bx A!
xB!
xC!
bx D!
b0xxxx E!
xF!
xG!
b0 H!
xI!
bx J!
bx K!
bx L!
xM!
xN!
xO!
bx P!
bx Q!
bx R!
xS!
xT!
bx U!
b0xxxx V!
xW!
xX!
xY!
bx Z!
bx [!
bx \!
x]!
x^!
x_!
bx `!
bx a!
bx b!
xc!
xd!
bx e!
b0xxxx f!
xg!
xh!
xi!
bx j!
bx k!
bx l!
xm!
xn!
xo!
bx p!
bx q!
bx r!
xs!
xt!
bx u!
b0xxxx v!
xw!
xx!
xy!
bx z!
bx {!
bx |!
x}!
x~!
xe"
b0 f"
b0 g"
b0 h"
b0 i"
xj"
xk"
bx l"
bx m"
xn"
xo"
xp"
bx q"
bx r"
bx s"
xt"
xu"
xv"
xw"
xx"
bx y"
bx z"
x{"
x|"
x}"
bx ~"
bx !#
bx "#
x##
x$#
x%#
x&#
x'#
bx (#
bx )#
x*#
x+#
x,#
bx -#
bx .#
bx /#
x0#
x1#
x2#
x3#
x4#
bx 5#
bx 6#
x7#
x8#
x9#
bx :#
bx ;#
bx <#
x=#
x>#
x?#
bx @#
bx A#
bx B#
bx C#
bx D#
bx E#
bx F#
bx G#
bx H#
bx I#
xJ#
xK#
xL#
bx M#
b0xxxx N#
xO#
xP#
xQ#
bx R#
bx S#
bx T#
bx U#
bx V#
bx W#
bx X#
bx Y#
bx Z#
bx [#
x\#
x]#
x^#
bx _#
bx `#
bx a#
bx b#
bx c#
bx d#
bx e#
bx f#
bx g#
bx h#
xi#
xj#
xk#
bx l#
b0xxxx m#
xn#
xo#
xp#
bx q#
bx r#
bx s#
bx t#
bx u#
bx v#
bx w#
bx x#
bx y#
bx z#
x{#
x|#
x}#
bx ~#
bx !$
bx "$
bx #$
bx $$
bx %$
bx &$
bx '$
bx ($
bx )$
x*$
x+$
x,$
bx -$
b0xxxx .$
x/$
x0$
x1$
bx 2$
bx 3$
bx 4$
bx 5$
bx 6$
bx 7$
bx 8$
bx 9$
bx :$
bx ;$
x<$
x=$
x>$
bx ?$
bx @$
bx A$
bx B$
bx C$
bx D$
bx E$
bx F$
bx G$
bx H$
xI$
xJ$
xK$
bx L$
b0xxxx M$
xN$
xO$
xP$
bx Q$
bx R$
bx S$
bx T$
bx U$
bx V$
bx W$
bx X$
bx Y$
bx Z$
x[$
x\$
bx g$
bx h$
bx i$
bx j$
bx k$
bx l$
bx m$
bx n$
bx o$
bx p$
bx q$
bx r$
bx s$
bx t$
bx u$
bx v$
bx w$
bx x$
bx y$
bx z$
bx {$
bx |$
bx }$
bx ~$
bx !%
bx "%
bx #%
bx $%
bx %%
bx &%
bx '%
bx (%
bx )%
bx *%
x>%
x?%
x@%
bx A%
bx B%
xC%
xD%
xE%
bx F%
bx G%
bx H%
xI%
xJ%
xK%
xL%
bx M%
xN%
xO%
xP%
bx Q%
xR%
xS%
bx T%
xU%
xV%
bx W%
xX%
xY%
xZ%
bx [%
b0 \%
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ]%
bx ^%
b0 _%
bx `%
1a%
bx b%
xc%
xj%
xk%
xl%
xm%
xn%
xo%
xp%
xq%
xr%
xs%
0w%
b0 x%
xy%
bx z%
x{%
0|%
bx }%
bx ~%
x!&
x"&
0#&
bx $&
0(&
bx )&
bx *&
bx +&
b100000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /&
x0&
bx 1&
x2&
x3&
bx 4&
bx 5&
x6&
x7&
08&
bx 9&
x=&
bx >&
bx ?&
bx @&
xD&
bx E&
xF&
xG&
bx H&
bx I&
xJ&
xK&
0L&
bx M&
xQ&
bx R&
bx S&
bx T&
b0 X&
xY&
bx Z&
x[&
0\&
bx ]&
bx ^&
x_&
x`&
0a&
bx b&
0f&
bx g&
bx h&
bx i&
bx m&
xn&
bx o&
xp&
xq&
bx r&
bx s&
xt&
xu&
0v&
bx w&
x{&
bx |&
bx }&
bx ~&
x!'
bx "'
b0 #'
x7'
x8'
x9'
bx :'
bx ;'
x<'
x='
x>'
bx ?'
bx @'
bx A'
xB'
xC'
xD'
xE'
bx F'
xG'
xH'
xI'
bx J'
xK'
xL'
bx M'
xN'
xO'
bx P'
xQ'
xR'
xS'
bx T'
b0 U'
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx V'
bx W'
b0 X'
bx Y'
1Z'
bx ['
x\'
xc'
xd'
xe'
xf'
xg'
xh'
xi'
xj'
xk'
xl'
b0 p'
xq'
bx r'
xs'
0t'
bx u'
bx v'
xw'
xx'
0y'
bx z'
0~'
bx !(
bx "(
bx #(
b100000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '(
x((
bx )(
x*(
x+(
bx ,(
bx -(
x.(
x/(
00(
bx 1(
x5(
bx 6(
bx 7(
bx 8(
x<(
bx =(
x>(
x?(
bx @(
bx A(
xB(
xC(
0D(
bx E(
xI(
bx J(
bx K(
bx L(
b0 P(
xQ(
bx R(
xS(
0T(
bx U(
bx V(
xW(
xX(
0Y(
bx Z(
0^(
bx _(
bx `(
bx a(
bx e(
xf(
bx g(
xh(
xi(
bx j(
bx k(
xl(
xm(
0n(
bx o(
xs(
bx t(
bx u(
bx v(
xw(
bx x(
b0 y(
x/)
x0)
x1)
bx 2)
bx 3)
x4)
x5)
x6)
bx 7)
bx 8)
bx 9)
x:)
x;)
x<)
x=)
bx >)
x?)
x@)
xA)
bx B)
xC)
xD)
bx E)
xF)
xG)
bx H)
xI)
xJ)
xK)
bx L)
b0 M)
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx N)
bx O)
b0 P)
bx Q)
1R)
bx S)
xT)
x[)
x\)
x])
x^)
x_)
x`)
xa)
xb)
xc)
xd)
b0 h)
xi)
bx j)
xk)
0l)
bx m)
bx n)
xo)
xp)
0q)
bx r)
0v)
bx w)
bx x)
bx y)
b100000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx })
x~)
bx !*
x"*
x#*
bx $*
bx %*
x&*
x'*
0(*
bx )*
x-*
bx .*
bx /*
bx 0*
x4*
bx 5*
x6*
x7*
bx 8*
bx 9*
x:*
x;*
0<*
bx =*
xA*
bx B*
bx C*
bx D*
b0 H*
xI*
bx J*
xK*
0L*
bx M*
bx N*
xO*
xP*
0Q*
bx R*
0V*
bx W*
bx X*
bx Y*
bx ]*
x^*
bx _*
x`*
xa*
bx b*
bx c*
xd*
xe*
0f*
bx g*
xk*
bx l*
bx m*
bx n*
xo*
bx p*
b0 q*
x'+
x(+
x)+
bx *+
bx ++
x,+
x-+
x.+
bx /+
bx 0+
bx 1+
x2+
x3+
x4+
x5+
bx 6+
x7+
x8+
x9+
bx :+
x;+
x<+
bx =+
x>+
x?+
bx @+
xA+
xB+
xC+
bx D+
b0 E+
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx F+
bx G+
b0 H+
bx I+
1J+
bx K+
xL+
xS+
xT+
xU+
xV+
xW+
xX+
xY+
xZ+
x[+
x\+
b0 `+
xa+
bx b+
xc+
0d+
bx e+
bx f+
xg+
xh+
0i+
bx j+
0n+
bx o+
bx p+
bx q+
b100000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx u+
xv+
bx w+
xx+
xy+
bx z+
bx {+
x|+
x}+
0~+
bx !,
x%,
bx &,
bx ',
bx (,
x,,
bx -,
x.,
x/,
bx 0,
bx 1,
x2,
x3,
04,
bx 5,
x9,
bx :,
bx ;,
bx <,
b0 @,
xA,
bx B,
xC,
0D,
bx E,
bx F,
xG,
xH,
0I,
bx J,
0N,
bx O,
bx P,
bx Q,
bx U,
xV,
bx W,
xX,
xY,
bx Z,
bx [,
x\,
x],
0^,
bx _,
xc,
bx d,
bx e,
bx f,
xg,
bx h,
b0 i,
x+-
x,-
x--
x.-
bx /-
bx 0-
x1-
x2-
x3-
x4-
bx 5-
bx 6-
bx 7-
bx 8-
x9-
x:-
x;-
x<-
bx =-
x>-
x?-
x@-
xA-
bx B-
bx C-
bx D-
xE-
xF-
xG-
xH-
bx I-
bx J-
bx K-
xL-
xM-
xN-
xO-
bx P-
bx Q-
xR-
xS-
xT-
xU-
bx V-
bx W-
xX-
xY-
xZ-
x[-
bx \-
bx ]-
bx ^-
x_-
x`-
xa-
xb-
bx c-
xd-
xe-
xf-
xg-
bx h-
bx i-
bx j-
bx k-
bx l-
bx m-
bx n-
bx o-
bx p-
bx q-
bx r-
bx s-
bx t-
bx u-
bx v-
bx w-
bx x-
bx y-
bx z-
bx {-
bx |-
bx }-
bx ~-
bx !.
bx ".
bx #.
bx $.
bx %.
bx &.
bx '.
bx (.
bx ).
x+.
x,.
bx -.
x..
x/.
x0.
bx 1.
x2.
x3.
bx 4.
x5.
x6.
bx 7.
x8.
x9.
x:.
bx ;.
x>.
bx ?.
x@.
xA.
bx B.
xE.
bx F.
xG.
xH.
bx I.
xL.
xM.
bx N.
xO.
bx P.
xS.
bx T.
xU.
xV.
bx W.
xZ.
x[.
bx \.
x].
bx ^.
xr.
xs.
bx t.
xu.
xv.
xw.
bx x.
xy.
xz.
bx {.
x|.
x}.
bx ~.
x!/
x"/
x#/
bx $/
bx %/
bx &/
bx '/
bx (/
bx )/
bx */
bx +/
bx ,/
bx -/
bx ./
bx //
bx 0/
bx 1/
bx 2/
bx 3/
bx 4/
bx 5/
x6/
x7/
bx 8/
bx 9/
bx :/
x;/
bx </
bx =/
x>/
bx ?/
bx @/
b0 A/
b111111111111 B/
b1000000000000 C/
b1111111111111 D/
b10000000000000 E/
b10111111111111 F/
b11000000000000 G/
b11111111111111 H/
xI/
xJ/
xK/
xL/
bx M/
xN/
xO/
b0xxxxxxxx P/
bx Q/
bx R/
bx S/
xT/
b1111 U/
bx Y/
xZ/
x[/
bx \/
x]/
x^/
x_/
bx `/
bx a/
xb/
xc/
0d/
bx e/
xi/
bx j/
bx k/
bx l/
bx p/
xq/
xr/
bx s/
xt/
xu/
xv/
bx w/
bx x/
xy/
xz/
0{/
bx |/
x"0
bx #0
bx $0
bx %0
x+0
bx ,0
bx -0
x.0
0/0
000
010
bx 20
b0 30
b0 40
b0 50
bx 60
b0 70
b0 80
b0 90
0:0
0;0
0<0
0=0
x?0
bx @0
bx A0
bx B0
bx C0
b0xxxxxxxx G0
xH0
xI0
bx J0
xK0
xL0
xM0
bx N0
bx O0
xP0
xQ0
0R0
bx S0
xW0
bx X0
bx Y0
bx Z0
x`0
bx a0
bx b0
xc0
0d0
0e0
0f0
bx g0
b0 h0
b0 i0
b0 j0
bx k0
b0 l0
b0 m0
b0 n0
0o0
0p0
0q0
0r0
xt0
bx u0
bx v0
bx w0
bx x0
xz0
x{0
bx |0
x}0
x~0
x!1
bx "1
x#1
x$1
bx %1
x&1
x'1
bx (1
x)1
x*1
x+1
bx ,1
x/1
bx 01
x11
x21
bx 31
x61
bx 71
x81
x91
bx :1
x=1
x>1
bx ?1
x@1
bx A1
xD1
bx E1
xF1
xG1
bx H1
xK1
xL1
bx M1
xN1
bx O1
xc1
xd1
bx e1
xf1
xg1
xh1
bx i1
xj1
xk1
bx l1
xm1
xn1
bx o1
xp1
xq1
xr1
bx s1
bx t1
bx u1
bx v1
bx w1
bx x1
bx y1
bx z1
bx {1
bx |1
bx }1
bx ~1
bx !2
bx "2
bx #2
bx $2
bx %2
bx &2
x'2
x(2
bx )2
bx *2
bx +2
x,2
bx -2
bx .2
x/2
bx 02
bx 12
b0 22
b111111111111 32
b1000000000000 42
b1111111111111 52
b10000000000000 62
b10111111111111 72
b11000000000000 82
b11111111111111 92
x:2
x;2
x<2
x=2
bx >2
x?2
x@2
b0xxxxxxxx A2
bx B2
bx C2
bx D2
xE2
b1111 F2
bx J2
xK2
xL2
bx M2
xN2
xO2
xP2
bx Q2
bx R2
xS2
xT2
0U2
bx V2
xZ2
bx [2
bx \2
bx ]2
bx a2
xb2
xc2
bx d2
xe2
xf2
xg2
bx h2
bx i2
xj2
xk2
0l2
bx m2
xq2
bx r2
bx s2
bx t2
xz2
bx {2
bx |2
x}2
0~2
0!3
0"3
bx #3
b0 $3
b0 %3
b0 &3
bx '3
b0 (3
b0 )3
b0 *3
0+3
0,3
0-3
0.3
x03
bx 13
bx 23
bx 33
bx 43
b0xxxxxxxx 83
x93
x:3
bx ;3
x<3
x=3
x>3
bx ?3
bx @3
xA3
xB3
0C3
bx D3
xH3
bx I3
bx J3
bx K3
xQ3
bx R3
bx S3
xT3
0U3
0V3
0W3
bx X3
b0 Y3
b0 Z3
b0 [3
bx \3
b0 ]3
b0 ^3
b0 _3
0`3
0a3
0b3
0c3
xe3
bx f3
bx g3
bx h3
bx i3
xk3
xl3
bx m3
xn3
xo3
xp3
bx q3
xr3
xs3
bx t3
xu3
xv3
bx w3
xx3
xy3
xz3
bx {3
x~3
bx !4
x"4
x#4
bx $4
x'4
bx (4
x)4
x*4
bx +4
x.4
x/4
bx 04
x14
bx 24
x54
bx 64
x74
x84
bx 94
x<4
x=4
bx >4
x?4
bx @4
xT4
xU4
bx V4
xW4
xX4
xY4
bx Z4
x[4
x\4
bx ]4
x^4
x_4
bx `4
xa4
xb4
xc4
bx d4
bx e4
bx f4
bx g4
bx h4
bx i4
bx j4
bx k4
bx l4
bx m4
bx n4
bx o4
bx p4
bx q4
bx r4
bx s4
bx t4
bx u4
xv4
xw4
bx x4
bx y4
bx z4
x{4
bx |4
bx }4
x~4
bx !5
bx "5
b0 #5
b111111111111 $5
b1000000000000 %5
b1111111111111 &5
b10000000000000 '5
b10111111111111 (5
b11000000000000 )5
b11111111111111 *5
x+5
x,5
x-5
x.5
bx /5
x05
x15
b0xxxxxxxx 25
bx 35
bx 45
bx 55
x65
b1111 75
bx ;5
x<5
x=5
bx >5
x?5
x@5
xA5
bx B5
bx C5
xD5
xE5
0F5
bx G5
xK5
bx L5
bx M5
bx N5
bx R5
xS5
xT5
bx U5
xV5
xW5
xX5
bx Y5
bx Z5
x[5
x\5
0]5
bx ^5
xb5
bx c5
bx d5
bx e5
xk5
bx l5
bx m5
xn5
0o5
0p5
0q5
bx r5
b0 s5
b0 t5
b0 u5
bx v5
b0 w5
b0 x5
b0 y5
0z5
0{5
0|5
0}5
x!6
bx "6
bx #6
bx $6
bx %6
b0xxxxxxxx )6
x*6
x+6
bx ,6
x-6
x.6
x/6
bx 06
bx 16
x26
x36
046
bx 56
x96
bx :6
bx ;6
bx <6
xB6
bx C6
bx D6
xE6
0F6
0G6
0H6
bx I6
b0 J6
b0 K6
b0 L6
bx M6
b0 N6
b0 O6
b0 P6
0Q6
0R6
0S6
0T6
xV6
bx W6
bx X6
bx Y6
bx Z6
x\6
x]6
bx ^6
x_6
x`6
xa6
bx b6
xc6
xd6
bx e6
xf6
xg6
bx h6
xi6
xj6
xk6
bx l6
xo6
bx p6
xq6
xr6
bx s6
xv6
bx w6
xx6
xy6
bx z6
x}6
x~6
bx !7
x"7
bx #7
x&7
bx '7
x(7
x)7
bx *7
x-7
x.7
bx /7
x07
bx 17
xE7
xF7
bx G7
xH7
xI7
xJ7
bx K7
xL7
xM7
bx N7
xO7
xP7
bx Q7
xR7
xS7
xT7
bx U7
bx V7
bx W7
bx X7
bx Y7
bx Z7
bx [7
bx \7
bx ]7
bx ^7
bx _7
bx `7
bx a7
bx b7
bx c7
bx d7
bx e7
bx f7
xg7
xh7
bx i7
bx j7
bx k7
xl7
bx m7
bx n7
xo7
bx p7
bx q7
b0 r7
b111111111111 s7
b1000000000000 t7
b1111111111111 u7
b10000000000000 v7
b10111111111111 w7
b11000000000000 x7
b11111111111111 y7
xz7
x{7
x|7
x}7
bx ~7
x!8
x"8
b0xxxxxxxx #8
bx $8
bx %8
bx &8
x'8
b1111 (8
bx ,8
x-8
x.8
bx /8
x08
x18
x28
bx 38
bx 48
x58
x68
078
bx 88
x<8
bx =8
bx >8
bx ?8
bx C8
xD8
xE8
bx F8
xG8
xH8
xI8
bx J8
bx K8
xL8
xM8
0N8
bx O8
xS8
bx T8
bx U8
bx V8
x\8
bx ]8
bx ^8
x_8
0`8
0a8
0b8
bx c8
b0 d8
b0 e8
b0 f8
bx g8
b0 h8
b0 i8
b0 j8
0k8
0l8
0m8
0n8
xp8
bx q8
bx r8
bx s8
bx t8
b0xxxxxxxx x8
xy8
xz8
bx {8
x|8
x}8
x~8
bx !9
bx "9
x#9
x$9
0%9
bx &9
x*9
bx +9
bx ,9
bx -9
x39
bx 49
bx 59
x69
079
089
099
bx :9
b0 ;9
b0 <9
b0 =9
bx >9
b0 ?9
b0 @9
b0 A9
0B9
0C9
0D9
0E9
xG9
bx H9
bx I9
bx J9
bx K9
xu9
xv9
bx w9
xx9
xy9
xz9
bx {9
x|9
x}9
bx ~9
x!:
x":
bx #:
x$:
x%:
x&:
bx ':
bx 9:
bx ::
bx ;:
bx <:
bx =:
bx >:
bx ?:
bx @:
bx A:
bx B:
bx C:
bx D:
bx E:
bx F:
bx G:
bx H:
bx I:
xJ:
xK:
bx L:
xM:
xN:
xO:
bx P:
xQ:
xR:
bx S:
xT:
xU:
bx V:
xW:
xX:
xY:
bx Z:
x[:
bx \:
bx ]:
bx ^:
x_:
bx `:
bx a:
xb:
xc:
xd:
xe:
xf:
xg:
xh:
xi:
xj:
xk:
xq:
bx r:
bx s:
xt:
0u:
0v:
0w:
bx x:
b0 y:
b0 z:
b0 {:
bx |:
b0 }:
b0 ~:
b0 !;
0";
0#;
0$;
0%;
x';
bx (;
bx );
bx *;
bx +;
bx /;
x0;
x1;
bx 2;
x3;
x4;
x5;
bx 6;
bx 7;
x8;
x9;
0:;
bx ;;
x?;
bx @;
bx A;
bx B;
xH;
bx I;
bx J;
xK;
0L;
0M;
0N;
bx O;
b0 P;
b0 Q;
b0 R;
bx S;
b0 T;
b0 U;
b0 V;
0W;
0X;
0Y;
0Z;
x\;
bx ];
bx ^;
bx _;
bx `;
xc;
xd;
bx e;
xf;
bx g;
xj;
xk;
bx l;
xm;
bx n;
xq;
bx r;
xs;
xt;
bx u;
xx;
xy;
bx z;
x{;
bx |;
x!<
bx "<
x#<
x$<
bx %<
x'<
x(<
bx )<
x*<
x+<
x,<
bx -<
x.<
x/<
bx 0<
x1<
x2<
bx 3<
x4<
x5<
x6<
bx 7<
bx I<
bx J<
bx K<
bx L<
bx M<
bx N<
bx O<
bx P<
bx Q<
bx R<
bx S<
bx T<
bx U<
bx V<
bx W<
bx X<
bx Y<
xZ<
x[<
bx \<
x]<
x^<
x_<
bx `<
xa<
xb<
bx c<
xd<
xe<
bx f<
xg<
xh<
xi<
bx j<
xk<
bx l<
bx m<
bx n<
xo<
bx p<
bx q<
xr<
xs<
xt<
xu<
xv<
xw<
xx<
xy<
xz<
x{<
x#=
bx $=
bx %=
x&=
0'=
0(=
0)=
bx *=
b0 +=
b0 ,=
b0 -=
bx .=
b0 /=
b0 0=
b0 1=
02=
03=
04=
05=
x7=
bx 8=
bx 9=
bx :=
bx ;=
bx ?=
x@=
xA=
bx B=
xC=
xD=
xE=
bx F=
bx G=
xH=
xI=
0J=
bx K=
xO=
bx P=
bx Q=
bx R=
xX=
bx Y=
bx Z=
x[=
0\=
0]=
0^=
bx _=
b0 `=
b0 a=
b0 b=
bx c=
b0 d=
b0 e=
b0 f=
0g=
0h=
0i=
0j=
xl=
bx m=
bx n=
bx o=
bx p=
xs=
xt=
bx u=
xv=
bx w=
xz=
x{=
bx |=
x}=
bx ~=
x#>
bx $>
x%>
x&>
bx '>
x*>
x+>
bx ,>
x->
bx .>
x1>
bx 2>
x3>
x4>
bx 5>
x7>
x8>
bx 9>
x:>
x;>
x<>
bx =>
x>>
x?>
bx @>
xA>
xB>
bx C>
xD>
xE>
xF>
bx G>
bx Y>
bx Z>
bx [>
bx \>
bx ]>
bx ^>
bx _>
bx `>
bx a>
bx b>
bx c>
bx d>
bx e>
bx f>
bx g>
bx h>
bx i>
xj>
xk>
bx l>
xm>
xn>
xo>
bx p>
xq>
xr>
bx s>
xt>
xu>
bx v>
xw>
xx>
xy>
bx z>
x{>
bx |>
bx }>
bx ~>
x!?
bx "?
bx #?
x$?
x%?
x&?
x'?
x(?
x)?
x*?
x+?
x,?
x-?
x3?
bx 4?
bx 5?
x6?
07?
08?
09?
bx :?
b0 ;?
b0 <?
b0 =?
bx >?
b0 ??
b0 @?
b0 A?
0B?
0C?
0D?
0E?
xG?
bx H?
bx I?
bx J?
bx K?
bx O?
xP?
xQ?
bx R?
xS?
xT?
xU?
bx V?
bx W?
xX?
xY?
0Z?
bx [?
x_?
bx `?
bx a?
bx b?
xh?
bx i?
bx j?
xk?
0l?
0m?
0n?
bx o?
b0 p?
b0 q?
b0 r?
bx s?
b0 t?
b0 u?
b0 v?
0w?
0x?
0y?
0z?
x|?
bx }?
bx ~?
bx !@
bx "@
x%@
x&@
bx '@
x(@
bx )@
x,@
x-@
bx .@
x/@
bx 0@
x3@
bx 4@
x5@
x6@
bx 7@
x:@
x;@
bx <@
x=@
bx >@
xA@
bx B@
xC@
xD@
bx E@
xG@
xH@
bx I@
xJ@
xK@
xL@
bx M@
xN@
xO@
bx P@
xQ@
xR@
bx S@
xT@
xU@
xV@
bx W@
bx i@
bx j@
bx k@
bx l@
bx m@
bx n@
bx o@
bx p@
bx q@
bx r@
bx s@
bx t@
bx u@
bx v@
bx w@
bx x@
bx y@
xz@
x{@
bx |@
x}@
x~@
x!A
bx "A
x#A
x$A
bx %A
x&A
x'A
bx (A
x)A
x*A
x+A
bx ,A
x-A
bx .A
bx /A
bx 0A
x1A
bx 2A
bx 3A
x4A
x5A
x6A
x7A
x8A
x9A
x:A
x;A
x<A
x=A
xCA
bx DA
bx EA
xFA
0GA
0HA
0IA
bx JA
b0 KA
b0 LA
b0 MA
bx NA
b0 OA
b0 PA
b0 QA
0RA
0SA
0TA
0UA
xWA
bx XA
bx YA
bx ZA
bx [A
bx _A
x`A
xaA
bx bA
xcA
xdA
xeA
bx fA
bx gA
xhA
xiA
0jA
bx kA
xoA
bx pA
bx qA
bx rA
xxA
bx yA
bx zA
x{A
0|A
0}A
0~A
bx !B
b0 "B
b0 #B
b0 $B
bx %B
b0 &B
b0 'B
b0 (B
0)B
0*B
0+B
0,B
x.B
bx /B
bx 0B
bx 1B
bx 2B
x5B
x6B
bx 7B
x8B
bx 9B
x<B
x=B
bx >B
x?B
bx @B
xCB
bx DB
xEB
xFB
bx GB
xJB
xKB
bx LB
xMB
bx NB
xQB
bx RB
xSB
xTB
bx UB
xjB
xkB
bx lB
xmB
xnB
xoB
bx pB
xqB
xrB
bx sB
xtB
xuB
bx vB
xwB
xxB
xyB
bx zB
x{B
bx |B
bx }B
bx ~B
bx !C
bx "C
bx #C
bx $C
bx %C
bx &C
bx 'C
x(C
x)C
x*C
bx +C
b0xxxx ,C
x-C
x.C
x/C
bx 0C
bx 1C
bx 2C
bx 3C
bx 4C
bx 5C
bx 6C
bx 7C
bx 8C
bx 9C
x:C
x;C
bx <C
bx =C
b0 >C
bx ?C
b0 @C
1AC
bx BC
bx CC
xDC
xEC
xFC
xGC
xHC
xIC
xJC
xKC
xLC
xMC
xNC
xOC
xPC
xQC
xRC
xSC
xTC
xUC
xVC
xWC
xXC
xYC
xZC
x[C
x\C
x]C
x^C
x_C
x`C
xaC
xbC
xcC
xdC
xeC
xfC
xgC
xhC
xiC
xjC
xkC
xlC
xmC
bx nC
xuC
xvC
xwC
xxC
xyC
xzC
x{C
x|C
x}C
x~C
x$D
bx %D
x&D
x'D
bx (D
bx )D
x*D
x+D
0,D
bx -D
x1D
bx 2D
bx 3D
bx 4D
bx 8D
x9D
bx :D
x;D
x<D
bx =D
bx >D
x?D
x@D
0AD
bx BD
xFD
bx GD
bx HD
bx ID
b0 MD
xND
bx OD
xPD
0QD
bx RD
bx SD
xTD
xUD
0VD
bx WD
0[D
bx \D
bx ]D
bx ^D
xbD
bx cD
xdD
xeD
bx fD
bx gD
xhD
xiD
0jD
bx kD
xoD
bx pD
bx qD
bx rD
b100000000000000000000000000000000000000000000000000 vD
xwD
bx xD
xyD
0zD
bx {D
bx |D
x}D
x~D
0!E
bx "E
0&E
bx 'E
bx (E
bx )E
x*E
x+E
x,E
bx -E
bx .E
bx /E
bx 0E
xEE
xFE
bx GE
xHE
xIE
xJE
bx KE
xLE
xME
bx NE
xOE
xPE
bx QE
xRE
xSE
xTE
bx UE
xVE
bx WE
bx XE
bx YE
bx ZE
bx [E
bx \E
bx ]E
bx ^E
bx _E
bx `E
xaE
xbE
xcE
bx dE
b0xxxx eE
xfE
xgE
xhE
bx iE
bx jE
bx kE
bx lE
bx mE
bx nE
bx oE
bx pE
bx qE
bx rE
xsE
xtE
bx uE
bx vE
b0 wE
bx xE
b0 yE
1zE
bx {E
bx |E
x}E
x~E
x!F
x"F
x#F
x$F
x%F
x&F
x'F
x(F
x)F
x*F
x+F
x,F
x-F
x.F
x/F
x0F
x1F
x2F
x3F
x4F
x5F
x6F
x7F
x8F
x9F
x:F
x;F
x<F
x=F
x>F
x?F
x@F
xAF
xBF
xCF
xDF
xEF
xFF
xGF
xHF
bx IF
xPF
xQF
xRF
xSF
xTF
xUF
xVF
xWF
xXF
xYF
x]F
bx ^F
x_F
x`F
bx aF
bx bF
xcF
xdF
0eF
bx fF
xjF
bx kF
bx lF
bx mF
bx qF
xrF
bx sF
xtF
xuF
bx vF
bx wF
xxF
xyF
0zF
bx {F
x!G
bx "G
bx #G
bx $G
b0 (G
x)G
bx *G
x+G
0,G
bx -G
bx .G
x/G
x0G
01G
bx 2G
06G
bx 7G
bx 8G
bx 9G
x=G
bx >G
x?G
x@G
bx AG
bx BG
xCG
xDG
0EG
bx FG
xJG
bx KG
bx LG
bx MG
b100000000000000000000000000000000000000000000000000 QG
xRG
bx SG
xTG
0UG
bx VG
bx WG
xXG
xYG
0ZG
bx [G
0_G
bx `G
bx aG
bx bG
xcG
xdG
xeG
bx fG
bx gG
bx hG
bx iG
x~G
x!H
bx "H
x#H
x$H
x%H
bx &H
x'H
x(H
bx )H
x*H
x+H
bx ,H
x-H
x.H
x/H
bx 0H
x1H
bx 2H
bx 3H
bx 4H
bx 5H
bx 6H
bx 7H
bx 8H
bx 9H
bx :H
bx ;H
x<H
x=H
x>H
bx ?H
b0xxxx @H
xAH
xBH
xCH
bx DH
bx EH
bx FH
bx GH
bx HH
bx IH
bx JH
bx KH
bx LH
bx MH
xNH
xOH
bx PH
bx QH
b0 RH
bx SH
b0 TH
1UH
bx VH
bx WH
xXH
xYH
xZH
x[H
x\H
x]H
x^H
x_H
x`H
xaH
xbH
xcH
xdH
xeH
xfH
xgH
xhH
xiH
xjH
xkH
xlH
xmH
xnH
xoH
xpH
xqH
xrH
xsH
xtH
xuH
xvH
xwH
xxH
xyH
xzH
x{H
x|H
x}H
x~H
x!I
x"I
x#I
bx $I
x+I
x,I
x-I
x.I
x/I
x0I
x1I
x2I
x3I
x4I
x8I
bx 9I
x:I
x;I
bx <I
bx =I
x>I
x?I
0@I
bx AI
xEI
bx FI
bx GI
bx HI
bx LI
xMI
bx NI
xOI
xPI
bx QI
bx RI
xSI
xTI
0UI
bx VI
xZI
bx [I
bx \I
bx ]I
b0 aI
xbI
bx cI
xdI
0eI
bx fI
bx gI
xhI
xiI
0jI
bx kI
0oI
bx pI
bx qI
bx rI
xvI
bx wI
xxI
xyI
bx zI
bx {I
x|I
x}I
0~I
bx !J
x%J
bx &J
bx 'J
bx (J
b100000000000000000000000000000000000000000000000000 ,J
x-J
bx .J
x/J
00J
bx 1J
bx 2J
x3J
x4J
05J
bx 6J
0:J
bx ;J
bx <J
bx =J
x>J
x?J
x@J
bx AJ
bx BJ
bx CJ
bx DJ
xYJ
xZJ
bx [J
x\J
x]J
x^J
bx _J
x`J
xaJ
bx bJ
xcJ
xdJ
bx eJ
xfJ
xgJ
xhJ
bx iJ
xjJ
bx kJ
bx lJ
bx mJ
bx nJ
bx oJ
bx pJ
bx qJ
bx rJ
bx sJ
bx tJ
xuJ
xvJ
xwJ
bx xJ
b0xxxx yJ
xzJ
x{J
x|J
bx }J
bx ~J
bx !K
bx "K
bx #K
bx $K
bx %K
bx &K
bx 'K
bx (K
x)K
x*K
bx +K
bx ,K
b0 -K
bx .K
b0 /K
10K
bx 1K
bx 2K
x3K
x4K
x5K
x6K
x7K
x8K
x9K
x:K
x;K
x<K
x=K
x>K
x?K
x@K
xAK
xBK
xCK
xDK
xEK
xFK
xGK
xHK
xIK
xJK
xKK
xLK
xMK
xNK
xOK
xPK
xQK
xRK
xSK
xTK
xUK
xVK
xWK
xXK
xYK
xZK
x[K
x\K
bx ]K
xdK
xeK
xfK
xgK
xhK
xiK
xjK
xkK
xlK
xmK
xqK
bx rK
xsK
xtK
bx uK
bx vK
xwK
xxK
0yK
bx zK
x~K
bx !L
bx "L
bx #L
bx 'L
x(L
bx )L
x*L
x+L
bx ,L
bx -L
x.L
x/L
00L
bx 1L
x5L
bx 6L
bx 7L
bx 8L
b0 <L
x=L
bx >L
x?L
0@L
bx AL
bx BL
xCL
xDL
0EL
bx FL
0JL
bx KL
bx LL
bx ML
xQL
bx RL
xSL
xTL
bx UL
bx VL
xWL
xXL
0YL
bx ZL
x^L
bx _L
bx `L
bx aL
b100000000000000000000000000000000000000000000000000 eL
xfL
bx gL
xhL
0iL
bx jL
bx kL
xlL
xmL
0nL
bx oL
0sL
bx tL
bx uL
bx vL
xwL
xxL
xyL
bx zL
bx {L
bx |L
bx }L
$end
#50
1!
1`
#150
1"
1c
0+E
0dG
0?J
0xL
0!'
b0 "'
0w(
b0 x(
0o*
b0 p*
0g,
b0 h,
b0 K+
0L+
b0 S)
0T)
b0 ['
0\'
b0 b%
0c%
b0 F+
0y+
b0 N)
0#*
b0 V'
0+(
b0 ]%
03&
b1000000000000000000000000000000000000000000000 /&
b1000000000000000000000000000000000000000000000 '(
b1000000000000000000000000000000000000000000000 })
b1000000000000000000000000000000000000000000000 u+
0=&
05(
0-*
0%,
#350
1#
1=!
#750
1$
#800
0!
0`
#900
0"
0c
#1100
0#
0=!
#1500
0$
#1550
1!
1`
#1650
1"
1c
#1850
1#
1=!
#2250
1$
#2300
0!
0`
#2400
0"
0c
#2600
0#
0=!
#3000
0$
#3050
1!
1`
#3150
1"
1c
#3350
1#
1=!
#3750
1$
#3800
0!
0`
#3900
0"
0c
#4100
0#
0=!
#4500
0$
#4550
1!
1`
#4650
1"
1c
#4850
1#
1=!
#5250
1$
#5300
0!
0`
#5400
0"
0c
#5600
0#
0=!
#6000
0$
#6050
1!
1`
#6150
1"
1c
#6350
1#
1=!
#6750
1$
#6800
0!
0`
#6900
0"
0c
#7100
0#
0=!
#7500
0$
#7550
1!
1`
#7650
1"
1c
#7850
1#
1=!
#8250
1$
#8300
0!
0`
#8400
0"
0c
#8600
0#
0=!
#9000
0$
#9050
1!
1`
#9150
1"
1c
#9350
1#
1=!
#9750
1$
#9800
0!
0`
#9900
0"
0c
#10000
